// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeanFeedWarningMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BeanFeedWarningMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {
namespace Protobuf {

namespace {

const ::google::protobuf::Descriptor* RiskRuleWarning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskRuleWarning_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiskGroupWarning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskGroupWarning_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedWarningMsgRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedWarningMsgRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogWarning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogWarning_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedWarningMsgArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedWarningMsgArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiskRuleWarningSnapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskRuleWarningSnapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiskRuleWarningOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskRuleWarningOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiskRuleWarningOpenOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskRuleWarningOpenOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiskRuleWarningQuotaModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskRuleWarningQuotaModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiskRuleWarningTradingResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskRuleWarningTradingResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto() {
  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BeanFeedWarningMsg.proto");
  GOOGLE_CHECK(file != NULL);
  RiskRuleWarning_descriptor_ = file->message_type(0);
  static const int RiskRuleWarning_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, serialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, riskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, accountgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, stkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, exchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, bsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, calculatevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, thresholdvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, riskresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, durationstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, durationendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, triggertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, numerator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, basevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, snapshotserialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, istriggered_),
  };
  RiskRuleWarning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskRuleWarning_descriptor_,
      RiskRuleWarning::default_instance_,
      RiskRuleWarning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskRuleWarning));
  RiskGroupWarning_descriptor_ = file->message_type(1);
  static const int RiskGroupWarning_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, serialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, parentriskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, accountgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, stkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, exchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, triggertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, riskresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, riskrulewarninglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, bsflag_),
  };
  RiskGroupWarning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskGroupWarning_descriptor_,
      RiskGroupWarning::default_instance_,
      RiskGroupWarning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskGroupWarning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskGroupWarning));
  FeedWarningMsgRequest_descriptor_ = file->message_type(2);
  static const int FeedWarningMsgRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgRequest, strcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgRequest, strsubcategory_),
  };
  FeedWarningMsgRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedWarningMsgRequest_descriptor_,
      FeedWarningMsgRequest::default_instance_,
      FeedWarningMsgRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedWarningMsgRequest));
  LogWarning_descriptor_ = file->message_type(3);
  static const int LogWarning_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, serialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, triggertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, servicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, referencenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, rawlogentry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, description_),
  };
  LogWarning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogWarning_descriptor_,
      LogWarning::default_instance_,
      LogWarning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogWarning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogWarning));
  FeedWarningMsgArray_descriptor_ = file->message_type(4);
  static const int FeedWarningMsgArray_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, strcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, strsubcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, isource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, riskrulewarning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, riskrulewarninglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, riskgroupwarning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, riskgroupwarninglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, riskrulewarningsnapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, riskrulewarningsnapshotlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, logwarning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, logwarninglist_),
  };
  FeedWarningMsgArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedWarningMsgArray_descriptor_,
      FeedWarningMsgArray::default_instance_,
      FeedWarningMsgArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedWarningMsgArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedWarningMsgArray));
  RiskRuleWarningSnapshot_descriptor_ = file->message_type(5);
  static const int RiskRuleWarningSnapshot_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, snapshotserialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, riskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, accountgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, stkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, exchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, bsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, riskrulewarningorderinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, riskrulewarningopenorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, riskrulewarningquotamodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, riskrulewarningtradingresult_),
  };
  RiskRuleWarningSnapshot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskRuleWarningSnapshot_descriptor_,
      RiskRuleWarningSnapshot::default_instance_,
      RiskRuleWarningSnapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningSnapshot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskRuleWarningSnapshot));
  RiskRuleWarningOrderInfo_descriptor_ = file->message_type(6);
  static const int RiskRuleWarningOrderInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, stkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, bsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, contractnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, acctid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, accountgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, ordertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, orderqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, orderprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, orderamount_),
  };
  RiskRuleWarningOrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskRuleWarningOrderInfo_descriptor_,
      RiskRuleWarningOrderInfo::default_instance_,
      RiskRuleWarningOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskRuleWarningOrderInfo));
  RiskRuleWarningOpenOrder_descriptor_ = file->message_type(7);
  static const int RiskRuleWarningOpenOrder_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, stkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, bsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, contractnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, acctid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, accountgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, ordertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, orderqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, orderprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, orderamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, withdrawqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, withdrawamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, knockqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, knockamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, reckoningamt_),
  };
  RiskRuleWarningOpenOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskRuleWarningOpenOrder_descriptor_,
      RiskRuleWarningOpenOrder::default_instance_,
      RiskRuleWarningOpenOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningOpenOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskRuleWarningOpenOrder));
  RiskRuleWarningQuotaModel_descriptor_ = file->message_type(8);
  static const int RiskRuleWarningQuotaModel_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, stkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, flast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, faskprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, iaskvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, fbidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, ibidvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, itotalaskqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, itotalbidqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, fhighlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, flowlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, lvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, quotatime_),
  };
  RiskRuleWarningQuotaModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskRuleWarningQuotaModel_descriptor_,
      RiskRuleWarningQuotaModel::default_instance_,
      RiskRuleWarningQuotaModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningQuotaModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskRuleWarningQuotaModel));
  RiskRuleWarningTradingResult_descriptor_ = file->message_type(9);
  static const int RiskRuleWarningTradingResult_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, stkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, bsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, contractnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, acctid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, accountgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, knockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, orderqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, orderprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, orderamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, knockqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, knockamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, reckoningamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, knockprice_),
  };
  RiskRuleWarningTradingResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskRuleWarningTradingResult_descriptor_,
      RiskRuleWarningTradingResult::default_instance_,
      RiskRuleWarningTradingResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskRuleWarningTradingResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskRuleWarningTradingResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BeanFeedWarningMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskRuleWarning_descriptor_, &RiskRuleWarning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskGroupWarning_descriptor_, &RiskGroupWarning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedWarningMsgRequest_descriptor_, &FeedWarningMsgRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogWarning_descriptor_, &LogWarning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedWarningMsgArray_descriptor_, &FeedWarningMsgArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskRuleWarningSnapshot_descriptor_, &RiskRuleWarningSnapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskRuleWarningOrderInfo_descriptor_, &RiskRuleWarningOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskRuleWarningOpenOrder_descriptor_, &RiskRuleWarningOpenOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskRuleWarningQuotaModel_descriptor_, &RiskRuleWarningQuotaModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskRuleWarningTradingResult_descriptor_, &RiskRuleWarningTradingResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto() {
  delete RiskRuleWarning::default_instance_;
  delete RiskRuleWarning_reflection_;
  delete RiskGroupWarning::default_instance_;
  delete RiskGroupWarning_reflection_;
  delete FeedWarningMsgRequest::default_instance_;
  delete FeedWarningMsgRequest_reflection_;
  delete LogWarning::default_instance_;
  delete LogWarning_reflection_;
  delete FeedWarningMsgArray::default_instance_;
  delete FeedWarningMsgArray_reflection_;
  delete RiskRuleWarningSnapshot::default_instance_;
  delete RiskRuleWarningSnapshot_reflection_;
  delete RiskRuleWarningOrderInfo::default_instance_;
  delete RiskRuleWarningOrderInfo_reflection_;
  delete RiskRuleWarningOpenOrder::default_instance_;
  delete RiskRuleWarningOpenOrder_reflection_;
  delete RiskRuleWarningQuotaModel::default_instance_;
  delete RiskRuleWarningQuotaModel_reflection_;
  delete RiskRuleWarningTradingResult::default_instance_;
  delete RiskRuleWarningTradingResult_reflection_;
}

void protobuf_AddDesc_BeanFeedWarningMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030BeanFeedWarningMsg.proto\022\021Protocol.Pro"
    "tobuf\"\356\002\n\017RiskRuleWarning\022\021\n\tserialNum\030\001"
    " \001(\003\022\016\n\006riskid\030\002 \002(\t\022\026\n\016accountGroupId\030\003"
    " \002(\t\022\r\n\005stkId\030\004 \001(\t\022\016\n\006exchId\030\005 \001(\t\022\016\n\006b"
    "sFlag\030\006 \001(\t\022\026\n\016calculateValue\030\007 \001(\001\022\026\n\016t"
    "hresholdValue\030\010 \001(\001\022\022\n\nriskResult\030\t \001(\t\022"
    "\031\n\021durationStartTime\030\n \001(\003\022\027\n\017durationEn"
    "dTime\030\013 \001(\003\022\023\n\013triggerTime\030\014 \001(\003\022\016\n\006coun"
    "ts\030\r \001(\005\022\021\n\tNumerator\030\016 \001(\001\022\021\n\tBaseValue"
    "\030\017 \001(\001\022\031\n\021snapshotSerialNum\030\020 \001(\003\022\023\n\013isT"
    "riggered\030\021 \001(\010\"\220\002\n\020RiskGroupWarning\022\021\n\ts"
    "erialNum\030\001 \002(\003\022\024\n\014parentRiskId\030\002 \002(\t\022\026\n\016"
    "accountGroupId\030\003 \002(\t\022\r\n\005stkId\030\004 \001(\t\022\016\n\006e"
    "xchId\030\005 \001(\t\022\023\n\013triggerTime\030\006 \001(\003\022\022\n\nrisk"
    "Result\030\007 \001(\t\022\021\n\tbeginTime\030\010 \001(\003\022\017\n\007endTi"
    "me\030\t \001(\003\022\?\n\023riskRuleWarningList\030\013 \003(\0132\"."
    "Protocol.Protobuf.RiskRuleWarning\022\016\n\006bsF"
    "lag\030\014 \001(\t\"D\n\025FeedWarningMsgRequest\022\023\n\013st"
    "rCategory\030\001 \001(\t\022\026\n\016strSubCategory\030\002 \001(\t\""
    "\317\001\n\nLogWarning\022\021\n\tserialNum\030\001 \002(\003\022\021\n\tser"
    "viceID\030\002 \002(\t\022\023\n\013triggerTime\030\003 \001(\003\022\r\n\005lev"
    "el\030\004 \001(\t\022\023\n\013serviceType\030\005 \001(\t\022\020\n\010infoTyp"
    "e\030\006 \001(\t\022\020\n\010clientID\030\007 \001(\t\022\024\n\014referenceNu"
    "m\030\010 \001(\t\022\023\n\013rawLogEntry\030\t \001(\t\022\023\n\013descript"
    "ion\030\n \001(\t\"\333\004\n\023FeedWarningMsgArray\022\023\n\013str"
    "Category\030\001 \001(\t\022\026\n\016strSubCategory\030\002 \001(\t\022\017"
    "\n\007iSource\030\003 \001(\005\022;\n\017riskRuleWarning\030\005 \001(\013"
    "2\".Protocol.Protobuf.RiskRuleWarning\022\?\n\023"
    "riskRuleWarningList\030\006 \003(\0132\".Protocol.Pro"
    "tobuf.RiskRuleWarning\022=\n\020riskGroupWarnin"
    "g\030\007 \001(\0132#.Protocol.Protobuf.RiskGroupWar"
    "ning\022A\n\024riskGroupWarningList\030\010 \003(\0132#.Pro"
    "tocol.Protobuf.RiskGroupWarning\022K\n\027riskR"
    "uleWarningSnapshot\030\t \001(\0132*.Protocol.Prot"
    "obuf.RiskRuleWarningSnapshot\022O\n\033riskRule"
    "WarningSnapshotList\030\n \003(\0132*.Protocol.Pro"
    "tobuf.RiskRuleWarningSnapshot\0221\n\nlogWarn"
    "ing\030d \001(\0132\035.Protocol.Protobuf.LogWarning"
    "\0225\n\016logWarningList\030e \003(\0132\035.Protocol.Prot"
    "obuf.LogWarning\"\321\003\n\027RiskRuleWarningSnaps"
    "hot\022\031\n\021snapshotSerialNum\030\001 \002(\003\022\016\n\006riskid"
    "\030\002 \002(\t\022\026\n\016accountGroupId\030\003 \002(\t\022\r\n\005stkId\030"
    "\004 \002(\t\022\016\n\006exchId\030\005 \002(\t\022\016\n\006bsFlag\030\006 \002(\t\022M\n"
    "\030riskRuleWarningOrderInfo\030\007 \001(\0132+.Protoc"
    "ol.Protobuf.RiskRuleWarningOrderInfo\022M\n\030"
    "riskRuleWarningOpenOrder\030\010 \003(\0132+.Protoco"
    "l.Protobuf.RiskRuleWarningOpenOrder\022O\n\031r"
    "iskRuleWarningQuotaModel\030\t \003(\0132,.Protoco"
    "l.Protobuf.RiskRuleWarningQuotaModel\022U\n\034"
    "riskRuleWarningTradingResult\030\n \003(\0132/.Pro"
    "tocol.Protobuf.RiskRuleWarningTradingRes"
    "ult\"\376\001\n\030RiskRuleWarningOrderInfo\022\r\n\005stkI"
    "d\030\001 \002(\t\022\022\n\nexchangeId\030\002 \002(\t\022\016\n\006bsFlag\030\003 "
    "\002(\t\022\023\n\013contractNum\030\004 \002(\t\022\016\n\006acctId\030\005 \002(\t"
    "\022\021\n\tpriceType\030\006 \002(\t\022\026\n\016accountGroupId\030\007 "
    "\002(\t\022\021\n\tgroupType\030\010 \002(\t\022\021\n\torderTime\030\t \002("
    "\003\022\020\n\010orderQty\030\n \002(\005\022\022\n\norderPrice\030\013 \002(\001\022"
    "\023\n\013orderAmount\030\014 \002(\001\"\342\002\n\030RiskRuleWarning"
    "OpenOrder\022\r\n\005stkId\030\001 \002(\t\022\022\n\nexchangeId\030\002"
    " \002(\t\022\016\n\006bsFlag\030\003 \002(\t\022\023\n\013contractNum\030\004 \002("
    "\t\022\016\n\006acctId\030\005 \002(\t\022\021\n\tpriceType\030\006 \002(\t\022\026\n\016"
    "accountGroupId\030\007 \002(\t\022\021\n\tgroupType\030\010 \002(\t\022"
    "\021\n\torderTime\030\t \002(\003\022\020\n\010orderQty\030\n \002(\003\022\022\n\n"
    "orderPrice\030\013 \002(\001\022\023\n\013orderAmount\030\014 \002(\001\022\023\n"
    "\013withdrawQty\030\r \002(\003\022\023\n\013withdrawAmt\030\016 \002(\001\022"
    "\020\n\010knockQty\030\017 \002(\003\022\020\n\010knockAmt\030\020 \002(\001\022\024\n\014r"
    "eckoningAmt\030\021 \002(\001\"\240\002\n\031RiskRuleWarningQuo"
    "taModel\022\r\n\005stkId\030\001 \002(\t\022\022\n\nexchangeId\030\002 \002"
    "(\t\022\r\n\005fLast\030\003 \002(\001\022\025\n\tfAskPrice\030\004 \003(\001B\002\020\001"
    "\022\023\n\007iAskVol\030\005 \003(\005B\002\020\001\022\025\n\tfBidPrice\030\006 \003(\001"
    "B\002\020\001\022\023\n\007iBidVol\030\007 \003(\005B\002\020\001\022\024\n\014iTotalAskQt"
    "y\030\010 \001(\003\022\024\n\014iTotalBidQty\030\t \001(\003\022\024\n\014fHighLi"
    "mited\030\n \001(\001\022\023\n\013fLowLimited\030\013 \001(\001\022\017\n\007lVol"
    "ume\030\014 \001(\003\022\021\n\tquotaTime\030\r \002(\003\"\320\002\n\034RiskRul"
    "eWarningTradingResult\022\r\n\005stkId\030\001 \002(\t\022\022\n\n"
    "exchangeId\030\002 \002(\t\022\016\n\006bsFlag\030\003 \002(\t\022\023\n\013cont"
    "ractNum\030\004 \002(\t\022\016\n\006acctId\030\005 \002(\t\022\021\n\tpriceTy"
    "pe\030\006 \002(\t\022\026\n\016accountGroupId\030\007 \002(\t\022\021\n\tgrou"
    "pType\030\010 \002(\t\022\021\n\tknockCode\030\t \002(\t\022\020\n\010orderQ"
    "ty\030\n \002(\003\022\022\n\norderPrice\030\013 \002(\001\022\023\n\013orderAmo"
    "unt\030\014 \002(\001\022\020\n\010knockQty\030\r \002(\003\022\020\n\010knockAmt\030"
    "\016 \002(\001\022\024\n\014reckoningAmt\030\017 \002(\001\022\022\n\nknockPric"
    "e\030\020 \002(\001B6\n com.framework.protobuf.util.b"
    "eanB\022BeanFeedWarningMsg", 3343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BeanFeedWarningMsg.proto", &protobuf_RegisterTypes);
  RiskRuleWarning::default_instance_ = new RiskRuleWarning();
  RiskGroupWarning::default_instance_ = new RiskGroupWarning();
  FeedWarningMsgRequest::default_instance_ = new FeedWarningMsgRequest();
  LogWarning::default_instance_ = new LogWarning();
  FeedWarningMsgArray::default_instance_ = new FeedWarningMsgArray();
  RiskRuleWarningSnapshot::default_instance_ = new RiskRuleWarningSnapshot();
  RiskRuleWarningOrderInfo::default_instance_ = new RiskRuleWarningOrderInfo();
  RiskRuleWarningOpenOrder::default_instance_ = new RiskRuleWarningOpenOrder();
  RiskRuleWarningQuotaModel::default_instance_ = new RiskRuleWarningQuotaModel();
  RiskRuleWarningTradingResult::default_instance_ = new RiskRuleWarningTradingResult();
  RiskRuleWarning::default_instance_->InitAsDefaultInstance();
  RiskGroupWarning::default_instance_->InitAsDefaultInstance();
  FeedWarningMsgRequest::default_instance_->InitAsDefaultInstance();
  LogWarning::default_instance_->InitAsDefaultInstance();
  FeedWarningMsgArray::default_instance_->InitAsDefaultInstance();
  RiskRuleWarningSnapshot::default_instance_->InitAsDefaultInstance();
  RiskRuleWarningOrderInfo::default_instance_->InitAsDefaultInstance();
  RiskRuleWarningOpenOrder::default_instance_->InitAsDefaultInstance();
  RiskRuleWarningQuotaModel::default_instance_->InitAsDefaultInstance();
  RiskRuleWarningTradingResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BeanFeedWarningMsg_2eproto {
  StaticDescriptorInitializer_BeanFeedWarningMsg_2eproto() {
    protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  }
} static_descriptor_initializer_BeanFeedWarningMsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RiskRuleWarning::kSerialNumFieldNumber;
const int RiskRuleWarning::kRiskidFieldNumber;
const int RiskRuleWarning::kAccountGroupIdFieldNumber;
const int RiskRuleWarning::kStkIdFieldNumber;
const int RiskRuleWarning::kExchIdFieldNumber;
const int RiskRuleWarning::kBsFlagFieldNumber;
const int RiskRuleWarning::kCalculateValueFieldNumber;
const int RiskRuleWarning::kThresholdValueFieldNumber;
const int RiskRuleWarning::kRiskResultFieldNumber;
const int RiskRuleWarning::kDurationStartTimeFieldNumber;
const int RiskRuleWarning::kDurationEndTimeFieldNumber;
const int RiskRuleWarning::kTriggerTimeFieldNumber;
const int RiskRuleWarning::kCountsFieldNumber;
const int RiskRuleWarning::kNumeratorFieldNumber;
const int RiskRuleWarning::kBaseValueFieldNumber;
const int RiskRuleWarning::kSnapshotSerialNumFieldNumber;
const int RiskRuleWarning::kIsTriggeredFieldNumber;
#endif  // !_MSC_VER

RiskRuleWarning::RiskRuleWarning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.RiskRuleWarning)
}

void RiskRuleWarning::InitAsDefaultInstance() {
}

RiskRuleWarning::RiskRuleWarning(const RiskRuleWarning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.RiskRuleWarning)
}

void RiskRuleWarning::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialnum_ = GOOGLE_LONGLONG(0);
  riskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calculatevalue_ = 0;
  thresholdvalue_ = 0;
  riskresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  durationstarttime_ = GOOGLE_LONGLONG(0);
  durationendtime_ = GOOGLE_LONGLONG(0);
  triggertime_ = GOOGLE_LONGLONG(0);
  counts_ = 0;
  numerator_ = 0;
  basevalue_ = 0;
  snapshotserialnum_ = GOOGLE_LONGLONG(0);
  istriggered_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskRuleWarning::~RiskRuleWarning() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.RiskRuleWarning)
  SharedDtor();
}

void RiskRuleWarning::SharedDtor() {
  if (riskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete riskid_;
  }
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchid_;
  }
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (riskresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete riskresult_;
  }
  if (this != default_instance_) {
  }
}

void RiskRuleWarning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskRuleWarning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskRuleWarning_descriptor_;
}

const RiskRuleWarning& RiskRuleWarning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

RiskRuleWarning* RiskRuleWarning::default_instance_ = NULL;

RiskRuleWarning* RiskRuleWarning::New() const {
  return new RiskRuleWarning;
}

void RiskRuleWarning::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RiskRuleWarning*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(calculatevalue_, thresholdvalue_);
    serialnum_ = GOOGLE_LONGLONG(0);
    if (has_riskid()) {
      if (riskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        riskid_->clear();
      }
    }
    if (has_accountgroupid()) {
      if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountgroupid_->clear();
      }
    }
    if (has_stkid()) {
      if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stkid_->clear();
      }
    }
    if (has_exchid()) {
      if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchid_->clear();
      }
    }
    if (has_bsflag()) {
      if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bsflag_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(durationstarttime_, counts_);
    if (has_riskresult()) {
      if (riskresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        riskresult_->clear();
      }
    }
    snapshotserialnum_ = GOOGLE_LONGLONG(0);
  }
  istriggered_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskRuleWarning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.RiskRuleWarning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 serialNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serialnum_)));
          set_has_serialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_riskid;
        break;
      }

      // required string riskid = 2;
      case 2: {
        if (tag == 18) {
         parse_riskid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->riskid().data(), this->riskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "riskid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accountGroupId;
        break;
      }

      // required string accountGroupId = 3;
      case 3: {
        if (tag == 26) {
         parse_accountGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountgroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountgroupid().data(), this->accountgroupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountgroupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stkId;
        break;
      }

      // optional string stkId = 4;
      case 4: {
        if (tag == 34) {
         parse_stkId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stkid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stkid().data(), this->stkid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stkid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exchId;
        break;
      }

      // optional string exchId = 5;
      case 5: {
        if (tag == 42) {
         parse_exchId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchid().data(), this->exchid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bsFlag;
        break;
      }

      // optional string bsFlag = 6;
      case 6: {
        if (tag == 50) {
         parse_bsFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bsflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bsflag().data(), this->bsflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bsflag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_calculateValue;
        break;
      }

      // optional double calculateValue = 7;
      case 7: {
        if (tag == 57) {
         parse_calculateValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &calculatevalue_)));
          set_has_calculatevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_thresholdValue;
        break;
      }

      // optional double thresholdValue = 8;
      case 8: {
        if (tag == 65) {
         parse_thresholdValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thresholdvalue_)));
          set_has_thresholdvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_riskResult;
        break;
      }

      // optional string riskResult = 9;
      case 9: {
        if (tag == 74) {
         parse_riskResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->riskresult().data(), this->riskresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "riskresult");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_durationStartTime;
        break;
      }

      // optional int64 durationStartTime = 10;
      case 10: {
        if (tag == 80) {
         parse_durationStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &durationstarttime_)));
          set_has_durationstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_durationEndTime;
        break;
      }

      // optional int64 durationEndTime = 11;
      case 11: {
        if (tag == 88) {
         parse_durationEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &durationendtime_)));
          set_has_durationendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_triggerTime;
        break;
      }

      // optional int64 triggerTime = 12;
      case 12: {
        if (tag == 96) {
         parse_triggerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggertime_)));
          set_has_triggertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_counts;
        break;
      }

      // optional int32 counts = 13;
      case 13: {
        if (tag == 104) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_Numerator;
        break;
      }

      // optional double Numerator = 14;
      case 14: {
        if (tag == 113) {
         parse_Numerator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numerator_)));
          set_has_numerator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_BaseValue;
        break;
      }

      // optional double BaseValue = 15;
      case 15: {
        if (tag == 121) {
         parse_BaseValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &basevalue_)));
          set_has_basevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_snapshotSerialNum;
        break;
      }

      // optional int64 snapshotSerialNum = 16;
      case 16: {
        if (tag == 128) {
         parse_snapshotSerialNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &snapshotserialnum_)));
          set_has_snapshotserialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_isTriggered;
        break;
      }

      // optional bool isTriggered = 17;
      case 17: {
        if (tag == 136) {
         parse_isTriggered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istriggered_)));
          set_has_istriggered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.RiskRuleWarning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.RiskRuleWarning)
  return false;
#undef DO_
}

void RiskRuleWarning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.RiskRuleWarning)
  // optional int64 serialNum = 1;
  if (has_serialnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serialnum(), output);
  }

  // required string riskid = 2;
  if (has_riskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->riskid().data(), this->riskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "riskid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->riskid(), output);
  }

  // required string accountGroupId = 3;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->accountgroupid(), output);
  }

  // optional string stkId = 4;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stkid(), output);
  }

  // optional string exchId = 5;
  if (has_exchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchid().data(), this->exchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchid(), output);
  }

  // optional string bsFlag = 6;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bsflag(), output);
  }

  // optional double calculateValue = 7;
  if (has_calculatevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->calculatevalue(), output);
  }

  // optional double thresholdValue = 8;
  if (has_thresholdvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->thresholdvalue(), output);
  }

  // optional string riskResult = 9;
  if (has_riskresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->riskresult().data(), this->riskresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "riskresult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->riskresult(), output);
  }

  // optional int64 durationStartTime = 10;
  if (has_durationstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->durationstarttime(), output);
  }

  // optional int64 durationEndTime = 11;
  if (has_durationendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->durationendtime(), output);
  }

  // optional int64 triggerTime = 12;
  if (has_triggertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->triggertime(), output);
  }

  // optional int32 counts = 13;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->counts(), output);
  }

  // optional double Numerator = 14;
  if (has_numerator()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->numerator(), output);
  }

  // optional double BaseValue = 15;
  if (has_basevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->basevalue(), output);
  }

  // optional int64 snapshotSerialNum = 16;
  if (has_snapshotserialnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->snapshotserialnum(), output);
  }

  // optional bool isTriggered = 17;
  if (has_istriggered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->istriggered(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.RiskRuleWarning)
}

::google::protobuf::uint8* RiskRuleWarning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.RiskRuleWarning)
  // optional int64 serialNum = 1;
  if (has_serialnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serialnum(), target);
  }

  // required string riskid = 2;
  if (has_riskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->riskid().data(), this->riskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "riskid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->riskid(), target);
  }

  // required string accountGroupId = 3;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountgroupid(), target);
  }

  // optional string stkId = 4;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stkid(), target);
  }

  // optional string exchId = 5;
  if (has_exchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchid().data(), this->exchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchid(), target);
  }

  // optional string bsFlag = 6;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bsflag(), target);
  }

  // optional double calculateValue = 7;
  if (has_calculatevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->calculatevalue(), target);
  }

  // optional double thresholdValue = 8;
  if (has_thresholdvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->thresholdvalue(), target);
  }

  // optional string riskResult = 9;
  if (has_riskresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->riskresult().data(), this->riskresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "riskresult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->riskresult(), target);
  }

  // optional int64 durationStartTime = 10;
  if (has_durationstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->durationstarttime(), target);
  }

  // optional int64 durationEndTime = 11;
  if (has_durationendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->durationendtime(), target);
  }

  // optional int64 triggerTime = 12;
  if (has_triggertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->triggertime(), target);
  }

  // optional int32 counts = 13;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->counts(), target);
  }

  // optional double Numerator = 14;
  if (has_numerator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->numerator(), target);
  }

  // optional double BaseValue = 15;
  if (has_basevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->basevalue(), target);
  }

  // optional int64 snapshotSerialNum = 16;
  if (has_snapshotserialnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->snapshotserialnum(), target);
  }

  // optional bool isTriggered = 17;
  if (has_istriggered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->istriggered(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.RiskRuleWarning)
  return target;
}

int RiskRuleWarning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 serialNum = 1;
    if (has_serialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serialnum());
    }

    // required string riskid = 2;
    if (has_riskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->riskid());
    }

    // required string accountGroupId = 3;
    if (has_accountgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountgroupid());
    }

    // optional string stkId = 4;
    if (has_stkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stkid());
    }

    // optional string exchId = 5;
    if (has_exchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchid());
    }

    // optional string bsFlag = 6;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bsflag());
    }

    // optional double calculateValue = 7;
    if (has_calculatevalue()) {
      total_size += 1 + 8;
    }

    // optional double thresholdValue = 8;
    if (has_thresholdvalue()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string riskResult = 9;
    if (has_riskresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->riskresult());
    }

    // optional int64 durationStartTime = 10;
    if (has_durationstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->durationstarttime());
    }

    // optional int64 durationEndTime = 11;
    if (has_durationendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->durationendtime());
    }

    // optional int64 triggerTime = 12;
    if (has_triggertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->triggertime());
    }

    // optional int32 counts = 13;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

    // optional double Numerator = 14;
    if (has_numerator()) {
      total_size += 1 + 8;
    }

    // optional double BaseValue = 15;
    if (has_basevalue()) {
      total_size += 1 + 8;
    }

    // optional int64 snapshotSerialNum = 16;
    if (has_snapshotserialnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->snapshotserialnum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool isTriggered = 17;
    if (has_istriggered()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskRuleWarning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskRuleWarning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskRuleWarning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskRuleWarning::MergeFrom(const RiskRuleWarning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialnum()) {
      set_serialnum(from.serialnum());
    }
    if (from.has_riskid()) {
      set_riskid(from.riskid());
    }
    if (from.has_accountgroupid()) {
      set_accountgroupid(from.accountgroupid());
    }
    if (from.has_stkid()) {
      set_stkid(from.stkid());
    }
    if (from.has_exchid()) {
      set_exchid(from.exchid());
    }
    if (from.has_bsflag()) {
      set_bsflag(from.bsflag());
    }
    if (from.has_calculatevalue()) {
      set_calculatevalue(from.calculatevalue());
    }
    if (from.has_thresholdvalue()) {
      set_thresholdvalue(from.thresholdvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_riskresult()) {
      set_riskresult(from.riskresult());
    }
    if (from.has_durationstarttime()) {
      set_durationstarttime(from.durationstarttime());
    }
    if (from.has_durationendtime()) {
      set_durationendtime(from.durationendtime());
    }
    if (from.has_triggertime()) {
      set_triggertime(from.triggertime());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_numerator()) {
      set_numerator(from.numerator());
    }
    if (from.has_basevalue()) {
      set_basevalue(from.basevalue());
    }
    if (from.has_snapshotserialnum()) {
      set_snapshotserialnum(from.snapshotserialnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_istriggered()) {
      set_istriggered(from.istriggered());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskRuleWarning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskRuleWarning::CopyFrom(const RiskRuleWarning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskRuleWarning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void RiskRuleWarning::Swap(RiskRuleWarning* other) {
  if (other != this) {
    std::swap(serialnum_, other->serialnum_);
    std::swap(riskid_, other->riskid_);
    std::swap(accountgroupid_, other->accountgroupid_);
    std::swap(stkid_, other->stkid_);
    std::swap(exchid_, other->exchid_);
    std::swap(bsflag_, other->bsflag_);
    std::swap(calculatevalue_, other->calculatevalue_);
    std::swap(thresholdvalue_, other->thresholdvalue_);
    std::swap(riskresult_, other->riskresult_);
    std::swap(durationstarttime_, other->durationstarttime_);
    std::swap(durationendtime_, other->durationendtime_);
    std::swap(triggertime_, other->triggertime_);
    std::swap(counts_, other->counts_);
    std::swap(numerator_, other->numerator_);
    std::swap(basevalue_, other->basevalue_);
    std::swap(snapshotserialnum_, other->snapshotserialnum_);
    std::swap(istriggered_, other->istriggered_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskRuleWarning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskRuleWarning_descriptor_;
  metadata.reflection = RiskRuleWarning_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RiskGroupWarning::kSerialNumFieldNumber;
const int RiskGroupWarning::kParentRiskIdFieldNumber;
const int RiskGroupWarning::kAccountGroupIdFieldNumber;
const int RiskGroupWarning::kStkIdFieldNumber;
const int RiskGroupWarning::kExchIdFieldNumber;
const int RiskGroupWarning::kTriggerTimeFieldNumber;
const int RiskGroupWarning::kRiskResultFieldNumber;
const int RiskGroupWarning::kBeginTimeFieldNumber;
const int RiskGroupWarning::kEndTimeFieldNumber;
const int RiskGroupWarning::kRiskRuleWarningListFieldNumber;
const int RiskGroupWarning::kBsFlagFieldNumber;
#endif  // !_MSC_VER

RiskGroupWarning::RiskGroupWarning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.RiskGroupWarning)
}

void RiskGroupWarning::InitAsDefaultInstance() {
}

RiskGroupWarning::RiskGroupWarning(const RiskGroupWarning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.RiskGroupWarning)
}

void RiskGroupWarning::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialnum_ = GOOGLE_LONGLONG(0);
  parentriskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  triggertime_ = GOOGLE_LONGLONG(0);
  riskresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskGroupWarning::~RiskGroupWarning() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.RiskGroupWarning)
  SharedDtor();
}

void RiskGroupWarning::SharedDtor() {
  if (parentriskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentriskid_;
  }
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchid_;
  }
  if (riskresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete riskresult_;
  }
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (this != default_instance_) {
  }
}

void RiskGroupWarning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskGroupWarning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskGroupWarning_descriptor_;
}

const RiskGroupWarning& RiskGroupWarning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

RiskGroupWarning* RiskGroupWarning::default_instance_ = NULL;

RiskGroupWarning* RiskGroupWarning::New() const {
  return new RiskGroupWarning;
}

void RiskGroupWarning::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    serialnum_ = GOOGLE_LONGLONG(0);
    if (has_parentriskid()) {
      if (parentriskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parentriskid_->clear();
      }
    }
    if (has_accountgroupid()) {
      if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountgroupid_->clear();
      }
    }
    if (has_stkid()) {
      if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stkid_->clear();
      }
    }
    if (has_exchid()) {
      if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchid_->clear();
      }
    }
    triggertime_ = GOOGLE_LONGLONG(0);
    if (has_riskresult()) {
      if (riskresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        riskresult_->clear();
      }
    }
    begintime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 1280) {
    endtime_ = GOOGLE_LONGLONG(0);
    if (has_bsflag()) {
      if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bsflag_->clear();
      }
    }
  }
  riskrulewarninglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskGroupWarning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.RiskGroupWarning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 serialNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serialnum_)));
          set_has_serialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parentRiskId;
        break;
      }

      // required string parentRiskId = 2;
      case 2: {
        if (tag == 18) {
         parse_parentRiskId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentriskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parentriskid().data(), this->parentriskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parentriskid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accountGroupId;
        break;
      }

      // required string accountGroupId = 3;
      case 3: {
        if (tag == 26) {
         parse_accountGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountgroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountgroupid().data(), this->accountgroupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountgroupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stkId;
        break;
      }

      // optional string stkId = 4;
      case 4: {
        if (tag == 34) {
         parse_stkId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stkid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stkid().data(), this->stkid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stkid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exchId;
        break;
      }

      // optional string exchId = 5;
      case 5: {
        if (tag == 42) {
         parse_exchId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchid().data(), this->exchid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_triggerTime;
        break;
      }

      // optional int64 triggerTime = 6;
      case 6: {
        if (tag == 48) {
         parse_triggerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggertime_)));
          set_has_triggertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_riskResult;
        break;
      }

      // optional string riskResult = 7;
      case 7: {
        if (tag == 58) {
         parse_riskResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->riskresult().data(), this->riskresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "riskresult");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 8;
      case 8: {
        if (tag == 64) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 9;
      case 9: {
        if (tag == 72) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_riskRuleWarningList;
        break;
      }

      // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 11;
      case 11: {
        if (tag == 90) {
         parse_riskRuleWarningList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_riskrulewarninglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_riskRuleWarningList;
        if (input->ExpectTag(98)) goto parse_bsFlag;
        break;
      }

      // optional string bsFlag = 12;
      case 12: {
        if (tag == 98) {
         parse_bsFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bsflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bsflag().data(), this->bsflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bsflag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.RiskGroupWarning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.RiskGroupWarning)
  return false;
#undef DO_
}

void RiskGroupWarning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.RiskGroupWarning)
  // required int64 serialNum = 1;
  if (has_serialnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serialnum(), output);
  }

  // required string parentRiskId = 2;
  if (has_parentriskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentriskid().data(), this->parentriskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentriskid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parentriskid(), output);
  }

  // required string accountGroupId = 3;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->accountgroupid(), output);
  }

  // optional string stkId = 4;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stkid(), output);
  }

  // optional string exchId = 5;
  if (has_exchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchid().data(), this->exchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchid(), output);
  }

  // optional int64 triggerTime = 6;
  if (has_triggertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->triggertime(), output);
  }

  // optional string riskResult = 7;
  if (has_riskresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->riskresult().data(), this->riskresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "riskresult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->riskresult(), output);
  }

  // optional int64 beginTime = 8;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->begintime(), output);
  }

  // optional int64 endTime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->endtime(), output);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 11;
  for (int i = 0; i < this->riskrulewarninglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->riskrulewarninglist(i), output);
  }

  // optional string bsFlag = 12;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->bsflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.RiskGroupWarning)
}

::google::protobuf::uint8* RiskGroupWarning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.RiskGroupWarning)
  // required int64 serialNum = 1;
  if (has_serialnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serialnum(), target);
  }

  // required string parentRiskId = 2;
  if (has_parentriskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentriskid().data(), this->parentriskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentriskid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parentriskid(), target);
  }

  // required string accountGroupId = 3;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountgroupid(), target);
  }

  // optional string stkId = 4;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stkid(), target);
  }

  // optional string exchId = 5;
  if (has_exchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchid().data(), this->exchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchid(), target);
  }

  // optional int64 triggerTime = 6;
  if (has_triggertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->triggertime(), target);
  }

  // optional string riskResult = 7;
  if (has_riskresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->riskresult().data(), this->riskresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "riskresult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->riskresult(), target);
  }

  // optional int64 beginTime = 8;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->begintime(), target);
  }

  // optional int64 endTime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->endtime(), target);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 11;
  for (int i = 0; i < this->riskrulewarninglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->riskrulewarninglist(i), target);
  }

  // optional string bsFlag = 12;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->bsflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.RiskGroupWarning)
  return target;
}

int RiskGroupWarning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 serialNum = 1;
    if (has_serialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serialnum());
    }

    // required string parentRiskId = 2;
    if (has_parentriskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentriskid());
    }

    // required string accountGroupId = 3;
    if (has_accountgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountgroupid());
    }

    // optional string stkId = 4;
    if (has_stkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stkid());
    }

    // optional string exchId = 5;
    if (has_exchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchid());
    }

    // optional int64 triggerTime = 6;
    if (has_triggertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->triggertime());
    }

    // optional string riskResult = 7;
    if (has_riskresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->riskresult());
    }

    // optional int64 beginTime = 8;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 endTime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional string bsFlag = 12;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bsflag());
    }

  }
  // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 11;
  total_size += 1 * this->riskrulewarninglist_size();
  for (int i = 0; i < this->riskrulewarninglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->riskrulewarninglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskGroupWarning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskGroupWarning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskGroupWarning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskGroupWarning::MergeFrom(const RiskGroupWarning& from) {
  GOOGLE_CHECK_NE(&from, this);
  riskrulewarninglist_.MergeFrom(from.riskrulewarninglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialnum()) {
      set_serialnum(from.serialnum());
    }
    if (from.has_parentriskid()) {
      set_parentriskid(from.parentriskid());
    }
    if (from.has_accountgroupid()) {
      set_accountgroupid(from.accountgroupid());
    }
    if (from.has_stkid()) {
      set_stkid(from.stkid());
    }
    if (from.has_exchid()) {
      set_exchid(from.exchid());
    }
    if (from.has_triggertime()) {
      set_triggertime(from.triggertime());
    }
    if (from.has_riskresult()) {
      set_riskresult(from.riskresult());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_bsflag()) {
      set_bsflag(from.bsflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskGroupWarning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskGroupWarning::CopyFrom(const RiskGroupWarning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskGroupWarning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->riskrulewarninglist())) return false;
  return true;
}

void RiskGroupWarning::Swap(RiskGroupWarning* other) {
  if (other != this) {
    std::swap(serialnum_, other->serialnum_);
    std::swap(parentriskid_, other->parentriskid_);
    std::swap(accountgroupid_, other->accountgroupid_);
    std::swap(stkid_, other->stkid_);
    std::swap(exchid_, other->exchid_);
    std::swap(triggertime_, other->triggertime_);
    std::swap(riskresult_, other->riskresult_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    riskrulewarninglist_.Swap(&other->riskrulewarninglist_);
    std::swap(bsflag_, other->bsflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskGroupWarning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskGroupWarning_descriptor_;
  metadata.reflection = RiskGroupWarning_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedWarningMsgRequest::kStrCategoryFieldNumber;
const int FeedWarningMsgRequest::kStrSubCategoryFieldNumber;
#endif  // !_MSC_VER

FeedWarningMsgRequest::FeedWarningMsgRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.FeedWarningMsgRequest)
}

void FeedWarningMsgRequest::InitAsDefaultInstance() {
}

FeedWarningMsgRequest::FeedWarningMsgRequest(const FeedWarningMsgRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.FeedWarningMsgRequest)
}

void FeedWarningMsgRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strsubcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedWarningMsgRequest::~FeedWarningMsgRequest() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.FeedWarningMsgRequest)
  SharedDtor();
}

void FeedWarningMsgRequest::SharedDtor() {
  if (strcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcategory_;
  }
  if (strsubcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strsubcategory_;
  }
  if (this != default_instance_) {
  }
}

void FeedWarningMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedWarningMsgRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedWarningMsgRequest_descriptor_;
}

const FeedWarningMsgRequest& FeedWarningMsgRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

FeedWarningMsgRequest* FeedWarningMsgRequest::default_instance_ = NULL;

FeedWarningMsgRequest* FeedWarningMsgRequest::New() const {
  return new FeedWarningMsgRequest;
}

void FeedWarningMsgRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_strcategory()) {
      if (strcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strcategory_->clear();
      }
    }
    if (has_strsubcategory()) {
      if (strsubcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strsubcategory_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedWarningMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.FeedWarningMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strCategory = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcategory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strcategory().data(), this->strcategory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strcategory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strSubCategory;
        break;
      }

      // optional string strSubCategory = 2;
      case 2: {
        if (tag == 18) {
         parse_strSubCategory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsubcategory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strsubcategory().data(), this->strsubcategory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strsubcategory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.FeedWarningMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.FeedWarningMsgRequest)
  return false;
#undef DO_
}

void FeedWarningMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.FeedWarningMsgRequest)
  // optional string strCategory = 1;
  if (has_strcategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strcategory().data(), this->strcategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strcategory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strcategory(), output);
  }

  // optional string strSubCategory = 2;
  if (has_strsubcategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strsubcategory().data(), this->strsubcategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strsubcategory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strsubcategory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.FeedWarningMsgRequest)
}

::google::protobuf::uint8* FeedWarningMsgRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.FeedWarningMsgRequest)
  // optional string strCategory = 1;
  if (has_strcategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strcategory().data(), this->strcategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strcategory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strcategory(), target);
  }

  // optional string strSubCategory = 2;
  if (has_strsubcategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strsubcategory().data(), this->strsubcategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strsubcategory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strsubcategory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.FeedWarningMsgRequest)
  return target;
}

int FeedWarningMsgRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strCategory = 1;
    if (has_strcategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcategory());
    }

    // optional string strSubCategory = 2;
    if (has_strsubcategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsubcategory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedWarningMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedWarningMsgRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedWarningMsgRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedWarningMsgRequest::MergeFrom(const FeedWarningMsgRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strcategory()) {
      set_strcategory(from.strcategory());
    }
    if (from.has_strsubcategory()) {
      set_strsubcategory(from.strsubcategory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedWarningMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedWarningMsgRequest::CopyFrom(const FeedWarningMsgRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedWarningMsgRequest::IsInitialized() const {

  return true;
}

void FeedWarningMsgRequest::Swap(FeedWarningMsgRequest* other) {
  if (other != this) {
    std::swap(strcategory_, other->strcategory_);
    std::swap(strsubcategory_, other->strsubcategory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedWarningMsgRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedWarningMsgRequest_descriptor_;
  metadata.reflection = FeedWarningMsgRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogWarning::kSerialNumFieldNumber;
const int LogWarning::kServiceIDFieldNumber;
const int LogWarning::kTriggerTimeFieldNumber;
const int LogWarning::kLevelFieldNumber;
const int LogWarning::kServiceTypeFieldNumber;
const int LogWarning::kInfoTypeFieldNumber;
const int LogWarning::kClientIDFieldNumber;
const int LogWarning::kReferenceNumFieldNumber;
const int LogWarning::kRawLogEntryFieldNumber;
const int LogWarning::kDescriptionFieldNumber;
#endif  // !_MSC_VER

LogWarning::LogWarning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.LogWarning)
}

void LogWarning::InitAsDefaultInstance() {
}

LogWarning::LogWarning(const LogWarning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.LogWarning)
}

void LogWarning::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialnum_ = GOOGLE_LONGLONG(0);
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  triggertime_ = GOOGLE_LONGLONG(0);
  level_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referencenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rawlogentry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogWarning::~LogWarning() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.LogWarning)
  SharedDtor();
}

void LogWarning::SharedDtor() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (level_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete level_;
  }
  if (servicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicetype_;
  }
  if (infotype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infotype_;
  }
  if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientid_;
  }
  if (referencenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete referencenum_;
  }
  if (rawlogentry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rawlogentry_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void LogWarning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogWarning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogWarning_descriptor_;
}

const LogWarning& LogWarning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

LogWarning* LogWarning::default_instance_ = NULL;

LogWarning* LogWarning::New() const {
  return new LogWarning;
}

void LogWarning::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    serialnum_ = GOOGLE_LONGLONG(0);
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serviceid_->clear();
      }
    }
    triggertime_ = GOOGLE_LONGLONG(0);
    if (has_level()) {
      if (level_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        level_->clear();
      }
    }
    if (has_servicetype()) {
      if (servicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servicetype_->clear();
      }
    }
    if (has_infotype()) {
      if (infotype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        infotype_->clear();
      }
    }
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientid_->clear();
      }
    }
    if (has_referencenum()) {
      if (referencenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        referencenum_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_rawlogentry()) {
      if (rawlogentry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rawlogentry_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogWarning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.LogWarning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 serialNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serialnum_)));
          set_has_serialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serviceID;
        break;
      }

      // required string serviceID = 2;
      case 2: {
        if (tag == 18) {
         parse_serviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_triggerTime;
        break;
      }

      // optional int64 triggerTime = 3;
      case 3: {
        if (tag == 24) {
         parse_triggerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggertime_)));
          set_has_triggertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_level;
        break;
      }

      // optional string level = 4;
      case 4: {
        if (tag == 34) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->level().data(), this->level().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "level");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_serviceType;
        break;
      }

      // optional string serviceType = 5;
      case 5: {
        if (tag == 42) {
         parse_serviceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servicetype().data(), this->servicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servicetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_infoType;
        break;
      }

      // optional string infoType = 6;
      case 6: {
        if (tag == 50) {
         parse_infoType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infotype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infotype().data(), this->infotype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "infotype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_clientID;
        break;
      }

      // optional string clientID = 7;
      case 7: {
        if (tag == 58) {
         parse_clientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_referenceNum;
        break;
      }

      // optional string referenceNum = 8;
      case 8: {
        if (tag == 66) {
         parse_referenceNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referencenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referencenum().data(), this->referencenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "referencenum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rawLogEntry;
        break;
      }

      // optional string rawLogEntry = 9;
      case 9: {
        if (tag == 74) {
         parse_rawLogEntry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rawlogentry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rawlogentry().data(), this->rawlogentry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rawlogentry");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_description;
        break;
      }

      // optional string description = 10;
      case 10: {
        if (tag == 82) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.LogWarning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.LogWarning)
  return false;
#undef DO_
}

void LogWarning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.LogWarning)
  // required int64 serialNum = 1;
  if (has_serialnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serialnum(), output);
  }

  // required string serviceID = 2;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serviceid(), output);
  }

  // optional int64 triggerTime = 3;
  if (has_triggertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->triggertime(), output);
  }

  // optional string level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level().data(), this->level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->level(), output);
  }

  // optional string serviceType = 5;
  if (has_servicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicetype().data(), this->servicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->servicetype(), output);
  }

  // optional string infoType = 6;
  if (has_infotype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotype().data(), this->infotype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "infotype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->infotype(), output);
  }

  // optional string clientID = 7;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->clientid(), output);
  }

  // optional string referenceNum = 8;
  if (has_referencenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referencenum().data(), this->referencenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "referencenum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->referencenum(), output);
  }

  // optional string rawLogEntry = 9;
  if (has_rawlogentry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rawlogentry().data(), this->rawlogentry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rawlogentry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->rawlogentry(), output);
  }

  // optional string description = 10;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.LogWarning)
}

::google::protobuf::uint8* LogWarning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.LogWarning)
  // required int64 serialNum = 1;
  if (has_serialnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serialnum(), target);
  }

  // required string serviceID = 2;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serviceid(), target);
  }

  // optional int64 triggerTime = 3;
  if (has_triggertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->triggertime(), target);
  }

  // optional string level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level().data(), this->level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->level(), target);
  }

  // optional string serviceType = 5;
  if (has_servicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicetype().data(), this->servicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servicetype(), target);
  }

  // optional string infoType = 6;
  if (has_infotype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotype().data(), this->infotype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "infotype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->infotype(), target);
  }

  // optional string clientID = 7;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clientid(), target);
  }

  // optional string referenceNum = 8;
  if (has_referencenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referencenum().data(), this->referencenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "referencenum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->referencenum(), target);
  }

  // optional string rawLogEntry = 9;
  if (has_rawlogentry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rawlogentry().data(), this->rawlogentry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rawlogentry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rawlogentry(), target);
  }

  // optional string description = 10;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.LogWarning)
  return target;
}

int LogWarning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 serialNum = 1;
    if (has_serialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serialnum());
    }

    // required string serviceID = 2;
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }

    // optional int64 triggerTime = 3;
    if (has_triggertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->triggertime());
    }

    // optional string level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level());
    }

    // optional string serviceType = 5;
    if (has_servicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servicetype());
    }

    // optional string infoType = 6;
    if (has_infotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infotype());
    }

    // optional string clientID = 7;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string referenceNum = 8;
    if (has_referencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referencenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string rawLogEntry = 9;
    if (has_rawlogentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rawlogentry());
    }

    // optional string description = 10;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogWarning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogWarning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogWarning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogWarning::MergeFrom(const LogWarning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialnum()) {
      set_serialnum(from.serialnum());
    }
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_triggertime()) {
      set_triggertime(from.triggertime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_servicetype()) {
      set_servicetype(from.servicetype());
    }
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_referencenum()) {
      set_referencenum(from.referencenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rawlogentry()) {
      set_rawlogentry(from.rawlogentry());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogWarning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogWarning::CopyFrom(const LogWarning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogWarning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogWarning::Swap(LogWarning* other) {
  if (other != this) {
    std::swap(serialnum_, other->serialnum_);
    std::swap(serviceid_, other->serviceid_);
    std::swap(triggertime_, other->triggertime_);
    std::swap(level_, other->level_);
    std::swap(servicetype_, other->servicetype_);
    std::swap(infotype_, other->infotype_);
    std::swap(clientid_, other->clientid_);
    std::swap(referencenum_, other->referencenum_);
    std::swap(rawlogentry_, other->rawlogentry_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogWarning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogWarning_descriptor_;
  metadata.reflection = LogWarning_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedWarningMsgArray::kStrCategoryFieldNumber;
const int FeedWarningMsgArray::kStrSubCategoryFieldNumber;
const int FeedWarningMsgArray::kISourceFieldNumber;
const int FeedWarningMsgArray::kRiskRuleWarningFieldNumber;
const int FeedWarningMsgArray::kRiskRuleWarningListFieldNumber;
const int FeedWarningMsgArray::kRiskGroupWarningFieldNumber;
const int FeedWarningMsgArray::kRiskGroupWarningListFieldNumber;
const int FeedWarningMsgArray::kRiskRuleWarningSnapshotFieldNumber;
const int FeedWarningMsgArray::kRiskRuleWarningSnapshotListFieldNumber;
const int FeedWarningMsgArray::kLogWarningFieldNumber;
const int FeedWarningMsgArray::kLogWarningListFieldNumber;
#endif  // !_MSC_VER

FeedWarningMsgArray::FeedWarningMsgArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.FeedWarningMsgArray)
}

void FeedWarningMsgArray::InitAsDefaultInstance() {
  riskrulewarning_ = const_cast< ::Protocol::Protobuf::RiskRuleWarning*>(&::Protocol::Protobuf::RiskRuleWarning::default_instance());
  riskgroupwarning_ = const_cast< ::Protocol::Protobuf::RiskGroupWarning*>(&::Protocol::Protobuf::RiskGroupWarning::default_instance());
  riskrulewarningsnapshot_ = const_cast< ::Protocol::Protobuf::RiskRuleWarningSnapshot*>(&::Protocol::Protobuf::RiskRuleWarningSnapshot::default_instance());
  logwarning_ = const_cast< ::Protocol::Protobuf::LogWarning*>(&::Protocol::Protobuf::LogWarning::default_instance());
}

FeedWarningMsgArray::FeedWarningMsgArray(const FeedWarningMsgArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.FeedWarningMsgArray)
}

void FeedWarningMsgArray::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strsubcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isource_ = 0;
  riskrulewarning_ = NULL;
  riskgroupwarning_ = NULL;
  riskrulewarningsnapshot_ = NULL;
  logwarning_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedWarningMsgArray::~FeedWarningMsgArray() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.FeedWarningMsgArray)
  SharedDtor();
}

void FeedWarningMsgArray::SharedDtor() {
  if (strcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcategory_;
  }
  if (strsubcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strsubcategory_;
  }
  if (this != default_instance_) {
    delete riskrulewarning_;
    delete riskgroupwarning_;
    delete riskrulewarningsnapshot_;
    delete logwarning_;
  }
}

void FeedWarningMsgArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedWarningMsgArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedWarningMsgArray_descriptor_;
}

const FeedWarningMsgArray& FeedWarningMsgArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

FeedWarningMsgArray* FeedWarningMsgArray::default_instance_ = NULL;

FeedWarningMsgArray* FeedWarningMsgArray::New() const {
  return new FeedWarningMsgArray;
}

void FeedWarningMsgArray::Clear() {
  if (_has_bits_[0 / 32] & 175) {
    if (has_strcategory()) {
      if (strcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strcategory_->clear();
      }
    }
    if (has_strsubcategory()) {
      if (strsubcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strsubcategory_->clear();
      }
    }
    isource_ = 0;
    if (has_riskrulewarning()) {
      if (riskrulewarning_ != NULL) riskrulewarning_->::Protocol::Protobuf::RiskRuleWarning::Clear();
    }
    if (has_riskgroupwarning()) {
      if (riskgroupwarning_ != NULL) riskgroupwarning_->::Protocol::Protobuf::RiskGroupWarning::Clear();
    }
    if (has_riskrulewarningsnapshot()) {
      if (riskrulewarningsnapshot_ != NULL) riskrulewarningsnapshot_->::Protocol::Protobuf::RiskRuleWarningSnapshot::Clear();
    }
  }
  if (has_logwarning()) {
    if (logwarning_ != NULL) logwarning_->::Protocol::Protobuf::LogWarning::Clear();
  }
  riskrulewarninglist_.Clear();
  riskgroupwarninglist_.Clear();
  riskrulewarningsnapshotlist_.Clear();
  logwarninglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedWarningMsgArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.FeedWarningMsgArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strCategory = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcategory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strcategory().data(), this->strcategory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strcategory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strSubCategory;
        break;
      }

      // optional string strSubCategory = 2;
      case 2: {
        if (tag == 18) {
         parse_strSubCategory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsubcategory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strsubcategory().data(), this->strsubcategory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strsubcategory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iSource;
        break;
      }

      // optional int32 iSource = 3;
      case 3: {
        if (tag == 24) {
         parse_iSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isource_)));
          set_has_isource();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_riskRuleWarning;
        break;
      }

      // optional .Protocol.Protobuf.RiskRuleWarning riskRuleWarning = 5;
      case 5: {
        if (tag == 42) {
         parse_riskRuleWarning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_riskrulewarning()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_riskRuleWarningList;
        break;
      }

      // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 6;
      case 6: {
        if (tag == 50) {
         parse_riskRuleWarningList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_riskrulewarninglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_riskRuleWarningList;
        if (input->ExpectTag(58)) goto parse_riskGroupWarning;
        break;
      }

      // optional .Protocol.Protobuf.RiskGroupWarning riskGroupWarning = 7;
      case 7: {
        if (tag == 58) {
         parse_riskGroupWarning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_riskgroupwarning()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_riskGroupWarningList;
        break;
      }

      // repeated .Protocol.Protobuf.RiskGroupWarning riskGroupWarningList = 8;
      case 8: {
        if (tag == 66) {
         parse_riskGroupWarningList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_riskgroupwarninglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_riskGroupWarningList;
        if (input->ExpectTag(74)) goto parse_riskRuleWarningSnapshot;
        break;
      }

      // optional .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshot = 9;
      case 9: {
        if (tag == 74) {
         parse_riskRuleWarningSnapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_riskrulewarningsnapshot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_riskRuleWarningSnapshotList;
        break;
      }

      // repeated .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshotList = 10;
      case 10: {
        if (tag == 82) {
         parse_riskRuleWarningSnapshotList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_riskrulewarningsnapshotlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_riskRuleWarningSnapshotList;
        if (input->ExpectTag(802)) goto parse_logWarning;
        break;
      }

      // optional .Protocol.Protobuf.LogWarning logWarning = 100;
      case 100: {
        if (tag == 802) {
         parse_logWarning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logwarning()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_logWarningList;
        break;
      }

      // repeated .Protocol.Protobuf.LogWarning logWarningList = 101;
      case 101: {
        if (tag == 810) {
         parse_logWarningList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logwarninglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_logWarningList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.FeedWarningMsgArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.FeedWarningMsgArray)
  return false;
#undef DO_
}

void FeedWarningMsgArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.FeedWarningMsgArray)
  // optional string strCategory = 1;
  if (has_strcategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strcategory().data(), this->strcategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strcategory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strcategory(), output);
  }

  // optional string strSubCategory = 2;
  if (has_strsubcategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strsubcategory().data(), this->strsubcategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strsubcategory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strsubcategory(), output);
  }

  // optional int32 iSource = 3;
  if (has_isource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isource(), output);
  }

  // optional .Protocol.Protobuf.RiskRuleWarning riskRuleWarning = 5;
  if (has_riskrulewarning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->riskrulewarning(), output);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 6;
  for (int i = 0; i < this->riskrulewarninglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->riskrulewarninglist(i), output);
  }

  // optional .Protocol.Protobuf.RiskGroupWarning riskGroupWarning = 7;
  if (has_riskgroupwarning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->riskgroupwarning(), output);
  }

  // repeated .Protocol.Protobuf.RiskGroupWarning riskGroupWarningList = 8;
  for (int i = 0; i < this->riskgroupwarninglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->riskgroupwarninglist(i), output);
  }

  // optional .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshot = 9;
  if (has_riskrulewarningsnapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->riskrulewarningsnapshot(), output);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshotList = 10;
  for (int i = 0; i < this->riskrulewarningsnapshotlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->riskrulewarningsnapshotlist(i), output);
  }

  // optional .Protocol.Protobuf.LogWarning logWarning = 100;
  if (has_logwarning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->logwarning(), output);
  }

  // repeated .Protocol.Protobuf.LogWarning logWarningList = 101;
  for (int i = 0; i < this->logwarninglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->logwarninglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.FeedWarningMsgArray)
}

::google::protobuf::uint8* FeedWarningMsgArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.FeedWarningMsgArray)
  // optional string strCategory = 1;
  if (has_strcategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strcategory().data(), this->strcategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strcategory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strcategory(), target);
  }

  // optional string strSubCategory = 2;
  if (has_strsubcategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strsubcategory().data(), this->strsubcategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strsubcategory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strsubcategory(), target);
  }

  // optional int32 iSource = 3;
  if (has_isource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isource(), target);
  }

  // optional .Protocol.Protobuf.RiskRuleWarning riskRuleWarning = 5;
  if (has_riskrulewarning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->riskrulewarning(), target);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 6;
  for (int i = 0; i < this->riskrulewarninglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->riskrulewarninglist(i), target);
  }

  // optional .Protocol.Protobuf.RiskGroupWarning riskGroupWarning = 7;
  if (has_riskgroupwarning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->riskgroupwarning(), target);
  }

  // repeated .Protocol.Protobuf.RiskGroupWarning riskGroupWarningList = 8;
  for (int i = 0; i < this->riskgroupwarninglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->riskgroupwarninglist(i), target);
  }

  // optional .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshot = 9;
  if (has_riskrulewarningsnapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->riskrulewarningsnapshot(), target);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshotList = 10;
  for (int i = 0; i < this->riskrulewarningsnapshotlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->riskrulewarningsnapshotlist(i), target);
  }

  // optional .Protocol.Protobuf.LogWarning logWarning = 100;
  if (has_logwarning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->logwarning(), target);
  }

  // repeated .Protocol.Protobuf.LogWarning logWarningList = 101;
  for (int i = 0; i < this->logwarninglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->logwarninglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.FeedWarningMsgArray)
  return target;
}

int FeedWarningMsgArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strCategory = 1;
    if (has_strcategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcategory());
    }

    // optional string strSubCategory = 2;
    if (has_strsubcategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsubcategory());
    }

    // optional int32 iSource = 3;
    if (has_isource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isource());
    }

    // optional .Protocol.Protobuf.RiskRuleWarning riskRuleWarning = 5;
    if (has_riskrulewarning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->riskrulewarning());
    }

    // optional .Protocol.Protobuf.RiskGroupWarning riskGroupWarning = 7;
    if (has_riskgroupwarning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->riskgroupwarning());
    }

    // optional .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshot = 9;
    if (has_riskrulewarningsnapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->riskrulewarningsnapshot());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .Protocol.Protobuf.LogWarning logWarning = 100;
    if (has_logwarning()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logwarning());
    }

  }
  // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 6;
  total_size += 1 * this->riskrulewarninglist_size();
  for (int i = 0; i < this->riskrulewarninglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->riskrulewarninglist(i));
  }

  // repeated .Protocol.Protobuf.RiskGroupWarning riskGroupWarningList = 8;
  total_size += 1 * this->riskgroupwarninglist_size();
  for (int i = 0; i < this->riskgroupwarninglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->riskgroupwarninglist(i));
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshotList = 10;
  total_size += 1 * this->riskrulewarningsnapshotlist_size();
  for (int i = 0; i < this->riskrulewarningsnapshotlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->riskrulewarningsnapshotlist(i));
  }

  // repeated .Protocol.Protobuf.LogWarning logWarningList = 101;
  total_size += 2 * this->logwarninglist_size();
  for (int i = 0; i < this->logwarninglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logwarninglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedWarningMsgArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedWarningMsgArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedWarningMsgArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedWarningMsgArray::MergeFrom(const FeedWarningMsgArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  riskrulewarninglist_.MergeFrom(from.riskrulewarninglist_);
  riskgroupwarninglist_.MergeFrom(from.riskgroupwarninglist_);
  riskrulewarningsnapshotlist_.MergeFrom(from.riskrulewarningsnapshotlist_);
  logwarninglist_.MergeFrom(from.logwarninglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strcategory()) {
      set_strcategory(from.strcategory());
    }
    if (from.has_strsubcategory()) {
      set_strsubcategory(from.strsubcategory());
    }
    if (from.has_isource()) {
      set_isource(from.isource());
    }
    if (from.has_riskrulewarning()) {
      mutable_riskrulewarning()->::Protocol::Protobuf::RiskRuleWarning::MergeFrom(from.riskrulewarning());
    }
    if (from.has_riskgroupwarning()) {
      mutable_riskgroupwarning()->::Protocol::Protobuf::RiskGroupWarning::MergeFrom(from.riskgroupwarning());
    }
    if (from.has_riskrulewarningsnapshot()) {
      mutable_riskrulewarningsnapshot()->::Protocol::Protobuf::RiskRuleWarningSnapshot::MergeFrom(from.riskrulewarningsnapshot());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_logwarning()) {
      mutable_logwarning()->::Protocol::Protobuf::LogWarning::MergeFrom(from.logwarning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedWarningMsgArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedWarningMsgArray::CopyFrom(const FeedWarningMsgArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedWarningMsgArray::IsInitialized() const {

  if (has_riskrulewarning()) {
    if (!this->riskrulewarning().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->riskrulewarninglist())) return false;
  if (has_riskgroupwarning()) {
    if (!this->riskgroupwarning().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->riskgroupwarninglist())) return false;
  if (has_riskrulewarningsnapshot()) {
    if (!this->riskrulewarningsnapshot().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->riskrulewarningsnapshotlist())) return false;
  if (has_logwarning()) {
    if (!this->logwarning().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->logwarninglist())) return false;
  return true;
}

void FeedWarningMsgArray::Swap(FeedWarningMsgArray* other) {
  if (other != this) {
    std::swap(strcategory_, other->strcategory_);
    std::swap(strsubcategory_, other->strsubcategory_);
    std::swap(isource_, other->isource_);
    std::swap(riskrulewarning_, other->riskrulewarning_);
    riskrulewarninglist_.Swap(&other->riskrulewarninglist_);
    std::swap(riskgroupwarning_, other->riskgroupwarning_);
    riskgroupwarninglist_.Swap(&other->riskgroupwarninglist_);
    std::swap(riskrulewarningsnapshot_, other->riskrulewarningsnapshot_);
    riskrulewarningsnapshotlist_.Swap(&other->riskrulewarningsnapshotlist_);
    std::swap(logwarning_, other->logwarning_);
    logwarninglist_.Swap(&other->logwarninglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedWarningMsgArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedWarningMsgArray_descriptor_;
  metadata.reflection = FeedWarningMsgArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RiskRuleWarningSnapshot::kSnapshotSerialNumFieldNumber;
const int RiskRuleWarningSnapshot::kRiskidFieldNumber;
const int RiskRuleWarningSnapshot::kAccountGroupIdFieldNumber;
const int RiskRuleWarningSnapshot::kStkIdFieldNumber;
const int RiskRuleWarningSnapshot::kExchIdFieldNumber;
const int RiskRuleWarningSnapshot::kBsFlagFieldNumber;
const int RiskRuleWarningSnapshot::kRiskRuleWarningOrderInfoFieldNumber;
const int RiskRuleWarningSnapshot::kRiskRuleWarningOpenOrderFieldNumber;
const int RiskRuleWarningSnapshot::kRiskRuleWarningQuotaModelFieldNumber;
const int RiskRuleWarningSnapshot::kRiskRuleWarningTradingResultFieldNumber;
#endif  // !_MSC_VER

RiskRuleWarningSnapshot::RiskRuleWarningSnapshot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.RiskRuleWarningSnapshot)
}

void RiskRuleWarningSnapshot::InitAsDefaultInstance() {
  riskrulewarningorderinfo_ = const_cast< ::Protocol::Protobuf::RiskRuleWarningOrderInfo*>(&::Protocol::Protobuf::RiskRuleWarningOrderInfo::default_instance());
}

RiskRuleWarningSnapshot::RiskRuleWarningSnapshot(const RiskRuleWarningSnapshot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.RiskRuleWarningSnapshot)
}

void RiskRuleWarningSnapshot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  snapshotserialnum_ = GOOGLE_LONGLONG(0);
  riskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskrulewarningorderinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskRuleWarningSnapshot::~RiskRuleWarningSnapshot() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.RiskRuleWarningSnapshot)
  SharedDtor();
}

void RiskRuleWarningSnapshot::SharedDtor() {
  if (riskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete riskid_;
  }
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchid_;
  }
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (this != default_instance_) {
    delete riskrulewarningorderinfo_;
  }
}

void RiskRuleWarningSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskRuleWarningSnapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskRuleWarningSnapshot_descriptor_;
}

const RiskRuleWarningSnapshot& RiskRuleWarningSnapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

RiskRuleWarningSnapshot* RiskRuleWarningSnapshot::default_instance_ = NULL;

RiskRuleWarningSnapshot* RiskRuleWarningSnapshot::New() const {
  return new RiskRuleWarningSnapshot;
}

void RiskRuleWarningSnapshot::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    snapshotserialnum_ = GOOGLE_LONGLONG(0);
    if (has_riskid()) {
      if (riskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        riskid_->clear();
      }
    }
    if (has_accountgroupid()) {
      if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountgroupid_->clear();
      }
    }
    if (has_stkid()) {
      if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stkid_->clear();
      }
    }
    if (has_exchid()) {
      if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchid_->clear();
      }
    }
    if (has_bsflag()) {
      if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bsflag_->clear();
      }
    }
    if (has_riskrulewarningorderinfo()) {
      if (riskrulewarningorderinfo_ != NULL) riskrulewarningorderinfo_->::Protocol::Protobuf::RiskRuleWarningOrderInfo::Clear();
    }
  }
  riskrulewarningopenorder_.Clear();
  riskrulewarningquotamodel_.Clear();
  riskrulewarningtradingresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskRuleWarningSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.RiskRuleWarningSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 snapshotSerialNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &snapshotserialnum_)));
          set_has_snapshotserialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_riskid;
        break;
      }

      // required string riskid = 2;
      case 2: {
        if (tag == 18) {
         parse_riskid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->riskid().data(), this->riskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "riskid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accountGroupId;
        break;
      }

      // required string accountGroupId = 3;
      case 3: {
        if (tag == 26) {
         parse_accountGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountgroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountgroupid().data(), this->accountgroupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountgroupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stkId;
        break;
      }

      // required string stkId = 4;
      case 4: {
        if (tag == 34) {
         parse_stkId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stkid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stkid().data(), this->stkid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stkid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exchId;
        break;
      }

      // required string exchId = 5;
      case 5: {
        if (tag == 42) {
         parse_exchId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchid().data(), this->exchid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bsFlag;
        break;
      }

      // required string bsFlag = 6;
      case 6: {
        if (tag == 50) {
         parse_bsFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bsflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bsflag().data(), this->bsflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bsflag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_riskRuleWarningOrderInfo;
        break;
      }

      // optional .Protocol.Protobuf.RiskRuleWarningOrderInfo riskRuleWarningOrderInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_riskRuleWarningOrderInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_riskrulewarningorderinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_riskRuleWarningOpenOrder;
        break;
      }

      // repeated .Protocol.Protobuf.RiskRuleWarningOpenOrder riskRuleWarningOpenOrder = 8;
      case 8: {
        if (tag == 66) {
         parse_riskRuleWarningOpenOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_riskrulewarningopenorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_riskRuleWarningOpenOrder;
        if (input->ExpectTag(74)) goto parse_riskRuleWarningQuotaModel;
        break;
      }

      // repeated .Protocol.Protobuf.RiskRuleWarningQuotaModel riskRuleWarningQuotaModel = 9;
      case 9: {
        if (tag == 74) {
         parse_riskRuleWarningQuotaModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_riskrulewarningquotamodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_riskRuleWarningQuotaModel;
        if (input->ExpectTag(82)) goto parse_riskRuleWarningTradingResult;
        break;
      }

      // repeated .Protocol.Protobuf.RiskRuleWarningTradingResult riskRuleWarningTradingResult = 10;
      case 10: {
        if (tag == 82) {
         parse_riskRuleWarningTradingResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_riskrulewarningtradingresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_riskRuleWarningTradingResult;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.RiskRuleWarningSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.RiskRuleWarningSnapshot)
  return false;
#undef DO_
}

void RiskRuleWarningSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.RiskRuleWarningSnapshot)
  // required int64 snapshotSerialNum = 1;
  if (has_snapshotserialnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->snapshotserialnum(), output);
  }

  // required string riskid = 2;
  if (has_riskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->riskid().data(), this->riskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "riskid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->riskid(), output);
  }

  // required string accountGroupId = 3;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->accountgroupid(), output);
  }

  // required string stkId = 4;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stkid(), output);
  }

  // required string exchId = 5;
  if (has_exchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchid().data(), this->exchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchid(), output);
  }

  // required string bsFlag = 6;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bsflag(), output);
  }

  // optional .Protocol.Protobuf.RiskRuleWarningOrderInfo riskRuleWarningOrderInfo = 7;
  if (has_riskrulewarningorderinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->riskrulewarningorderinfo(), output);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningOpenOrder riskRuleWarningOpenOrder = 8;
  for (int i = 0; i < this->riskrulewarningopenorder_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->riskrulewarningopenorder(i), output);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningQuotaModel riskRuleWarningQuotaModel = 9;
  for (int i = 0; i < this->riskrulewarningquotamodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->riskrulewarningquotamodel(i), output);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningTradingResult riskRuleWarningTradingResult = 10;
  for (int i = 0; i < this->riskrulewarningtradingresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->riskrulewarningtradingresult(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.RiskRuleWarningSnapshot)
}

::google::protobuf::uint8* RiskRuleWarningSnapshot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.RiskRuleWarningSnapshot)
  // required int64 snapshotSerialNum = 1;
  if (has_snapshotserialnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->snapshotserialnum(), target);
  }

  // required string riskid = 2;
  if (has_riskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->riskid().data(), this->riskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "riskid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->riskid(), target);
  }

  // required string accountGroupId = 3;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountgroupid(), target);
  }

  // required string stkId = 4;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stkid(), target);
  }

  // required string exchId = 5;
  if (has_exchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchid().data(), this->exchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchid(), target);
  }

  // required string bsFlag = 6;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bsflag(), target);
  }

  // optional .Protocol.Protobuf.RiskRuleWarningOrderInfo riskRuleWarningOrderInfo = 7;
  if (has_riskrulewarningorderinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->riskrulewarningorderinfo(), target);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningOpenOrder riskRuleWarningOpenOrder = 8;
  for (int i = 0; i < this->riskrulewarningopenorder_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->riskrulewarningopenorder(i), target);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningQuotaModel riskRuleWarningQuotaModel = 9;
  for (int i = 0; i < this->riskrulewarningquotamodel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->riskrulewarningquotamodel(i), target);
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningTradingResult riskRuleWarningTradingResult = 10;
  for (int i = 0; i < this->riskrulewarningtradingresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->riskrulewarningtradingresult(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.RiskRuleWarningSnapshot)
  return target;
}

int RiskRuleWarningSnapshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 snapshotSerialNum = 1;
    if (has_snapshotserialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->snapshotserialnum());
    }

    // required string riskid = 2;
    if (has_riskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->riskid());
    }

    // required string accountGroupId = 3;
    if (has_accountgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountgroupid());
    }

    // required string stkId = 4;
    if (has_stkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stkid());
    }

    // required string exchId = 5;
    if (has_exchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchid());
    }

    // required string bsFlag = 6;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bsflag());
    }

    // optional .Protocol.Protobuf.RiskRuleWarningOrderInfo riskRuleWarningOrderInfo = 7;
    if (has_riskrulewarningorderinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->riskrulewarningorderinfo());
    }

  }
  // repeated .Protocol.Protobuf.RiskRuleWarningOpenOrder riskRuleWarningOpenOrder = 8;
  total_size += 1 * this->riskrulewarningopenorder_size();
  for (int i = 0; i < this->riskrulewarningopenorder_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->riskrulewarningopenorder(i));
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningQuotaModel riskRuleWarningQuotaModel = 9;
  total_size += 1 * this->riskrulewarningquotamodel_size();
  for (int i = 0; i < this->riskrulewarningquotamodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->riskrulewarningquotamodel(i));
  }

  // repeated .Protocol.Protobuf.RiskRuleWarningTradingResult riskRuleWarningTradingResult = 10;
  total_size += 1 * this->riskrulewarningtradingresult_size();
  for (int i = 0; i < this->riskrulewarningtradingresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->riskrulewarningtradingresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskRuleWarningSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskRuleWarningSnapshot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskRuleWarningSnapshot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskRuleWarningSnapshot::MergeFrom(const RiskRuleWarningSnapshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  riskrulewarningopenorder_.MergeFrom(from.riskrulewarningopenorder_);
  riskrulewarningquotamodel_.MergeFrom(from.riskrulewarningquotamodel_);
  riskrulewarningtradingresult_.MergeFrom(from.riskrulewarningtradingresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotserialnum()) {
      set_snapshotserialnum(from.snapshotserialnum());
    }
    if (from.has_riskid()) {
      set_riskid(from.riskid());
    }
    if (from.has_accountgroupid()) {
      set_accountgroupid(from.accountgroupid());
    }
    if (from.has_stkid()) {
      set_stkid(from.stkid());
    }
    if (from.has_exchid()) {
      set_exchid(from.exchid());
    }
    if (from.has_bsflag()) {
      set_bsflag(from.bsflag());
    }
    if (from.has_riskrulewarningorderinfo()) {
      mutable_riskrulewarningorderinfo()->::Protocol::Protobuf::RiskRuleWarningOrderInfo::MergeFrom(from.riskrulewarningorderinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskRuleWarningSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskRuleWarningSnapshot::CopyFrom(const RiskRuleWarningSnapshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskRuleWarningSnapshot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_riskrulewarningorderinfo()) {
    if (!this->riskrulewarningorderinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->riskrulewarningopenorder())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->riskrulewarningquotamodel())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->riskrulewarningtradingresult())) return false;
  return true;
}

void RiskRuleWarningSnapshot::Swap(RiskRuleWarningSnapshot* other) {
  if (other != this) {
    std::swap(snapshotserialnum_, other->snapshotserialnum_);
    std::swap(riskid_, other->riskid_);
    std::swap(accountgroupid_, other->accountgroupid_);
    std::swap(stkid_, other->stkid_);
    std::swap(exchid_, other->exchid_);
    std::swap(bsflag_, other->bsflag_);
    std::swap(riskrulewarningorderinfo_, other->riskrulewarningorderinfo_);
    riskrulewarningopenorder_.Swap(&other->riskrulewarningopenorder_);
    riskrulewarningquotamodel_.Swap(&other->riskrulewarningquotamodel_);
    riskrulewarningtradingresult_.Swap(&other->riskrulewarningtradingresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskRuleWarningSnapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskRuleWarningSnapshot_descriptor_;
  metadata.reflection = RiskRuleWarningSnapshot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RiskRuleWarningOrderInfo::kStkIdFieldNumber;
const int RiskRuleWarningOrderInfo::kExchangeIdFieldNumber;
const int RiskRuleWarningOrderInfo::kBsFlagFieldNumber;
const int RiskRuleWarningOrderInfo::kContractNumFieldNumber;
const int RiskRuleWarningOrderInfo::kAcctIdFieldNumber;
const int RiskRuleWarningOrderInfo::kPriceTypeFieldNumber;
const int RiskRuleWarningOrderInfo::kAccountGroupIdFieldNumber;
const int RiskRuleWarningOrderInfo::kGroupTypeFieldNumber;
const int RiskRuleWarningOrderInfo::kOrderTimeFieldNumber;
const int RiskRuleWarningOrderInfo::kOrderQtyFieldNumber;
const int RiskRuleWarningOrderInfo::kOrderPriceFieldNumber;
const int RiskRuleWarningOrderInfo::kOrderAmountFieldNumber;
#endif  // !_MSC_VER

RiskRuleWarningOrderInfo::RiskRuleWarningOrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.RiskRuleWarningOrderInfo)
}

void RiskRuleWarningOrderInfo::InitAsDefaultInstance() {
}

RiskRuleWarningOrderInfo::RiskRuleWarningOrderInfo(const RiskRuleWarningOrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.RiskRuleWarningOrderInfo)
}

void RiskRuleWarningOrderInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertime_ = GOOGLE_LONGLONG(0);
  orderqty_ = 0;
  orderprice_ = 0;
  orderamount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskRuleWarningOrderInfo::~RiskRuleWarningOrderInfo() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.RiskRuleWarningOrderInfo)
  SharedDtor();
}

void RiskRuleWarningOrderInfo::SharedDtor() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnum_;
  }
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acctid_;
  }
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricetype_;
  }
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grouptype_;
  }
  if (this != default_instance_) {
  }
}

void RiskRuleWarningOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskRuleWarningOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskRuleWarningOrderInfo_descriptor_;
}

const RiskRuleWarningOrderInfo& RiskRuleWarningOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

RiskRuleWarningOrderInfo* RiskRuleWarningOrderInfo::default_instance_ = NULL;

RiskRuleWarningOrderInfo* RiskRuleWarningOrderInfo::New() const {
  return new RiskRuleWarningOrderInfo;
}

void RiskRuleWarningOrderInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RiskRuleWarningOrderInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_stkid()) {
      if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stkid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchangeid_->clear();
      }
    }
    if (has_bsflag()) {
      if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bsflag_->clear();
      }
    }
    if (has_contractnum()) {
      if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractnum_->clear();
      }
    }
    if (has_acctid()) {
      if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acctid_->clear();
      }
    }
    if (has_pricetype()) {
      if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pricetype_->clear();
      }
    }
    if (has_accountgroupid()) {
      if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountgroupid_->clear();
      }
    }
    if (has_grouptype()) {
      if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grouptype_->clear();
      }
    }
  }
  ZR_(ordertime_, orderqty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskRuleWarningOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.RiskRuleWarningOrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stkId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stkid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stkid().data(), this->stkid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stkid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchangeId;
        break;
      }

      // required string exchangeId = 2;
      case 2: {
        if (tag == 18) {
         parse_exchangeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bsFlag;
        break;
      }

      // required string bsFlag = 3;
      case 3: {
        if (tag == 26) {
         parse_bsFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bsflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bsflag().data(), this->bsflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bsflag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_contractNum;
        break;
      }

      // required string contractNum = 4;
      case 4: {
        if (tag == 34) {
         parse_contractNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractnum().data(), this->contractnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractnum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_acctId;
        break;
      }

      // required string acctId = 5;
      case 5: {
        if (tag == 42) {
         parse_acctId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acctid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acctid().data(), this->acctid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acctid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_priceType;
        break;
      }

      // required string priceType = 6;
      case 6: {
        if (tag == 50) {
         parse_priceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricetype().data(), this->pricetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pricetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_accountGroupId;
        break;
      }

      // required string accountGroupId = 7;
      case 7: {
        if (tag == 58) {
         parse_accountGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountgroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountgroupid().data(), this->accountgroupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountgroupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_groupType;
        break;
      }

      // required string groupType = 8;
      case 8: {
        if (tag == 66) {
         parse_groupType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grouptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grouptype().data(), this->grouptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grouptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_orderTime;
        break;
      }

      // required int64 orderTime = 9;
      case 9: {
        if (tag == 72) {
         parse_orderTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ordertime_)));
          set_has_ordertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_orderQty;
        break;
      }

      // required int32 orderQty = 10;
      case 10: {
        if (tag == 80) {
         parse_orderQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderqty_)));
          set_has_orderqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_orderPrice;
        break;
      }

      // required double orderPrice = 11;
      case 11: {
        if (tag == 89) {
         parse_orderPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderprice_)));
          set_has_orderprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_orderAmount;
        break;
      }

      // required double orderAmount = 12;
      case 12: {
        if (tag == 97) {
         parse_orderAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderamount_)));
          set_has_orderamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.RiskRuleWarningOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.RiskRuleWarningOrderInfo)
  return false;
#undef DO_
}

void RiskRuleWarningOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.RiskRuleWarningOrderInfo)
  // required string stkId = 1;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stkid(), output);
  }

  // required string exchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchangeid(), output);
  }

  // required string bsFlag = 3;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bsflag(), output);
  }

  // required string contractNum = 4;
  if (has_contractnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnum().data(), this->contractnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contractnum(), output);
  }

  // required string acctId = 5;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acctid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->acctid(), output);
  }

  // required string priceType = 6;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pricetype(), output);
  }

  // required string accountGroupId = 7;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->accountgroupid(), output);
  }

  // required string groupType = 8;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grouptype().data(), this->grouptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grouptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->grouptype(), output);
  }

  // required int64 orderTime = 9;
  if (has_ordertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->ordertime(), output);
  }

  // required int32 orderQty = 10;
  if (has_orderqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->orderqty(), output);
  }

  // required double orderPrice = 11;
  if (has_orderprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->orderprice(), output);
  }

  // required double orderAmount = 12;
  if (has_orderamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->orderamount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.RiskRuleWarningOrderInfo)
}

::google::protobuf::uint8* RiskRuleWarningOrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.RiskRuleWarningOrderInfo)
  // required string stkId = 1;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stkid(), target);
  }

  // required string exchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }

  // required string bsFlag = 3;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bsflag(), target);
  }

  // required string contractNum = 4;
  if (has_contractnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnum().data(), this->contractnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contractnum(), target);
  }

  // required string acctId = 5;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acctid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->acctid(), target);
  }

  // required string priceType = 6;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pricetype(), target);
  }

  // required string accountGroupId = 7;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->accountgroupid(), target);
  }

  // required string groupType = 8;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grouptype().data(), this->grouptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grouptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->grouptype(), target);
  }

  // required int64 orderTime = 9;
  if (has_ordertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->ordertime(), target);
  }

  // required int32 orderQty = 10;
  if (has_orderqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->orderqty(), target);
  }

  // required double orderPrice = 11;
  if (has_orderprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->orderprice(), target);
  }

  // required double orderAmount = 12;
  if (has_orderamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->orderamount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.RiskRuleWarningOrderInfo)
  return target;
}

int RiskRuleWarningOrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stkId = 1;
    if (has_stkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stkid());
    }

    // required string exchangeId = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // required string bsFlag = 3;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bsflag());
    }

    // required string contractNum = 4;
    if (has_contractnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractnum());
    }

    // required string acctId = 5;
    if (has_acctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acctid());
    }

    // required string priceType = 6;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricetype());
    }

    // required string accountGroupId = 7;
    if (has_accountgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountgroupid());
    }

    // required string groupType = 8;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grouptype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 orderTime = 9;
    if (has_ordertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ordertime());
    }

    // required int32 orderQty = 10;
    if (has_orderqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderqty());
    }

    // required double orderPrice = 11;
    if (has_orderprice()) {
      total_size += 1 + 8;
    }

    // required double orderAmount = 12;
    if (has_orderamount()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskRuleWarningOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskRuleWarningOrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskRuleWarningOrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskRuleWarningOrderInfo::MergeFrom(const RiskRuleWarningOrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stkid()) {
      set_stkid(from.stkid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_bsflag()) {
      set_bsflag(from.bsflag());
    }
    if (from.has_contractnum()) {
      set_contractnum(from.contractnum());
    }
    if (from.has_acctid()) {
      set_acctid(from.acctid());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_accountgroupid()) {
      set_accountgroupid(from.accountgroupid());
    }
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ordertime()) {
      set_ordertime(from.ordertime());
    }
    if (from.has_orderqty()) {
      set_orderqty(from.orderqty());
    }
    if (from.has_orderprice()) {
      set_orderprice(from.orderprice());
    }
    if (from.has_orderamount()) {
      set_orderamount(from.orderamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskRuleWarningOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskRuleWarningOrderInfo::CopyFrom(const RiskRuleWarningOrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskRuleWarningOrderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void RiskRuleWarningOrderInfo::Swap(RiskRuleWarningOrderInfo* other) {
  if (other != this) {
    std::swap(stkid_, other->stkid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(bsflag_, other->bsflag_);
    std::swap(contractnum_, other->contractnum_);
    std::swap(acctid_, other->acctid_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(accountgroupid_, other->accountgroupid_);
    std::swap(grouptype_, other->grouptype_);
    std::swap(ordertime_, other->ordertime_);
    std::swap(orderqty_, other->orderqty_);
    std::swap(orderprice_, other->orderprice_);
    std::swap(orderamount_, other->orderamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskRuleWarningOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskRuleWarningOrderInfo_descriptor_;
  metadata.reflection = RiskRuleWarningOrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RiskRuleWarningOpenOrder::kStkIdFieldNumber;
const int RiskRuleWarningOpenOrder::kExchangeIdFieldNumber;
const int RiskRuleWarningOpenOrder::kBsFlagFieldNumber;
const int RiskRuleWarningOpenOrder::kContractNumFieldNumber;
const int RiskRuleWarningOpenOrder::kAcctIdFieldNumber;
const int RiskRuleWarningOpenOrder::kPriceTypeFieldNumber;
const int RiskRuleWarningOpenOrder::kAccountGroupIdFieldNumber;
const int RiskRuleWarningOpenOrder::kGroupTypeFieldNumber;
const int RiskRuleWarningOpenOrder::kOrderTimeFieldNumber;
const int RiskRuleWarningOpenOrder::kOrderQtyFieldNumber;
const int RiskRuleWarningOpenOrder::kOrderPriceFieldNumber;
const int RiskRuleWarningOpenOrder::kOrderAmountFieldNumber;
const int RiskRuleWarningOpenOrder::kWithdrawQtyFieldNumber;
const int RiskRuleWarningOpenOrder::kWithdrawAmtFieldNumber;
const int RiskRuleWarningOpenOrder::kKnockQtyFieldNumber;
const int RiskRuleWarningOpenOrder::kKnockAmtFieldNumber;
const int RiskRuleWarningOpenOrder::kReckoningAmtFieldNumber;
#endif  // !_MSC_VER

RiskRuleWarningOpenOrder::RiskRuleWarningOpenOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.RiskRuleWarningOpenOrder)
}

void RiskRuleWarningOpenOrder::InitAsDefaultInstance() {
}

RiskRuleWarningOpenOrder::RiskRuleWarningOpenOrder(const RiskRuleWarningOpenOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.RiskRuleWarningOpenOrder)
}

void RiskRuleWarningOpenOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertime_ = GOOGLE_LONGLONG(0);
  orderqty_ = GOOGLE_LONGLONG(0);
  orderprice_ = 0;
  orderamount_ = 0;
  withdrawqty_ = GOOGLE_LONGLONG(0);
  withdrawamt_ = 0;
  knockqty_ = GOOGLE_LONGLONG(0);
  knockamt_ = 0;
  reckoningamt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskRuleWarningOpenOrder::~RiskRuleWarningOpenOrder() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.RiskRuleWarningOpenOrder)
  SharedDtor();
}

void RiskRuleWarningOpenOrder::SharedDtor() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnum_;
  }
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acctid_;
  }
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricetype_;
  }
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grouptype_;
  }
  if (this != default_instance_) {
  }
}

void RiskRuleWarningOpenOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskRuleWarningOpenOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskRuleWarningOpenOrder_descriptor_;
}

const RiskRuleWarningOpenOrder& RiskRuleWarningOpenOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

RiskRuleWarningOpenOrder* RiskRuleWarningOpenOrder::default_instance_ = NULL;

RiskRuleWarningOpenOrder* RiskRuleWarningOpenOrder::New() const {
  return new RiskRuleWarningOpenOrder;
}

void RiskRuleWarningOpenOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RiskRuleWarningOpenOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_stkid()) {
      if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stkid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchangeid_->clear();
      }
    }
    if (has_bsflag()) {
      if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bsflag_->clear();
      }
    }
    if (has_contractnum()) {
      if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractnum_->clear();
      }
    }
    if (has_acctid()) {
      if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acctid_->clear();
      }
    }
    if (has_pricetype()) {
      if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pricetype_->clear();
      }
    }
    if (has_accountgroupid()) {
      if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountgroupid_->clear();
      }
    }
    if (has_grouptype()) {
      if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grouptype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ordertime_, knockamt_);
  }
  reckoningamt_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskRuleWarningOpenOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.RiskRuleWarningOpenOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stkId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stkid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stkid().data(), this->stkid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stkid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchangeId;
        break;
      }

      // required string exchangeId = 2;
      case 2: {
        if (tag == 18) {
         parse_exchangeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bsFlag;
        break;
      }

      // required string bsFlag = 3;
      case 3: {
        if (tag == 26) {
         parse_bsFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bsflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bsflag().data(), this->bsflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bsflag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_contractNum;
        break;
      }

      // required string contractNum = 4;
      case 4: {
        if (tag == 34) {
         parse_contractNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractnum().data(), this->contractnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractnum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_acctId;
        break;
      }

      // required string acctId = 5;
      case 5: {
        if (tag == 42) {
         parse_acctId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acctid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acctid().data(), this->acctid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acctid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_priceType;
        break;
      }

      // required string priceType = 6;
      case 6: {
        if (tag == 50) {
         parse_priceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricetype().data(), this->pricetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pricetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_accountGroupId;
        break;
      }

      // required string accountGroupId = 7;
      case 7: {
        if (tag == 58) {
         parse_accountGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountgroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountgroupid().data(), this->accountgroupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountgroupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_groupType;
        break;
      }

      // required string groupType = 8;
      case 8: {
        if (tag == 66) {
         parse_groupType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grouptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grouptype().data(), this->grouptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grouptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_orderTime;
        break;
      }

      // required int64 orderTime = 9;
      case 9: {
        if (tag == 72) {
         parse_orderTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ordertime_)));
          set_has_ordertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_orderQty;
        break;
      }

      // required int64 orderQty = 10;
      case 10: {
        if (tag == 80) {
         parse_orderQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderqty_)));
          set_has_orderqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_orderPrice;
        break;
      }

      // required double orderPrice = 11;
      case 11: {
        if (tag == 89) {
         parse_orderPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderprice_)));
          set_has_orderprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_orderAmount;
        break;
      }

      // required double orderAmount = 12;
      case 12: {
        if (tag == 97) {
         parse_orderAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderamount_)));
          set_has_orderamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_withdrawQty;
        break;
      }

      // required int64 withdrawQty = 13;
      case 13: {
        if (tag == 104) {
         parse_withdrawQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &withdrawqty_)));
          set_has_withdrawqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_withdrawAmt;
        break;
      }

      // required double withdrawAmt = 14;
      case 14: {
        if (tag == 113) {
         parse_withdrawAmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawamt_)));
          set_has_withdrawamt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_knockQty;
        break;
      }

      // required int64 knockQty = 15;
      case 15: {
        if (tag == 120) {
         parse_knockQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &knockqty_)));
          set_has_knockqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_knockAmt;
        break;
      }

      // required double knockAmt = 16;
      case 16: {
        if (tag == 129) {
         parse_knockAmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &knockamt_)));
          set_has_knockamt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_reckoningAmt;
        break;
      }

      // required double reckoningAmt = 17;
      case 17: {
        if (tag == 137) {
         parse_reckoningAmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reckoningamt_)));
          set_has_reckoningamt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.RiskRuleWarningOpenOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.RiskRuleWarningOpenOrder)
  return false;
#undef DO_
}

void RiskRuleWarningOpenOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.RiskRuleWarningOpenOrder)
  // required string stkId = 1;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stkid(), output);
  }

  // required string exchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchangeid(), output);
  }

  // required string bsFlag = 3;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bsflag(), output);
  }

  // required string contractNum = 4;
  if (has_contractnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnum().data(), this->contractnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contractnum(), output);
  }

  // required string acctId = 5;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acctid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->acctid(), output);
  }

  // required string priceType = 6;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pricetype(), output);
  }

  // required string accountGroupId = 7;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->accountgroupid(), output);
  }

  // required string groupType = 8;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grouptype().data(), this->grouptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grouptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->grouptype(), output);
  }

  // required int64 orderTime = 9;
  if (has_ordertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->ordertime(), output);
  }

  // required int64 orderQty = 10;
  if (has_orderqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->orderqty(), output);
  }

  // required double orderPrice = 11;
  if (has_orderprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->orderprice(), output);
  }

  // required double orderAmount = 12;
  if (has_orderamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->orderamount(), output);
  }

  // required int64 withdrawQty = 13;
  if (has_withdrawqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->withdrawqty(), output);
  }

  // required double withdrawAmt = 14;
  if (has_withdrawamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->withdrawamt(), output);
  }

  // required int64 knockQty = 15;
  if (has_knockqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->knockqty(), output);
  }

  // required double knockAmt = 16;
  if (has_knockamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->knockamt(), output);
  }

  // required double reckoningAmt = 17;
  if (has_reckoningamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->reckoningamt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.RiskRuleWarningOpenOrder)
}

::google::protobuf::uint8* RiskRuleWarningOpenOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.RiskRuleWarningOpenOrder)
  // required string stkId = 1;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stkid(), target);
  }

  // required string exchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }

  // required string bsFlag = 3;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bsflag(), target);
  }

  // required string contractNum = 4;
  if (has_contractnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnum().data(), this->contractnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contractnum(), target);
  }

  // required string acctId = 5;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acctid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->acctid(), target);
  }

  // required string priceType = 6;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pricetype(), target);
  }

  // required string accountGroupId = 7;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->accountgroupid(), target);
  }

  // required string groupType = 8;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grouptype().data(), this->grouptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grouptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->grouptype(), target);
  }

  // required int64 orderTime = 9;
  if (has_ordertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->ordertime(), target);
  }

  // required int64 orderQty = 10;
  if (has_orderqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->orderqty(), target);
  }

  // required double orderPrice = 11;
  if (has_orderprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->orderprice(), target);
  }

  // required double orderAmount = 12;
  if (has_orderamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->orderamount(), target);
  }

  // required int64 withdrawQty = 13;
  if (has_withdrawqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->withdrawqty(), target);
  }

  // required double withdrawAmt = 14;
  if (has_withdrawamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->withdrawamt(), target);
  }

  // required int64 knockQty = 15;
  if (has_knockqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->knockqty(), target);
  }

  // required double knockAmt = 16;
  if (has_knockamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->knockamt(), target);
  }

  // required double reckoningAmt = 17;
  if (has_reckoningamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->reckoningamt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.RiskRuleWarningOpenOrder)
  return target;
}

int RiskRuleWarningOpenOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stkId = 1;
    if (has_stkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stkid());
    }

    // required string exchangeId = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // required string bsFlag = 3;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bsflag());
    }

    // required string contractNum = 4;
    if (has_contractnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractnum());
    }

    // required string acctId = 5;
    if (has_acctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acctid());
    }

    // required string priceType = 6;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricetype());
    }

    // required string accountGroupId = 7;
    if (has_accountgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountgroupid());
    }

    // required string groupType = 8;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grouptype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 orderTime = 9;
    if (has_ordertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ordertime());
    }

    // required int64 orderQty = 10;
    if (has_orderqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderqty());
    }

    // required double orderPrice = 11;
    if (has_orderprice()) {
      total_size += 1 + 8;
    }

    // required double orderAmount = 12;
    if (has_orderamount()) {
      total_size += 1 + 8;
    }

    // required int64 withdrawQty = 13;
    if (has_withdrawqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->withdrawqty());
    }

    // required double withdrawAmt = 14;
    if (has_withdrawamt()) {
      total_size += 1 + 8;
    }

    // required int64 knockQty = 15;
    if (has_knockqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->knockqty());
    }

    // required double knockAmt = 16;
    if (has_knockamt()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double reckoningAmt = 17;
    if (has_reckoningamt()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskRuleWarningOpenOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskRuleWarningOpenOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskRuleWarningOpenOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskRuleWarningOpenOrder::MergeFrom(const RiskRuleWarningOpenOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stkid()) {
      set_stkid(from.stkid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_bsflag()) {
      set_bsflag(from.bsflag());
    }
    if (from.has_contractnum()) {
      set_contractnum(from.contractnum());
    }
    if (from.has_acctid()) {
      set_acctid(from.acctid());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_accountgroupid()) {
      set_accountgroupid(from.accountgroupid());
    }
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ordertime()) {
      set_ordertime(from.ordertime());
    }
    if (from.has_orderqty()) {
      set_orderqty(from.orderqty());
    }
    if (from.has_orderprice()) {
      set_orderprice(from.orderprice());
    }
    if (from.has_orderamount()) {
      set_orderamount(from.orderamount());
    }
    if (from.has_withdrawqty()) {
      set_withdrawqty(from.withdrawqty());
    }
    if (from.has_withdrawamt()) {
      set_withdrawamt(from.withdrawamt());
    }
    if (from.has_knockqty()) {
      set_knockqty(from.knockqty());
    }
    if (from.has_knockamt()) {
      set_knockamt(from.knockamt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_reckoningamt()) {
      set_reckoningamt(from.reckoningamt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskRuleWarningOpenOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskRuleWarningOpenOrder::CopyFrom(const RiskRuleWarningOpenOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskRuleWarningOpenOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void RiskRuleWarningOpenOrder::Swap(RiskRuleWarningOpenOrder* other) {
  if (other != this) {
    std::swap(stkid_, other->stkid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(bsflag_, other->bsflag_);
    std::swap(contractnum_, other->contractnum_);
    std::swap(acctid_, other->acctid_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(accountgroupid_, other->accountgroupid_);
    std::swap(grouptype_, other->grouptype_);
    std::swap(ordertime_, other->ordertime_);
    std::swap(orderqty_, other->orderqty_);
    std::swap(orderprice_, other->orderprice_);
    std::swap(orderamount_, other->orderamount_);
    std::swap(withdrawqty_, other->withdrawqty_);
    std::swap(withdrawamt_, other->withdrawamt_);
    std::swap(knockqty_, other->knockqty_);
    std::swap(knockamt_, other->knockamt_);
    std::swap(reckoningamt_, other->reckoningamt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskRuleWarningOpenOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskRuleWarningOpenOrder_descriptor_;
  metadata.reflection = RiskRuleWarningOpenOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RiskRuleWarningQuotaModel::kStkIdFieldNumber;
const int RiskRuleWarningQuotaModel::kExchangeIdFieldNumber;
const int RiskRuleWarningQuotaModel::kFLastFieldNumber;
const int RiskRuleWarningQuotaModel::kFAskPriceFieldNumber;
const int RiskRuleWarningQuotaModel::kIAskVolFieldNumber;
const int RiskRuleWarningQuotaModel::kFBidPriceFieldNumber;
const int RiskRuleWarningQuotaModel::kIBidVolFieldNumber;
const int RiskRuleWarningQuotaModel::kITotalAskQtyFieldNumber;
const int RiskRuleWarningQuotaModel::kITotalBidQtyFieldNumber;
const int RiskRuleWarningQuotaModel::kFHighLimitedFieldNumber;
const int RiskRuleWarningQuotaModel::kFLowLimitedFieldNumber;
const int RiskRuleWarningQuotaModel::kLVolumeFieldNumber;
const int RiskRuleWarningQuotaModel::kQuotaTimeFieldNumber;
#endif  // !_MSC_VER

RiskRuleWarningQuotaModel::RiskRuleWarningQuotaModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.RiskRuleWarningQuotaModel)
}

void RiskRuleWarningQuotaModel::InitAsDefaultInstance() {
}

RiskRuleWarningQuotaModel::RiskRuleWarningQuotaModel(const RiskRuleWarningQuotaModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.RiskRuleWarningQuotaModel)
}

void RiskRuleWarningQuotaModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flast_ = 0;
  itotalaskqty_ = GOOGLE_LONGLONG(0);
  itotalbidqty_ = GOOGLE_LONGLONG(0);
  fhighlimited_ = 0;
  flowlimited_ = 0;
  lvolume_ = GOOGLE_LONGLONG(0);
  quotatime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskRuleWarningQuotaModel::~RiskRuleWarningQuotaModel() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.RiskRuleWarningQuotaModel)
  SharedDtor();
}

void RiskRuleWarningQuotaModel::SharedDtor() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (this != default_instance_) {
  }
}

void RiskRuleWarningQuotaModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskRuleWarningQuotaModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskRuleWarningQuotaModel_descriptor_;
}

const RiskRuleWarningQuotaModel& RiskRuleWarningQuotaModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

RiskRuleWarningQuotaModel* RiskRuleWarningQuotaModel::default_instance_ = NULL;

RiskRuleWarningQuotaModel* RiskRuleWarningQuotaModel::New() const {
  return new RiskRuleWarningQuotaModel;
}

void RiskRuleWarningQuotaModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RiskRuleWarningQuotaModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 135) {
    if (has_stkid()) {
      if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stkid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchangeid_->clear();
      }
    }
    flast_ = 0;
    itotalaskqty_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(itotalbidqty_, quotatime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  faskprice_.Clear();
  iaskvol_.Clear();
  fbidprice_.Clear();
  ibidvol_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskRuleWarningQuotaModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.RiskRuleWarningQuotaModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stkId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stkid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stkid().data(), this->stkid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stkid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchangeId;
        break;
      }

      // required string exchangeId = 2;
      case 2: {
        if (tag == 18) {
         parse_exchangeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_fLast;
        break;
      }

      // required double fLast = 3;
      case 3: {
        if (tag == 25) {
         parse_fLast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flast_)));
          set_has_flast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fAskPrice;
        break;
      }

      // repeated double fAskPrice = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_fAskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_faskprice())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_faskprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_iAskVol;
        break;
      }

      // repeated int32 iAskVol = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_iAskVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iaskvol())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_iaskvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fBidPrice;
        break;
      }

      // repeated double fBidPrice = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_fBidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_fbidprice())));
        } else if (tag == 49) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_fbidprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_iBidVol;
        break;
      }

      // repeated int32 iBidVol = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_iBidVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ibidvol())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_ibidvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iTotalAskQty;
        break;
      }

      // optional int64 iTotalAskQty = 8;
      case 8: {
        if (tag == 64) {
         parse_iTotalAskQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itotalaskqty_)));
          set_has_itotalaskqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_iTotalBidQty;
        break;
      }

      // optional int64 iTotalBidQty = 9;
      case 9: {
        if (tag == 72) {
         parse_iTotalBidQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itotalbidqty_)));
          set_has_itotalbidqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_fHighLimited;
        break;
      }

      // optional double fHighLimited = 10;
      case 10: {
        if (tag == 81) {
         parse_fHighLimited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fhighlimited_)));
          set_has_fhighlimited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_fLowLimited;
        break;
      }

      // optional double fLowLimited = 11;
      case 11: {
        if (tag == 89) {
         parse_fLowLimited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flowlimited_)));
          set_has_flowlimited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lVolume;
        break;
      }

      // optional int64 lVolume = 12;
      case 12: {
        if (tag == 96) {
         parse_lVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lvolume_)));
          set_has_lvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_quotaTime;
        break;
      }

      // required int64 quotaTime = 13;
      case 13: {
        if (tag == 104) {
         parse_quotaTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quotatime_)));
          set_has_quotatime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.RiskRuleWarningQuotaModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.RiskRuleWarningQuotaModel)
  return false;
#undef DO_
}

void RiskRuleWarningQuotaModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.RiskRuleWarningQuotaModel)
  // required string stkId = 1;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stkid(), output);
  }

  // required string exchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchangeid(), output);
  }

  // required double fLast = 3;
  if (has_flast()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->flast(), output);
  }

  // repeated double fAskPrice = 4 [packed = true];
  if (this->faskprice_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_faskprice_cached_byte_size_);
  }
  for (int i = 0; i < this->faskprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->faskprice(i), output);
  }

  // repeated int32 iAskVol = 5 [packed = true];
  if (this->iaskvol_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_iaskvol_cached_byte_size_);
  }
  for (int i = 0; i < this->iaskvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->iaskvol(i), output);
  }

  // repeated double fBidPrice = 6 [packed = true];
  if (this->fbidprice_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fbidprice_cached_byte_size_);
  }
  for (int i = 0; i < this->fbidprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->fbidprice(i), output);
  }

  // repeated int32 iBidVol = 7 [packed = true];
  if (this->ibidvol_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ibidvol_cached_byte_size_);
  }
  for (int i = 0; i < this->ibidvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ibidvol(i), output);
  }

  // optional int64 iTotalAskQty = 8;
  if (has_itotalaskqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->itotalaskqty(), output);
  }

  // optional int64 iTotalBidQty = 9;
  if (has_itotalbidqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->itotalbidqty(), output);
  }

  // optional double fHighLimited = 10;
  if (has_fhighlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->fhighlimited(), output);
  }

  // optional double fLowLimited = 11;
  if (has_flowlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->flowlimited(), output);
  }

  // optional int64 lVolume = 12;
  if (has_lvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->lvolume(), output);
  }

  // required int64 quotaTime = 13;
  if (has_quotatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->quotatime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.RiskRuleWarningQuotaModel)
}

::google::protobuf::uint8* RiskRuleWarningQuotaModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.RiskRuleWarningQuotaModel)
  // required string stkId = 1;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stkid(), target);
  }

  // required string exchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }

  // required double fLast = 3;
  if (has_flast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->flast(), target);
  }

  // repeated double fAskPrice = 4 [packed = true];
  if (this->faskprice_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _faskprice_cached_byte_size_, target);
  }
  for (int i = 0; i < this->faskprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->faskprice(i), target);
  }

  // repeated int32 iAskVol = 5 [packed = true];
  if (this->iaskvol_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _iaskvol_cached_byte_size_, target);
  }
  for (int i = 0; i < this->iaskvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->iaskvol(i), target);
  }

  // repeated double fBidPrice = 6 [packed = true];
  if (this->fbidprice_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fbidprice_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fbidprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->fbidprice(i), target);
  }

  // repeated int32 iBidVol = 7 [packed = true];
  if (this->ibidvol_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ibidvol_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ibidvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ibidvol(i), target);
  }

  // optional int64 iTotalAskQty = 8;
  if (has_itotalaskqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->itotalaskqty(), target);
  }

  // optional int64 iTotalBidQty = 9;
  if (has_itotalbidqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->itotalbidqty(), target);
  }

  // optional double fHighLimited = 10;
  if (has_fhighlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->fhighlimited(), target);
  }

  // optional double fLowLimited = 11;
  if (has_flowlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->flowlimited(), target);
  }

  // optional int64 lVolume = 12;
  if (has_lvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->lvolume(), target);
  }

  // required int64 quotaTime = 13;
  if (has_quotatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->quotatime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.RiskRuleWarningQuotaModel)
  return target;
}

int RiskRuleWarningQuotaModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stkId = 1;
    if (has_stkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stkid());
    }

    // required string exchangeId = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // required double fLast = 3;
    if (has_flast()) {
      total_size += 1 + 8;
    }

    // optional int64 iTotalAskQty = 8;
    if (has_itotalaskqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itotalaskqty());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 iTotalBidQty = 9;
    if (has_itotalbidqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itotalbidqty());
    }

    // optional double fHighLimited = 10;
    if (has_fhighlimited()) {
      total_size += 1 + 8;
    }

    // optional double fLowLimited = 11;
    if (has_flowlimited()) {
      total_size += 1 + 8;
    }

    // optional int64 lVolume = 12;
    if (has_lvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lvolume());
    }

    // required int64 quotaTime = 13;
    if (has_quotatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quotatime());
    }

  }
  // repeated double fAskPrice = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->faskprice_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _faskprice_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 iAskVol = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->iaskvol_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iaskvol(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _iaskvol_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double fBidPrice = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->fbidprice_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fbidprice_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 iBidVol = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->ibidvol_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ibidvol(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ibidvol_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskRuleWarningQuotaModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskRuleWarningQuotaModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskRuleWarningQuotaModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskRuleWarningQuotaModel::MergeFrom(const RiskRuleWarningQuotaModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  faskprice_.MergeFrom(from.faskprice_);
  iaskvol_.MergeFrom(from.iaskvol_);
  fbidprice_.MergeFrom(from.fbidprice_);
  ibidvol_.MergeFrom(from.ibidvol_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stkid()) {
      set_stkid(from.stkid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_flast()) {
      set_flast(from.flast());
    }
    if (from.has_itotalaskqty()) {
      set_itotalaskqty(from.itotalaskqty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_itotalbidqty()) {
      set_itotalbidqty(from.itotalbidqty());
    }
    if (from.has_fhighlimited()) {
      set_fhighlimited(from.fhighlimited());
    }
    if (from.has_flowlimited()) {
      set_flowlimited(from.flowlimited());
    }
    if (from.has_lvolume()) {
      set_lvolume(from.lvolume());
    }
    if (from.has_quotatime()) {
      set_quotatime(from.quotatime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskRuleWarningQuotaModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskRuleWarningQuotaModel::CopyFrom(const RiskRuleWarningQuotaModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskRuleWarningQuotaModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001007) != 0x00001007) return false;

  return true;
}

void RiskRuleWarningQuotaModel::Swap(RiskRuleWarningQuotaModel* other) {
  if (other != this) {
    std::swap(stkid_, other->stkid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(flast_, other->flast_);
    faskprice_.Swap(&other->faskprice_);
    iaskvol_.Swap(&other->iaskvol_);
    fbidprice_.Swap(&other->fbidprice_);
    ibidvol_.Swap(&other->ibidvol_);
    std::swap(itotalaskqty_, other->itotalaskqty_);
    std::swap(itotalbidqty_, other->itotalbidqty_);
    std::swap(fhighlimited_, other->fhighlimited_);
    std::swap(flowlimited_, other->flowlimited_);
    std::swap(lvolume_, other->lvolume_);
    std::swap(quotatime_, other->quotatime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskRuleWarningQuotaModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskRuleWarningQuotaModel_descriptor_;
  metadata.reflection = RiskRuleWarningQuotaModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RiskRuleWarningTradingResult::kStkIdFieldNumber;
const int RiskRuleWarningTradingResult::kExchangeIdFieldNumber;
const int RiskRuleWarningTradingResult::kBsFlagFieldNumber;
const int RiskRuleWarningTradingResult::kContractNumFieldNumber;
const int RiskRuleWarningTradingResult::kAcctIdFieldNumber;
const int RiskRuleWarningTradingResult::kPriceTypeFieldNumber;
const int RiskRuleWarningTradingResult::kAccountGroupIdFieldNumber;
const int RiskRuleWarningTradingResult::kGroupTypeFieldNumber;
const int RiskRuleWarningTradingResult::kKnockCodeFieldNumber;
const int RiskRuleWarningTradingResult::kOrderQtyFieldNumber;
const int RiskRuleWarningTradingResult::kOrderPriceFieldNumber;
const int RiskRuleWarningTradingResult::kOrderAmountFieldNumber;
const int RiskRuleWarningTradingResult::kKnockQtyFieldNumber;
const int RiskRuleWarningTradingResult::kKnockAmtFieldNumber;
const int RiskRuleWarningTradingResult::kReckoningAmtFieldNumber;
const int RiskRuleWarningTradingResult::kKnockPriceFieldNumber;
#endif  // !_MSC_VER

RiskRuleWarningTradingResult::RiskRuleWarningTradingResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Protobuf.RiskRuleWarningTradingResult)
}

void RiskRuleWarningTradingResult::InitAsDefaultInstance() {
}

RiskRuleWarningTradingResult::RiskRuleWarningTradingResult(const RiskRuleWarningTradingResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Protobuf.RiskRuleWarningTradingResult)
}

void RiskRuleWarningTradingResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  knockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderqty_ = GOOGLE_LONGLONG(0);
  orderprice_ = 0;
  orderamount_ = 0;
  knockqty_ = GOOGLE_LONGLONG(0);
  knockamt_ = 0;
  reckoningamt_ = 0;
  knockprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskRuleWarningTradingResult::~RiskRuleWarningTradingResult() {
  // @@protoc_insertion_point(destructor:Protocol.Protobuf.RiskRuleWarningTradingResult)
  SharedDtor();
}

void RiskRuleWarningTradingResult::SharedDtor() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnum_;
  }
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acctid_;
  }
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricetype_;
  }
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grouptype_;
  }
  if (knockcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete knockcode_;
  }
  if (this != default_instance_) {
  }
}

void RiskRuleWarningTradingResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskRuleWarningTradingResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskRuleWarningTradingResult_descriptor_;
}

const RiskRuleWarningTradingResult& RiskRuleWarningTradingResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  return *default_instance_;
}

RiskRuleWarningTradingResult* RiskRuleWarningTradingResult::default_instance_ = NULL;

RiskRuleWarningTradingResult* RiskRuleWarningTradingResult::New() const {
  return new RiskRuleWarningTradingResult;
}

void RiskRuleWarningTradingResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RiskRuleWarningTradingResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_stkid()) {
      if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stkid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchangeid_->clear();
      }
    }
    if (has_bsflag()) {
      if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bsflag_->clear();
      }
    }
    if (has_contractnum()) {
      if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractnum_->clear();
      }
    }
    if (has_acctid()) {
      if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acctid_->clear();
      }
    }
    if (has_pricetype()) {
      if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pricetype_->clear();
      }
    }
    if (has_accountgroupid()) {
      if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountgroupid_->clear();
      }
    }
    if (has_grouptype()) {
      if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grouptype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(orderqty_, knockprice_);
    if (has_knockcode()) {
      if (knockcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        knockcode_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskRuleWarningTradingResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Protobuf.RiskRuleWarningTradingResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stkId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stkid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stkid().data(), this->stkid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stkid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchangeId;
        break;
      }

      // required string exchangeId = 2;
      case 2: {
        if (tag == 18) {
         parse_exchangeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bsFlag;
        break;
      }

      // required string bsFlag = 3;
      case 3: {
        if (tag == 26) {
         parse_bsFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bsflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bsflag().data(), this->bsflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bsflag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_contractNum;
        break;
      }

      // required string contractNum = 4;
      case 4: {
        if (tag == 34) {
         parse_contractNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractnum().data(), this->contractnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractnum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_acctId;
        break;
      }

      // required string acctId = 5;
      case 5: {
        if (tag == 42) {
         parse_acctId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acctid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acctid().data(), this->acctid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acctid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_priceType;
        break;
      }

      // required string priceType = 6;
      case 6: {
        if (tag == 50) {
         parse_priceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricetype().data(), this->pricetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pricetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_accountGroupId;
        break;
      }

      // required string accountGroupId = 7;
      case 7: {
        if (tag == 58) {
         parse_accountGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountgroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountgroupid().data(), this->accountgroupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountgroupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_groupType;
        break;
      }

      // required string groupType = 8;
      case 8: {
        if (tag == 66) {
         parse_groupType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grouptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grouptype().data(), this->grouptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grouptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_knockCode;
        break;
      }

      // required string knockCode = 9;
      case 9: {
        if (tag == 74) {
         parse_knockCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_knockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->knockcode().data(), this->knockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "knockcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_orderQty;
        break;
      }

      // required int64 orderQty = 10;
      case 10: {
        if (tag == 80) {
         parse_orderQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderqty_)));
          set_has_orderqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_orderPrice;
        break;
      }

      // required double orderPrice = 11;
      case 11: {
        if (tag == 89) {
         parse_orderPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderprice_)));
          set_has_orderprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_orderAmount;
        break;
      }

      // required double orderAmount = 12;
      case 12: {
        if (tag == 97) {
         parse_orderAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderamount_)));
          set_has_orderamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_knockQty;
        break;
      }

      // required int64 knockQty = 13;
      case 13: {
        if (tag == 104) {
         parse_knockQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &knockqty_)));
          set_has_knockqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_knockAmt;
        break;
      }

      // required double knockAmt = 14;
      case 14: {
        if (tag == 113) {
         parse_knockAmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &knockamt_)));
          set_has_knockamt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_reckoningAmt;
        break;
      }

      // required double reckoningAmt = 15;
      case 15: {
        if (tag == 121) {
         parse_reckoningAmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reckoningamt_)));
          set_has_reckoningamt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_knockPrice;
        break;
      }

      // required double knockPrice = 16;
      case 16: {
        if (tag == 129) {
         parse_knockPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &knockprice_)));
          set_has_knockprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Protobuf.RiskRuleWarningTradingResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Protobuf.RiskRuleWarningTradingResult)
  return false;
#undef DO_
}

void RiskRuleWarningTradingResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Protobuf.RiskRuleWarningTradingResult)
  // required string stkId = 1;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stkid(), output);
  }

  // required string exchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchangeid(), output);
  }

  // required string bsFlag = 3;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bsflag(), output);
  }

  // required string contractNum = 4;
  if (has_contractnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnum().data(), this->contractnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contractnum(), output);
  }

  // required string acctId = 5;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acctid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->acctid(), output);
  }

  // required string priceType = 6;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pricetype(), output);
  }

  // required string accountGroupId = 7;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->accountgroupid(), output);
  }

  // required string groupType = 8;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grouptype().data(), this->grouptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grouptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->grouptype(), output);
  }

  // required string knockCode = 9;
  if (has_knockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->knockcode().data(), this->knockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "knockcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->knockcode(), output);
  }

  // required int64 orderQty = 10;
  if (has_orderqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->orderqty(), output);
  }

  // required double orderPrice = 11;
  if (has_orderprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->orderprice(), output);
  }

  // required double orderAmount = 12;
  if (has_orderamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->orderamount(), output);
  }

  // required int64 knockQty = 13;
  if (has_knockqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->knockqty(), output);
  }

  // required double knockAmt = 14;
  if (has_knockamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->knockamt(), output);
  }

  // required double reckoningAmt = 15;
  if (has_reckoningamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->reckoningamt(), output);
  }

  // required double knockPrice = 16;
  if (has_knockprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->knockprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Protobuf.RiskRuleWarningTradingResult)
}

::google::protobuf::uint8* RiskRuleWarningTradingResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Protobuf.RiskRuleWarningTradingResult)
  // required string stkId = 1;
  if (has_stkid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stkid().data(), this->stkid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stkid(), target);
  }

  // required string exchangeId = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }

  // required string bsFlag = 3;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bsflag().data(), this->bsflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bsflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bsflag(), target);
  }

  // required string contractNum = 4;
  if (has_contractnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnum().data(), this->contractnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contractnum(), target);
  }

  // required string acctId = 5;
  if (has_acctid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acctid().data(), this->acctid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acctid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->acctid(), target);
  }

  // required string priceType = 6;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricetype().data(), this->pricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pricetype(), target);
  }

  // required string accountGroupId = 7;
  if (has_accountgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountgroupid().data(), this->accountgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->accountgroupid(), target);
  }

  // required string groupType = 8;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grouptype().data(), this->grouptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grouptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->grouptype(), target);
  }

  // required string knockCode = 9;
  if (has_knockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->knockcode().data(), this->knockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "knockcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->knockcode(), target);
  }

  // required int64 orderQty = 10;
  if (has_orderqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->orderqty(), target);
  }

  // required double orderPrice = 11;
  if (has_orderprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->orderprice(), target);
  }

  // required double orderAmount = 12;
  if (has_orderamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->orderamount(), target);
  }

  // required int64 knockQty = 13;
  if (has_knockqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->knockqty(), target);
  }

  // required double knockAmt = 14;
  if (has_knockamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->knockamt(), target);
  }

  // required double reckoningAmt = 15;
  if (has_reckoningamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->reckoningamt(), target);
  }

  // required double knockPrice = 16;
  if (has_knockprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->knockprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Protobuf.RiskRuleWarningTradingResult)
  return target;
}

int RiskRuleWarningTradingResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stkId = 1;
    if (has_stkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stkid());
    }

    // required string exchangeId = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // required string bsFlag = 3;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bsflag());
    }

    // required string contractNum = 4;
    if (has_contractnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractnum());
    }

    // required string acctId = 5;
    if (has_acctid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acctid());
    }

    // required string priceType = 6;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricetype());
    }

    // required string accountGroupId = 7;
    if (has_accountgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountgroupid());
    }

    // required string groupType = 8;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grouptype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string knockCode = 9;
    if (has_knockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->knockcode());
    }

    // required int64 orderQty = 10;
    if (has_orderqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderqty());
    }

    // required double orderPrice = 11;
    if (has_orderprice()) {
      total_size += 1 + 8;
    }

    // required double orderAmount = 12;
    if (has_orderamount()) {
      total_size += 1 + 8;
    }

    // required int64 knockQty = 13;
    if (has_knockqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->knockqty());
    }

    // required double knockAmt = 14;
    if (has_knockamt()) {
      total_size += 1 + 8;
    }

    // required double reckoningAmt = 15;
    if (has_reckoningamt()) {
      total_size += 1 + 8;
    }

    // required double knockPrice = 16;
    if (has_knockprice()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskRuleWarningTradingResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskRuleWarningTradingResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskRuleWarningTradingResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskRuleWarningTradingResult::MergeFrom(const RiskRuleWarningTradingResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stkid()) {
      set_stkid(from.stkid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_bsflag()) {
      set_bsflag(from.bsflag());
    }
    if (from.has_contractnum()) {
      set_contractnum(from.contractnum());
    }
    if (from.has_acctid()) {
      set_acctid(from.acctid());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_accountgroupid()) {
      set_accountgroupid(from.accountgroupid());
    }
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_knockcode()) {
      set_knockcode(from.knockcode());
    }
    if (from.has_orderqty()) {
      set_orderqty(from.orderqty());
    }
    if (from.has_orderprice()) {
      set_orderprice(from.orderprice());
    }
    if (from.has_orderamount()) {
      set_orderamount(from.orderamount());
    }
    if (from.has_knockqty()) {
      set_knockqty(from.knockqty());
    }
    if (from.has_knockamt()) {
      set_knockamt(from.knockamt());
    }
    if (from.has_reckoningamt()) {
      set_reckoningamt(from.reckoningamt());
    }
    if (from.has_knockprice()) {
      set_knockprice(from.knockprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskRuleWarningTradingResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskRuleWarningTradingResult::CopyFrom(const RiskRuleWarningTradingResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskRuleWarningTradingResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void RiskRuleWarningTradingResult::Swap(RiskRuleWarningTradingResult* other) {
  if (other != this) {
    std::swap(stkid_, other->stkid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(bsflag_, other->bsflag_);
    std::swap(contractnum_, other->contractnum_);
    std::swap(acctid_, other->acctid_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(accountgroupid_, other->accountgroupid_);
    std::swap(grouptype_, other->grouptype_);
    std::swap(knockcode_, other->knockcode_);
    std::swap(orderqty_, other->orderqty_);
    std::swap(orderprice_, other->orderprice_);
    std::swap(orderamount_, other->orderamount_);
    std::swap(knockqty_, other->knockqty_);
    std::swap(knockamt_, other->knockamt_);
    std::swap(reckoningamt_, other->reckoningamt_);
    std::swap(knockprice_, other->knockprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskRuleWarningTradingResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskRuleWarningTradingResult_descriptor_;
  metadata.reflection = RiskRuleWarningTradingResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
