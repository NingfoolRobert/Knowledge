// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeanFeedWarningMsg.proto

#ifndef PROTOBUF_BeanFeedWarningMsg_2eproto__INCLUDED
#define PROTOBUF_BeanFeedWarningMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protocol {
namespace Protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

class RiskRuleWarning;
class RiskGroupWarning;
class FeedWarningMsgRequest;
class LogWarning;
class FeedWarningMsgArray;
class RiskRuleWarningSnapshot;
class RiskRuleWarningOrderInfo;
class RiskRuleWarningOpenOrder;
class RiskRuleWarningQuotaModel;
class RiskRuleWarningTradingResult;

// ===================================================================

class RiskRuleWarning : public ::google::protobuf::Message {
 public:
  RiskRuleWarning();
  virtual ~RiskRuleWarning();

  RiskRuleWarning(const RiskRuleWarning& from);

  inline RiskRuleWarning& operator=(const RiskRuleWarning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskRuleWarning& default_instance();

  void Swap(RiskRuleWarning* other);

  // implements Message ----------------------------------------------

  RiskRuleWarning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskRuleWarning& from);
  void MergeFrom(const RiskRuleWarning& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 serialNum = 1;
  inline bool has_serialnum() const;
  inline void clear_serialnum();
  static const int kSerialNumFieldNumber = 1;
  inline ::google::protobuf::int64 serialnum() const;
  inline void set_serialnum(::google::protobuf::int64 value);

  // required string riskid = 2;
  inline bool has_riskid() const;
  inline void clear_riskid();
  static const int kRiskidFieldNumber = 2;
  inline const ::std::string& riskid() const;
  inline void set_riskid(const ::std::string& value);
  inline void set_riskid(const char* value);
  inline void set_riskid(const char* value, size_t size);
  inline ::std::string* mutable_riskid();
  inline ::std::string* release_riskid();
  inline void set_allocated_riskid(::std::string* riskid);

  // required string accountGroupId = 3;
  inline bool has_accountgroupid() const;
  inline void clear_accountgroupid();
  static const int kAccountGroupIdFieldNumber = 3;
  inline const ::std::string& accountgroupid() const;
  inline void set_accountgroupid(const ::std::string& value);
  inline void set_accountgroupid(const char* value);
  inline void set_accountgroupid(const char* value, size_t size);
  inline ::std::string* mutable_accountgroupid();
  inline ::std::string* release_accountgroupid();
  inline void set_allocated_accountgroupid(::std::string* accountgroupid);

  // optional string stkId = 4;
  inline bool has_stkid() const;
  inline void clear_stkid();
  static const int kStkIdFieldNumber = 4;
  inline const ::std::string& stkid() const;
  inline void set_stkid(const ::std::string& value);
  inline void set_stkid(const char* value);
  inline void set_stkid(const char* value, size_t size);
  inline ::std::string* mutable_stkid();
  inline ::std::string* release_stkid();
  inline void set_allocated_stkid(::std::string* stkid);

  // optional string exchId = 5;
  inline bool has_exchid() const;
  inline void clear_exchid();
  static const int kExchIdFieldNumber = 5;
  inline const ::std::string& exchid() const;
  inline void set_exchid(const ::std::string& value);
  inline void set_exchid(const char* value);
  inline void set_exchid(const char* value, size_t size);
  inline ::std::string* mutable_exchid();
  inline ::std::string* release_exchid();
  inline void set_allocated_exchid(::std::string* exchid);

  // optional string bsFlag = 6;
  inline bool has_bsflag() const;
  inline void clear_bsflag();
  static const int kBsFlagFieldNumber = 6;
  inline const ::std::string& bsflag() const;
  inline void set_bsflag(const ::std::string& value);
  inline void set_bsflag(const char* value);
  inline void set_bsflag(const char* value, size_t size);
  inline ::std::string* mutable_bsflag();
  inline ::std::string* release_bsflag();
  inline void set_allocated_bsflag(::std::string* bsflag);

  // optional double calculateValue = 7;
  inline bool has_calculatevalue() const;
  inline void clear_calculatevalue();
  static const int kCalculateValueFieldNumber = 7;
  inline double calculatevalue() const;
  inline void set_calculatevalue(double value);

  // optional double thresholdValue = 8;
  inline bool has_thresholdvalue() const;
  inline void clear_thresholdvalue();
  static const int kThresholdValueFieldNumber = 8;
  inline double thresholdvalue() const;
  inline void set_thresholdvalue(double value);

  // optional string riskResult = 9;
  inline bool has_riskresult() const;
  inline void clear_riskresult();
  static const int kRiskResultFieldNumber = 9;
  inline const ::std::string& riskresult() const;
  inline void set_riskresult(const ::std::string& value);
  inline void set_riskresult(const char* value);
  inline void set_riskresult(const char* value, size_t size);
  inline ::std::string* mutable_riskresult();
  inline ::std::string* release_riskresult();
  inline void set_allocated_riskresult(::std::string* riskresult);

  // optional int64 durationStartTime = 10;
  inline bool has_durationstarttime() const;
  inline void clear_durationstarttime();
  static const int kDurationStartTimeFieldNumber = 10;
  inline ::google::protobuf::int64 durationstarttime() const;
  inline void set_durationstarttime(::google::protobuf::int64 value);

  // optional int64 durationEndTime = 11;
  inline bool has_durationendtime() const;
  inline void clear_durationendtime();
  static const int kDurationEndTimeFieldNumber = 11;
  inline ::google::protobuf::int64 durationendtime() const;
  inline void set_durationendtime(::google::protobuf::int64 value);

  // optional int64 triggerTime = 12;
  inline bool has_triggertime() const;
  inline void clear_triggertime();
  static const int kTriggerTimeFieldNumber = 12;
  inline ::google::protobuf::int64 triggertime() const;
  inline void set_triggertime(::google::protobuf::int64 value);

  // optional int32 counts = 13;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 13;
  inline ::google::protobuf::int32 counts() const;
  inline void set_counts(::google::protobuf::int32 value);

  // optional double Numerator = 14;
  inline bool has_numerator() const;
  inline void clear_numerator();
  static const int kNumeratorFieldNumber = 14;
  inline double numerator() const;
  inline void set_numerator(double value);

  // optional double BaseValue = 15;
  inline bool has_basevalue() const;
  inline void clear_basevalue();
  static const int kBaseValueFieldNumber = 15;
  inline double basevalue() const;
  inline void set_basevalue(double value);

  // optional int64 snapshotSerialNum = 16;
  inline bool has_snapshotserialnum() const;
  inline void clear_snapshotserialnum();
  static const int kSnapshotSerialNumFieldNumber = 16;
  inline ::google::protobuf::int64 snapshotserialnum() const;
  inline void set_snapshotserialnum(::google::protobuf::int64 value);

  // optional bool isTriggered = 17;
  inline bool has_istriggered() const;
  inline void clear_istriggered();
  static const int kIsTriggeredFieldNumber = 17;
  inline bool istriggered() const;
  inline void set_istriggered(bool value);

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.RiskRuleWarning)
 private:
  inline void set_has_serialnum();
  inline void clear_has_serialnum();
  inline void set_has_riskid();
  inline void clear_has_riskid();
  inline void set_has_accountgroupid();
  inline void clear_has_accountgroupid();
  inline void set_has_stkid();
  inline void clear_has_stkid();
  inline void set_has_exchid();
  inline void clear_has_exchid();
  inline void set_has_bsflag();
  inline void clear_has_bsflag();
  inline void set_has_calculatevalue();
  inline void clear_has_calculatevalue();
  inline void set_has_thresholdvalue();
  inline void clear_has_thresholdvalue();
  inline void set_has_riskresult();
  inline void clear_has_riskresult();
  inline void set_has_durationstarttime();
  inline void clear_has_durationstarttime();
  inline void set_has_durationendtime();
  inline void clear_has_durationendtime();
  inline void set_has_triggertime();
  inline void clear_has_triggertime();
  inline void set_has_counts();
  inline void clear_has_counts();
  inline void set_has_numerator();
  inline void clear_has_numerator();
  inline void set_has_basevalue();
  inline void clear_has_basevalue();
  inline void set_has_snapshotserialnum();
  inline void clear_has_snapshotserialnum();
  inline void set_has_istriggered();
  inline void clear_has_istriggered();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 serialnum_;
  ::std::string* riskid_;
  ::std::string* accountgroupid_;
  ::std::string* stkid_;
  ::std::string* exchid_;
  ::std::string* bsflag_;
  double calculatevalue_;
  double thresholdvalue_;
  ::std::string* riskresult_;
  ::google::protobuf::int64 durationstarttime_;
  ::google::protobuf::int64 durationendtime_;
  ::google::protobuf::int64 triggertime_;
  double numerator_;
  double basevalue_;
  ::google::protobuf::int32 counts_;
  bool istriggered_;
  ::google::protobuf::int64 snapshotserialnum_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static RiskRuleWarning* default_instance_;
};
// -------------------------------------------------------------------

class RiskGroupWarning : public ::google::protobuf::Message {
 public:
  RiskGroupWarning();
  virtual ~RiskGroupWarning();

  RiskGroupWarning(const RiskGroupWarning& from);

  inline RiskGroupWarning& operator=(const RiskGroupWarning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskGroupWarning& default_instance();

  void Swap(RiskGroupWarning* other);

  // implements Message ----------------------------------------------

  RiskGroupWarning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskGroupWarning& from);
  void MergeFrom(const RiskGroupWarning& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 serialNum = 1;
  inline bool has_serialnum() const;
  inline void clear_serialnum();
  static const int kSerialNumFieldNumber = 1;
  inline ::google::protobuf::int64 serialnum() const;
  inline void set_serialnum(::google::protobuf::int64 value);

  // required string parentRiskId = 2;
  inline bool has_parentriskid() const;
  inline void clear_parentriskid();
  static const int kParentRiskIdFieldNumber = 2;
  inline const ::std::string& parentriskid() const;
  inline void set_parentriskid(const ::std::string& value);
  inline void set_parentriskid(const char* value);
  inline void set_parentriskid(const char* value, size_t size);
  inline ::std::string* mutable_parentriskid();
  inline ::std::string* release_parentriskid();
  inline void set_allocated_parentriskid(::std::string* parentriskid);

  // required string accountGroupId = 3;
  inline bool has_accountgroupid() const;
  inline void clear_accountgroupid();
  static const int kAccountGroupIdFieldNumber = 3;
  inline const ::std::string& accountgroupid() const;
  inline void set_accountgroupid(const ::std::string& value);
  inline void set_accountgroupid(const char* value);
  inline void set_accountgroupid(const char* value, size_t size);
  inline ::std::string* mutable_accountgroupid();
  inline ::std::string* release_accountgroupid();
  inline void set_allocated_accountgroupid(::std::string* accountgroupid);

  // optional string stkId = 4;
  inline bool has_stkid() const;
  inline void clear_stkid();
  static const int kStkIdFieldNumber = 4;
  inline const ::std::string& stkid() const;
  inline void set_stkid(const ::std::string& value);
  inline void set_stkid(const char* value);
  inline void set_stkid(const char* value, size_t size);
  inline ::std::string* mutable_stkid();
  inline ::std::string* release_stkid();
  inline void set_allocated_stkid(::std::string* stkid);

  // optional string exchId = 5;
  inline bool has_exchid() const;
  inline void clear_exchid();
  static const int kExchIdFieldNumber = 5;
  inline const ::std::string& exchid() const;
  inline void set_exchid(const ::std::string& value);
  inline void set_exchid(const char* value);
  inline void set_exchid(const char* value, size_t size);
  inline ::std::string* mutable_exchid();
  inline ::std::string* release_exchid();
  inline void set_allocated_exchid(::std::string* exchid);

  // optional int64 triggerTime = 6;
  inline bool has_triggertime() const;
  inline void clear_triggertime();
  static const int kTriggerTimeFieldNumber = 6;
  inline ::google::protobuf::int64 triggertime() const;
  inline void set_triggertime(::google::protobuf::int64 value);

  // optional string riskResult = 7;
  inline bool has_riskresult() const;
  inline void clear_riskresult();
  static const int kRiskResultFieldNumber = 7;
  inline const ::std::string& riskresult() const;
  inline void set_riskresult(const ::std::string& value);
  inline void set_riskresult(const char* value);
  inline void set_riskresult(const char* value, size_t size);
  inline ::std::string* mutable_riskresult();
  inline ::std::string* release_riskresult();
  inline void set_allocated_riskresult(::std::string* riskresult);

  // optional int64 beginTime = 8;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 8;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 9;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 9;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 11;
  inline int riskrulewarninglist_size() const;
  inline void clear_riskrulewarninglist();
  static const int kRiskRuleWarningListFieldNumber = 11;
  inline const ::Protocol::Protobuf::RiskRuleWarning& riskrulewarninglist(int index) const;
  inline ::Protocol::Protobuf::RiskRuleWarning* mutable_riskrulewarninglist(int index);
  inline ::Protocol::Protobuf::RiskRuleWarning* add_riskrulewarninglist();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning >&
      riskrulewarninglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning >*
      mutable_riskrulewarninglist();

  // optional string bsFlag = 12;
  inline bool has_bsflag() const;
  inline void clear_bsflag();
  static const int kBsFlagFieldNumber = 12;
  inline const ::std::string& bsflag() const;
  inline void set_bsflag(const ::std::string& value);
  inline void set_bsflag(const char* value);
  inline void set_bsflag(const char* value, size_t size);
  inline ::std::string* mutable_bsflag();
  inline ::std::string* release_bsflag();
  inline void set_allocated_bsflag(::std::string* bsflag);

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.RiskGroupWarning)
 private:
  inline void set_has_serialnum();
  inline void clear_has_serialnum();
  inline void set_has_parentriskid();
  inline void clear_has_parentriskid();
  inline void set_has_accountgroupid();
  inline void clear_has_accountgroupid();
  inline void set_has_stkid();
  inline void clear_has_stkid();
  inline void set_has_exchid();
  inline void clear_has_exchid();
  inline void set_has_triggertime();
  inline void clear_has_triggertime();
  inline void set_has_riskresult();
  inline void clear_has_riskresult();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_bsflag();
  inline void clear_has_bsflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 serialnum_;
  ::std::string* parentriskid_;
  ::std::string* accountgroupid_;
  ::std::string* stkid_;
  ::std::string* exchid_;
  ::google::protobuf::int64 triggertime_;
  ::std::string* riskresult_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning > riskrulewarninglist_;
  ::std::string* bsflag_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static RiskGroupWarning* default_instance_;
};
// -------------------------------------------------------------------

class FeedWarningMsgRequest : public ::google::protobuf::Message {
 public:
  FeedWarningMsgRequest();
  virtual ~FeedWarningMsgRequest();

  FeedWarningMsgRequest(const FeedWarningMsgRequest& from);

  inline FeedWarningMsgRequest& operator=(const FeedWarningMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedWarningMsgRequest& default_instance();

  void Swap(FeedWarningMsgRequest* other);

  // implements Message ----------------------------------------------

  FeedWarningMsgRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedWarningMsgRequest& from);
  void MergeFrom(const FeedWarningMsgRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strCategory = 1;
  inline bool has_strcategory() const;
  inline void clear_strcategory();
  static const int kStrCategoryFieldNumber = 1;
  inline const ::std::string& strcategory() const;
  inline void set_strcategory(const ::std::string& value);
  inline void set_strcategory(const char* value);
  inline void set_strcategory(const char* value, size_t size);
  inline ::std::string* mutable_strcategory();
  inline ::std::string* release_strcategory();
  inline void set_allocated_strcategory(::std::string* strcategory);

  // optional string strSubCategory = 2;
  inline bool has_strsubcategory() const;
  inline void clear_strsubcategory();
  static const int kStrSubCategoryFieldNumber = 2;
  inline const ::std::string& strsubcategory() const;
  inline void set_strsubcategory(const ::std::string& value);
  inline void set_strsubcategory(const char* value);
  inline void set_strsubcategory(const char* value, size_t size);
  inline ::std::string* mutable_strsubcategory();
  inline ::std::string* release_strsubcategory();
  inline void set_allocated_strsubcategory(::std::string* strsubcategory);

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.FeedWarningMsgRequest)
 private:
  inline void set_has_strcategory();
  inline void clear_has_strcategory();
  inline void set_has_strsubcategory();
  inline void clear_has_strsubcategory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* strcategory_;
  ::std::string* strsubcategory_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static FeedWarningMsgRequest* default_instance_;
};
// -------------------------------------------------------------------

class LogWarning : public ::google::protobuf::Message {
 public:
  LogWarning();
  virtual ~LogWarning();

  LogWarning(const LogWarning& from);

  inline LogWarning& operator=(const LogWarning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogWarning& default_instance();

  void Swap(LogWarning* other);

  // implements Message ----------------------------------------------

  LogWarning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogWarning& from);
  void MergeFrom(const LogWarning& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 serialNum = 1;
  inline bool has_serialnum() const;
  inline void clear_serialnum();
  static const int kSerialNumFieldNumber = 1;
  inline ::google::protobuf::int64 serialnum() const;
  inline void set_serialnum(::google::protobuf::int64 value);

  // required string serviceID = 2;
  inline bool has_serviceid() const;
  inline void clear_serviceid();
  static const int kServiceIDFieldNumber = 2;
  inline const ::std::string& serviceid() const;
  inline void set_serviceid(const ::std::string& value);
  inline void set_serviceid(const char* value);
  inline void set_serviceid(const char* value, size_t size);
  inline ::std::string* mutable_serviceid();
  inline ::std::string* release_serviceid();
  inline void set_allocated_serviceid(::std::string* serviceid);

  // optional int64 triggerTime = 3;
  inline bool has_triggertime() const;
  inline void clear_triggertime();
  static const int kTriggerTimeFieldNumber = 3;
  inline ::google::protobuf::int64 triggertime() const;
  inline void set_triggertime(::google::protobuf::int64 value);

  // optional string level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline const ::std::string& level() const;
  inline void set_level(const ::std::string& value);
  inline void set_level(const char* value);
  inline void set_level(const char* value, size_t size);
  inline ::std::string* mutable_level();
  inline ::std::string* release_level();
  inline void set_allocated_level(::std::string* level);

  // optional string serviceType = 5;
  inline bool has_servicetype() const;
  inline void clear_servicetype();
  static const int kServiceTypeFieldNumber = 5;
  inline const ::std::string& servicetype() const;
  inline void set_servicetype(const ::std::string& value);
  inline void set_servicetype(const char* value);
  inline void set_servicetype(const char* value, size_t size);
  inline ::std::string* mutable_servicetype();
  inline ::std::string* release_servicetype();
  inline void set_allocated_servicetype(::std::string* servicetype);

  // optional string infoType = 6;
  inline bool has_infotype() const;
  inline void clear_infotype();
  static const int kInfoTypeFieldNumber = 6;
  inline const ::std::string& infotype() const;
  inline void set_infotype(const ::std::string& value);
  inline void set_infotype(const char* value);
  inline void set_infotype(const char* value, size_t size);
  inline ::std::string* mutable_infotype();
  inline ::std::string* release_infotype();
  inline void set_allocated_infotype(::std::string* infotype);

  // optional string clientID = 7;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 7;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  inline void set_allocated_clientid(::std::string* clientid);

  // optional string referenceNum = 8;
  inline bool has_referencenum() const;
  inline void clear_referencenum();
  static const int kReferenceNumFieldNumber = 8;
  inline const ::std::string& referencenum() const;
  inline void set_referencenum(const ::std::string& value);
  inline void set_referencenum(const char* value);
  inline void set_referencenum(const char* value, size_t size);
  inline ::std::string* mutable_referencenum();
  inline ::std::string* release_referencenum();
  inline void set_allocated_referencenum(::std::string* referencenum);

  // optional string rawLogEntry = 9;
  inline bool has_rawlogentry() const;
  inline void clear_rawlogentry();
  static const int kRawLogEntryFieldNumber = 9;
  inline const ::std::string& rawlogentry() const;
  inline void set_rawlogentry(const ::std::string& value);
  inline void set_rawlogentry(const char* value);
  inline void set_rawlogentry(const char* value, size_t size);
  inline ::std::string* mutable_rawlogentry();
  inline ::std::string* release_rawlogentry();
  inline void set_allocated_rawlogentry(::std::string* rawlogentry);

  // optional string description = 10;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 10;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.LogWarning)
 private:
  inline void set_has_serialnum();
  inline void clear_has_serialnum();
  inline void set_has_serviceid();
  inline void clear_has_serviceid();
  inline void set_has_triggertime();
  inline void clear_has_triggertime();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_servicetype();
  inline void clear_has_servicetype();
  inline void set_has_infotype();
  inline void clear_has_infotype();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_referencenum();
  inline void clear_has_referencenum();
  inline void set_has_rawlogentry();
  inline void clear_has_rawlogentry();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 serialnum_;
  ::std::string* serviceid_;
  ::google::protobuf::int64 triggertime_;
  ::std::string* level_;
  ::std::string* servicetype_;
  ::std::string* infotype_;
  ::std::string* clientid_;
  ::std::string* referencenum_;
  ::std::string* rawlogentry_;
  ::std::string* description_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static LogWarning* default_instance_;
};
// -------------------------------------------------------------------

class FeedWarningMsgArray : public ::google::protobuf::Message {
 public:
  FeedWarningMsgArray();
  virtual ~FeedWarningMsgArray();

  FeedWarningMsgArray(const FeedWarningMsgArray& from);

  inline FeedWarningMsgArray& operator=(const FeedWarningMsgArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedWarningMsgArray& default_instance();

  void Swap(FeedWarningMsgArray* other);

  // implements Message ----------------------------------------------

  FeedWarningMsgArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedWarningMsgArray& from);
  void MergeFrom(const FeedWarningMsgArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strCategory = 1;
  inline bool has_strcategory() const;
  inline void clear_strcategory();
  static const int kStrCategoryFieldNumber = 1;
  inline const ::std::string& strcategory() const;
  inline void set_strcategory(const ::std::string& value);
  inline void set_strcategory(const char* value);
  inline void set_strcategory(const char* value, size_t size);
  inline ::std::string* mutable_strcategory();
  inline ::std::string* release_strcategory();
  inline void set_allocated_strcategory(::std::string* strcategory);

  // optional string strSubCategory = 2;
  inline bool has_strsubcategory() const;
  inline void clear_strsubcategory();
  static const int kStrSubCategoryFieldNumber = 2;
  inline const ::std::string& strsubcategory() const;
  inline void set_strsubcategory(const ::std::string& value);
  inline void set_strsubcategory(const char* value);
  inline void set_strsubcategory(const char* value, size_t size);
  inline ::std::string* mutable_strsubcategory();
  inline ::std::string* release_strsubcategory();
  inline void set_allocated_strsubcategory(::std::string* strsubcategory);

  // optional int32 iSource = 3;
  inline bool has_isource() const;
  inline void clear_isource();
  static const int kISourceFieldNumber = 3;
  inline ::google::protobuf::int32 isource() const;
  inline void set_isource(::google::protobuf::int32 value);

  // optional .Protocol.Protobuf.RiskRuleWarning riskRuleWarning = 5;
  inline bool has_riskrulewarning() const;
  inline void clear_riskrulewarning();
  static const int kRiskRuleWarningFieldNumber = 5;
  inline const ::Protocol::Protobuf::RiskRuleWarning& riskrulewarning() const;
  inline ::Protocol::Protobuf::RiskRuleWarning* mutable_riskrulewarning();
  inline ::Protocol::Protobuf::RiskRuleWarning* release_riskrulewarning();
  inline void set_allocated_riskrulewarning(::Protocol::Protobuf::RiskRuleWarning* riskrulewarning);

  // repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 6;
  inline int riskrulewarninglist_size() const;
  inline void clear_riskrulewarninglist();
  static const int kRiskRuleWarningListFieldNumber = 6;
  inline const ::Protocol::Protobuf::RiskRuleWarning& riskrulewarninglist(int index) const;
  inline ::Protocol::Protobuf::RiskRuleWarning* mutable_riskrulewarninglist(int index);
  inline ::Protocol::Protobuf::RiskRuleWarning* add_riskrulewarninglist();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning >&
      riskrulewarninglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning >*
      mutable_riskrulewarninglist();

  // optional .Protocol.Protobuf.RiskGroupWarning riskGroupWarning = 7;
  inline bool has_riskgroupwarning() const;
  inline void clear_riskgroupwarning();
  static const int kRiskGroupWarningFieldNumber = 7;
  inline const ::Protocol::Protobuf::RiskGroupWarning& riskgroupwarning() const;
  inline ::Protocol::Protobuf::RiskGroupWarning* mutable_riskgroupwarning();
  inline ::Protocol::Protobuf::RiskGroupWarning* release_riskgroupwarning();
  inline void set_allocated_riskgroupwarning(::Protocol::Protobuf::RiskGroupWarning* riskgroupwarning);

  // repeated .Protocol.Protobuf.RiskGroupWarning riskGroupWarningList = 8;
  inline int riskgroupwarninglist_size() const;
  inline void clear_riskgroupwarninglist();
  static const int kRiskGroupWarningListFieldNumber = 8;
  inline const ::Protocol::Protobuf::RiskGroupWarning& riskgroupwarninglist(int index) const;
  inline ::Protocol::Protobuf::RiskGroupWarning* mutable_riskgroupwarninglist(int index);
  inline ::Protocol::Protobuf::RiskGroupWarning* add_riskgroupwarninglist();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskGroupWarning >&
      riskgroupwarninglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskGroupWarning >*
      mutable_riskgroupwarninglist();

  // optional .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshot = 9;
  inline bool has_riskrulewarningsnapshot() const;
  inline void clear_riskrulewarningsnapshot();
  static const int kRiskRuleWarningSnapshotFieldNumber = 9;
  inline const ::Protocol::Protobuf::RiskRuleWarningSnapshot& riskrulewarningsnapshot() const;
  inline ::Protocol::Protobuf::RiskRuleWarningSnapshot* mutable_riskrulewarningsnapshot();
  inline ::Protocol::Protobuf::RiskRuleWarningSnapshot* release_riskrulewarningsnapshot();
  inline void set_allocated_riskrulewarningsnapshot(::Protocol::Protobuf::RiskRuleWarningSnapshot* riskrulewarningsnapshot);

  // repeated .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshotList = 10;
  inline int riskrulewarningsnapshotlist_size() const;
  inline void clear_riskrulewarningsnapshotlist();
  static const int kRiskRuleWarningSnapshotListFieldNumber = 10;
  inline const ::Protocol::Protobuf::RiskRuleWarningSnapshot& riskrulewarningsnapshotlist(int index) const;
  inline ::Protocol::Protobuf::RiskRuleWarningSnapshot* mutable_riskrulewarningsnapshotlist(int index);
  inline ::Protocol::Protobuf::RiskRuleWarningSnapshot* add_riskrulewarningsnapshotlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningSnapshot >&
      riskrulewarningsnapshotlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningSnapshot >*
      mutable_riskrulewarningsnapshotlist();

  // optional .Protocol.Protobuf.LogWarning logWarning = 100;
  inline bool has_logwarning() const;
  inline void clear_logwarning();
  static const int kLogWarningFieldNumber = 100;
  inline const ::Protocol::Protobuf::LogWarning& logwarning() const;
  inline ::Protocol::Protobuf::LogWarning* mutable_logwarning();
  inline ::Protocol::Protobuf::LogWarning* release_logwarning();
  inline void set_allocated_logwarning(::Protocol::Protobuf::LogWarning* logwarning);

  // repeated .Protocol.Protobuf.LogWarning logWarningList = 101;
  inline int logwarninglist_size() const;
  inline void clear_logwarninglist();
  static const int kLogWarningListFieldNumber = 101;
  inline const ::Protocol::Protobuf::LogWarning& logwarninglist(int index) const;
  inline ::Protocol::Protobuf::LogWarning* mutable_logwarninglist(int index);
  inline ::Protocol::Protobuf::LogWarning* add_logwarninglist();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::LogWarning >&
      logwarninglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::LogWarning >*
      mutable_logwarninglist();

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.FeedWarningMsgArray)
 private:
  inline void set_has_strcategory();
  inline void clear_has_strcategory();
  inline void set_has_strsubcategory();
  inline void clear_has_strsubcategory();
  inline void set_has_isource();
  inline void clear_has_isource();
  inline void set_has_riskrulewarning();
  inline void clear_has_riskrulewarning();
  inline void set_has_riskgroupwarning();
  inline void clear_has_riskgroupwarning();
  inline void set_has_riskrulewarningsnapshot();
  inline void clear_has_riskrulewarningsnapshot();
  inline void set_has_logwarning();
  inline void clear_has_logwarning();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* strcategory_;
  ::std::string* strsubcategory_;
  ::Protocol::Protobuf::RiskRuleWarning* riskrulewarning_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning > riskrulewarninglist_;
  ::Protocol::Protobuf::RiskGroupWarning* riskgroupwarning_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskGroupWarning > riskgroupwarninglist_;
  ::Protocol::Protobuf::RiskRuleWarningSnapshot* riskrulewarningsnapshot_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningSnapshot > riskrulewarningsnapshotlist_;
  ::Protocol::Protobuf::LogWarning* logwarning_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::LogWarning > logwarninglist_;
  ::google::protobuf::int32 isource_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static FeedWarningMsgArray* default_instance_;
};
// -------------------------------------------------------------------

class RiskRuleWarningSnapshot : public ::google::protobuf::Message {
 public:
  RiskRuleWarningSnapshot();
  virtual ~RiskRuleWarningSnapshot();

  RiskRuleWarningSnapshot(const RiskRuleWarningSnapshot& from);

  inline RiskRuleWarningSnapshot& operator=(const RiskRuleWarningSnapshot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskRuleWarningSnapshot& default_instance();

  void Swap(RiskRuleWarningSnapshot* other);

  // implements Message ----------------------------------------------

  RiskRuleWarningSnapshot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskRuleWarningSnapshot& from);
  void MergeFrom(const RiskRuleWarningSnapshot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 snapshotSerialNum = 1;
  inline bool has_snapshotserialnum() const;
  inline void clear_snapshotserialnum();
  static const int kSnapshotSerialNumFieldNumber = 1;
  inline ::google::protobuf::int64 snapshotserialnum() const;
  inline void set_snapshotserialnum(::google::protobuf::int64 value);

  // required string riskid = 2;
  inline bool has_riskid() const;
  inline void clear_riskid();
  static const int kRiskidFieldNumber = 2;
  inline const ::std::string& riskid() const;
  inline void set_riskid(const ::std::string& value);
  inline void set_riskid(const char* value);
  inline void set_riskid(const char* value, size_t size);
  inline ::std::string* mutable_riskid();
  inline ::std::string* release_riskid();
  inline void set_allocated_riskid(::std::string* riskid);

  // required string accountGroupId = 3;
  inline bool has_accountgroupid() const;
  inline void clear_accountgroupid();
  static const int kAccountGroupIdFieldNumber = 3;
  inline const ::std::string& accountgroupid() const;
  inline void set_accountgroupid(const ::std::string& value);
  inline void set_accountgroupid(const char* value);
  inline void set_accountgroupid(const char* value, size_t size);
  inline ::std::string* mutable_accountgroupid();
  inline ::std::string* release_accountgroupid();
  inline void set_allocated_accountgroupid(::std::string* accountgroupid);

  // required string stkId = 4;
  inline bool has_stkid() const;
  inline void clear_stkid();
  static const int kStkIdFieldNumber = 4;
  inline const ::std::string& stkid() const;
  inline void set_stkid(const ::std::string& value);
  inline void set_stkid(const char* value);
  inline void set_stkid(const char* value, size_t size);
  inline ::std::string* mutable_stkid();
  inline ::std::string* release_stkid();
  inline void set_allocated_stkid(::std::string* stkid);

  // required string exchId = 5;
  inline bool has_exchid() const;
  inline void clear_exchid();
  static const int kExchIdFieldNumber = 5;
  inline const ::std::string& exchid() const;
  inline void set_exchid(const ::std::string& value);
  inline void set_exchid(const char* value);
  inline void set_exchid(const char* value, size_t size);
  inline ::std::string* mutable_exchid();
  inline ::std::string* release_exchid();
  inline void set_allocated_exchid(::std::string* exchid);

  // required string bsFlag = 6;
  inline bool has_bsflag() const;
  inline void clear_bsflag();
  static const int kBsFlagFieldNumber = 6;
  inline const ::std::string& bsflag() const;
  inline void set_bsflag(const ::std::string& value);
  inline void set_bsflag(const char* value);
  inline void set_bsflag(const char* value, size_t size);
  inline ::std::string* mutable_bsflag();
  inline ::std::string* release_bsflag();
  inline void set_allocated_bsflag(::std::string* bsflag);

  // optional .Protocol.Protobuf.RiskRuleWarningOrderInfo riskRuleWarningOrderInfo = 7;
  inline bool has_riskrulewarningorderinfo() const;
  inline void clear_riskrulewarningorderinfo();
  static const int kRiskRuleWarningOrderInfoFieldNumber = 7;
  inline const ::Protocol::Protobuf::RiskRuleWarningOrderInfo& riskrulewarningorderinfo() const;
  inline ::Protocol::Protobuf::RiskRuleWarningOrderInfo* mutable_riskrulewarningorderinfo();
  inline ::Protocol::Protobuf::RiskRuleWarningOrderInfo* release_riskrulewarningorderinfo();
  inline void set_allocated_riskrulewarningorderinfo(::Protocol::Protobuf::RiskRuleWarningOrderInfo* riskrulewarningorderinfo);

  // repeated .Protocol.Protobuf.RiskRuleWarningOpenOrder riskRuleWarningOpenOrder = 8;
  inline int riskrulewarningopenorder_size() const;
  inline void clear_riskrulewarningopenorder();
  static const int kRiskRuleWarningOpenOrderFieldNumber = 8;
  inline const ::Protocol::Protobuf::RiskRuleWarningOpenOrder& riskrulewarningopenorder(int index) const;
  inline ::Protocol::Protobuf::RiskRuleWarningOpenOrder* mutable_riskrulewarningopenorder(int index);
  inline ::Protocol::Protobuf::RiskRuleWarningOpenOrder* add_riskrulewarningopenorder();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningOpenOrder >&
      riskrulewarningopenorder() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningOpenOrder >*
      mutable_riskrulewarningopenorder();

  // repeated .Protocol.Protobuf.RiskRuleWarningQuotaModel riskRuleWarningQuotaModel = 9;
  inline int riskrulewarningquotamodel_size() const;
  inline void clear_riskrulewarningquotamodel();
  static const int kRiskRuleWarningQuotaModelFieldNumber = 9;
  inline const ::Protocol::Protobuf::RiskRuleWarningQuotaModel& riskrulewarningquotamodel(int index) const;
  inline ::Protocol::Protobuf::RiskRuleWarningQuotaModel* mutable_riskrulewarningquotamodel(int index);
  inline ::Protocol::Protobuf::RiskRuleWarningQuotaModel* add_riskrulewarningquotamodel();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningQuotaModel >&
      riskrulewarningquotamodel() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningQuotaModel >*
      mutable_riskrulewarningquotamodel();

  // repeated .Protocol.Protobuf.RiskRuleWarningTradingResult riskRuleWarningTradingResult = 10;
  inline int riskrulewarningtradingresult_size() const;
  inline void clear_riskrulewarningtradingresult();
  static const int kRiskRuleWarningTradingResultFieldNumber = 10;
  inline const ::Protocol::Protobuf::RiskRuleWarningTradingResult& riskrulewarningtradingresult(int index) const;
  inline ::Protocol::Protobuf::RiskRuleWarningTradingResult* mutable_riskrulewarningtradingresult(int index);
  inline ::Protocol::Protobuf::RiskRuleWarningTradingResult* add_riskrulewarningtradingresult();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningTradingResult >&
      riskrulewarningtradingresult() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningTradingResult >*
      mutable_riskrulewarningtradingresult();

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.RiskRuleWarningSnapshot)
 private:
  inline void set_has_snapshotserialnum();
  inline void clear_has_snapshotserialnum();
  inline void set_has_riskid();
  inline void clear_has_riskid();
  inline void set_has_accountgroupid();
  inline void clear_has_accountgroupid();
  inline void set_has_stkid();
  inline void clear_has_stkid();
  inline void set_has_exchid();
  inline void clear_has_exchid();
  inline void set_has_bsflag();
  inline void clear_has_bsflag();
  inline void set_has_riskrulewarningorderinfo();
  inline void clear_has_riskrulewarningorderinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 snapshotserialnum_;
  ::std::string* riskid_;
  ::std::string* accountgroupid_;
  ::std::string* stkid_;
  ::std::string* exchid_;
  ::std::string* bsflag_;
  ::Protocol::Protobuf::RiskRuleWarningOrderInfo* riskrulewarningorderinfo_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningOpenOrder > riskrulewarningopenorder_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningQuotaModel > riskrulewarningquotamodel_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningTradingResult > riskrulewarningtradingresult_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static RiskRuleWarningSnapshot* default_instance_;
};
// -------------------------------------------------------------------

class RiskRuleWarningOrderInfo : public ::google::protobuf::Message {
 public:
  RiskRuleWarningOrderInfo();
  virtual ~RiskRuleWarningOrderInfo();

  RiskRuleWarningOrderInfo(const RiskRuleWarningOrderInfo& from);

  inline RiskRuleWarningOrderInfo& operator=(const RiskRuleWarningOrderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskRuleWarningOrderInfo& default_instance();

  void Swap(RiskRuleWarningOrderInfo* other);

  // implements Message ----------------------------------------------

  RiskRuleWarningOrderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskRuleWarningOrderInfo& from);
  void MergeFrom(const RiskRuleWarningOrderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string stkId = 1;
  inline bool has_stkid() const;
  inline void clear_stkid();
  static const int kStkIdFieldNumber = 1;
  inline const ::std::string& stkid() const;
  inline void set_stkid(const ::std::string& value);
  inline void set_stkid(const char* value);
  inline void set_stkid(const char* value, size_t size);
  inline ::std::string* mutable_stkid();
  inline ::std::string* release_stkid();
  inline void set_allocated_stkid(::std::string* stkid);

  // required string exchangeId = 2;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 2;
  inline const ::std::string& exchangeid() const;
  inline void set_exchangeid(const ::std::string& value);
  inline void set_exchangeid(const char* value);
  inline void set_exchangeid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeid();
  inline ::std::string* release_exchangeid();
  inline void set_allocated_exchangeid(::std::string* exchangeid);

  // required string bsFlag = 3;
  inline bool has_bsflag() const;
  inline void clear_bsflag();
  static const int kBsFlagFieldNumber = 3;
  inline const ::std::string& bsflag() const;
  inline void set_bsflag(const ::std::string& value);
  inline void set_bsflag(const char* value);
  inline void set_bsflag(const char* value, size_t size);
  inline ::std::string* mutable_bsflag();
  inline ::std::string* release_bsflag();
  inline void set_allocated_bsflag(::std::string* bsflag);

  // required string contractNum = 4;
  inline bool has_contractnum() const;
  inline void clear_contractnum();
  static const int kContractNumFieldNumber = 4;
  inline const ::std::string& contractnum() const;
  inline void set_contractnum(const ::std::string& value);
  inline void set_contractnum(const char* value);
  inline void set_contractnum(const char* value, size_t size);
  inline ::std::string* mutable_contractnum();
  inline ::std::string* release_contractnum();
  inline void set_allocated_contractnum(::std::string* contractnum);

  // required string acctId = 5;
  inline bool has_acctid() const;
  inline void clear_acctid();
  static const int kAcctIdFieldNumber = 5;
  inline const ::std::string& acctid() const;
  inline void set_acctid(const ::std::string& value);
  inline void set_acctid(const char* value);
  inline void set_acctid(const char* value, size_t size);
  inline ::std::string* mutable_acctid();
  inline ::std::string* release_acctid();
  inline void set_allocated_acctid(::std::string* acctid);

  // required string priceType = 6;
  inline bool has_pricetype() const;
  inline void clear_pricetype();
  static const int kPriceTypeFieldNumber = 6;
  inline const ::std::string& pricetype() const;
  inline void set_pricetype(const ::std::string& value);
  inline void set_pricetype(const char* value);
  inline void set_pricetype(const char* value, size_t size);
  inline ::std::string* mutable_pricetype();
  inline ::std::string* release_pricetype();
  inline void set_allocated_pricetype(::std::string* pricetype);

  // required string accountGroupId = 7;
  inline bool has_accountgroupid() const;
  inline void clear_accountgroupid();
  static const int kAccountGroupIdFieldNumber = 7;
  inline const ::std::string& accountgroupid() const;
  inline void set_accountgroupid(const ::std::string& value);
  inline void set_accountgroupid(const char* value);
  inline void set_accountgroupid(const char* value, size_t size);
  inline ::std::string* mutable_accountgroupid();
  inline ::std::string* release_accountgroupid();
  inline void set_allocated_accountgroupid(::std::string* accountgroupid);

  // required string groupType = 8;
  inline bool has_grouptype() const;
  inline void clear_grouptype();
  static const int kGroupTypeFieldNumber = 8;
  inline const ::std::string& grouptype() const;
  inline void set_grouptype(const ::std::string& value);
  inline void set_grouptype(const char* value);
  inline void set_grouptype(const char* value, size_t size);
  inline ::std::string* mutable_grouptype();
  inline ::std::string* release_grouptype();
  inline void set_allocated_grouptype(::std::string* grouptype);

  // required int64 orderTime = 9;
  inline bool has_ordertime() const;
  inline void clear_ordertime();
  static const int kOrderTimeFieldNumber = 9;
  inline ::google::protobuf::int64 ordertime() const;
  inline void set_ordertime(::google::protobuf::int64 value);

  // required int32 orderQty = 10;
  inline bool has_orderqty() const;
  inline void clear_orderqty();
  static const int kOrderQtyFieldNumber = 10;
  inline ::google::protobuf::int32 orderqty() const;
  inline void set_orderqty(::google::protobuf::int32 value);

  // required double orderPrice = 11;
  inline bool has_orderprice() const;
  inline void clear_orderprice();
  static const int kOrderPriceFieldNumber = 11;
  inline double orderprice() const;
  inline void set_orderprice(double value);

  // required double orderAmount = 12;
  inline bool has_orderamount() const;
  inline void clear_orderamount();
  static const int kOrderAmountFieldNumber = 12;
  inline double orderamount() const;
  inline void set_orderamount(double value);

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.RiskRuleWarningOrderInfo)
 private:
  inline void set_has_stkid();
  inline void clear_has_stkid();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_bsflag();
  inline void clear_has_bsflag();
  inline void set_has_contractnum();
  inline void clear_has_contractnum();
  inline void set_has_acctid();
  inline void clear_has_acctid();
  inline void set_has_pricetype();
  inline void clear_has_pricetype();
  inline void set_has_accountgroupid();
  inline void clear_has_accountgroupid();
  inline void set_has_grouptype();
  inline void clear_has_grouptype();
  inline void set_has_ordertime();
  inline void clear_has_ordertime();
  inline void set_has_orderqty();
  inline void clear_has_orderqty();
  inline void set_has_orderprice();
  inline void clear_has_orderprice();
  inline void set_has_orderamount();
  inline void clear_has_orderamount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stkid_;
  ::std::string* exchangeid_;
  ::std::string* bsflag_;
  ::std::string* contractnum_;
  ::std::string* acctid_;
  ::std::string* pricetype_;
  ::std::string* accountgroupid_;
  ::std::string* grouptype_;
  ::google::protobuf::int64 ordertime_;
  double orderprice_;
  double orderamount_;
  ::google::protobuf::int32 orderqty_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static RiskRuleWarningOrderInfo* default_instance_;
};
// -------------------------------------------------------------------

class RiskRuleWarningOpenOrder : public ::google::protobuf::Message {
 public:
  RiskRuleWarningOpenOrder();
  virtual ~RiskRuleWarningOpenOrder();

  RiskRuleWarningOpenOrder(const RiskRuleWarningOpenOrder& from);

  inline RiskRuleWarningOpenOrder& operator=(const RiskRuleWarningOpenOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskRuleWarningOpenOrder& default_instance();

  void Swap(RiskRuleWarningOpenOrder* other);

  // implements Message ----------------------------------------------

  RiskRuleWarningOpenOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskRuleWarningOpenOrder& from);
  void MergeFrom(const RiskRuleWarningOpenOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string stkId = 1;
  inline bool has_stkid() const;
  inline void clear_stkid();
  static const int kStkIdFieldNumber = 1;
  inline const ::std::string& stkid() const;
  inline void set_stkid(const ::std::string& value);
  inline void set_stkid(const char* value);
  inline void set_stkid(const char* value, size_t size);
  inline ::std::string* mutable_stkid();
  inline ::std::string* release_stkid();
  inline void set_allocated_stkid(::std::string* stkid);

  // required string exchangeId = 2;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 2;
  inline const ::std::string& exchangeid() const;
  inline void set_exchangeid(const ::std::string& value);
  inline void set_exchangeid(const char* value);
  inline void set_exchangeid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeid();
  inline ::std::string* release_exchangeid();
  inline void set_allocated_exchangeid(::std::string* exchangeid);

  // required string bsFlag = 3;
  inline bool has_bsflag() const;
  inline void clear_bsflag();
  static const int kBsFlagFieldNumber = 3;
  inline const ::std::string& bsflag() const;
  inline void set_bsflag(const ::std::string& value);
  inline void set_bsflag(const char* value);
  inline void set_bsflag(const char* value, size_t size);
  inline ::std::string* mutable_bsflag();
  inline ::std::string* release_bsflag();
  inline void set_allocated_bsflag(::std::string* bsflag);

  // required string contractNum = 4;
  inline bool has_contractnum() const;
  inline void clear_contractnum();
  static const int kContractNumFieldNumber = 4;
  inline const ::std::string& contractnum() const;
  inline void set_contractnum(const ::std::string& value);
  inline void set_contractnum(const char* value);
  inline void set_contractnum(const char* value, size_t size);
  inline ::std::string* mutable_contractnum();
  inline ::std::string* release_contractnum();
  inline void set_allocated_contractnum(::std::string* contractnum);

  // required string acctId = 5;
  inline bool has_acctid() const;
  inline void clear_acctid();
  static const int kAcctIdFieldNumber = 5;
  inline const ::std::string& acctid() const;
  inline void set_acctid(const ::std::string& value);
  inline void set_acctid(const char* value);
  inline void set_acctid(const char* value, size_t size);
  inline ::std::string* mutable_acctid();
  inline ::std::string* release_acctid();
  inline void set_allocated_acctid(::std::string* acctid);

  // required string priceType = 6;
  inline bool has_pricetype() const;
  inline void clear_pricetype();
  static const int kPriceTypeFieldNumber = 6;
  inline const ::std::string& pricetype() const;
  inline void set_pricetype(const ::std::string& value);
  inline void set_pricetype(const char* value);
  inline void set_pricetype(const char* value, size_t size);
  inline ::std::string* mutable_pricetype();
  inline ::std::string* release_pricetype();
  inline void set_allocated_pricetype(::std::string* pricetype);

  // required string accountGroupId = 7;
  inline bool has_accountgroupid() const;
  inline void clear_accountgroupid();
  static const int kAccountGroupIdFieldNumber = 7;
  inline const ::std::string& accountgroupid() const;
  inline void set_accountgroupid(const ::std::string& value);
  inline void set_accountgroupid(const char* value);
  inline void set_accountgroupid(const char* value, size_t size);
  inline ::std::string* mutable_accountgroupid();
  inline ::std::string* release_accountgroupid();
  inline void set_allocated_accountgroupid(::std::string* accountgroupid);

  // required string groupType = 8;
  inline bool has_grouptype() const;
  inline void clear_grouptype();
  static const int kGroupTypeFieldNumber = 8;
  inline const ::std::string& grouptype() const;
  inline void set_grouptype(const ::std::string& value);
  inline void set_grouptype(const char* value);
  inline void set_grouptype(const char* value, size_t size);
  inline ::std::string* mutable_grouptype();
  inline ::std::string* release_grouptype();
  inline void set_allocated_grouptype(::std::string* grouptype);

  // required int64 orderTime = 9;
  inline bool has_ordertime() const;
  inline void clear_ordertime();
  static const int kOrderTimeFieldNumber = 9;
  inline ::google::protobuf::int64 ordertime() const;
  inline void set_ordertime(::google::protobuf::int64 value);

  // required int64 orderQty = 10;
  inline bool has_orderqty() const;
  inline void clear_orderqty();
  static const int kOrderQtyFieldNumber = 10;
  inline ::google::protobuf::int64 orderqty() const;
  inline void set_orderqty(::google::protobuf::int64 value);

  // required double orderPrice = 11;
  inline bool has_orderprice() const;
  inline void clear_orderprice();
  static const int kOrderPriceFieldNumber = 11;
  inline double orderprice() const;
  inline void set_orderprice(double value);

  // required double orderAmount = 12;
  inline bool has_orderamount() const;
  inline void clear_orderamount();
  static const int kOrderAmountFieldNumber = 12;
  inline double orderamount() const;
  inline void set_orderamount(double value);

  // required int64 withdrawQty = 13;
  inline bool has_withdrawqty() const;
  inline void clear_withdrawqty();
  static const int kWithdrawQtyFieldNumber = 13;
  inline ::google::protobuf::int64 withdrawqty() const;
  inline void set_withdrawqty(::google::protobuf::int64 value);

  // required double withdrawAmt = 14;
  inline bool has_withdrawamt() const;
  inline void clear_withdrawamt();
  static const int kWithdrawAmtFieldNumber = 14;
  inline double withdrawamt() const;
  inline void set_withdrawamt(double value);

  // required int64 knockQty = 15;
  inline bool has_knockqty() const;
  inline void clear_knockqty();
  static const int kKnockQtyFieldNumber = 15;
  inline ::google::protobuf::int64 knockqty() const;
  inline void set_knockqty(::google::protobuf::int64 value);

  // required double knockAmt = 16;
  inline bool has_knockamt() const;
  inline void clear_knockamt();
  static const int kKnockAmtFieldNumber = 16;
  inline double knockamt() const;
  inline void set_knockamt(double value);

  // required double reckoningAmt = 17;
  inline bool has_reckoningamt() const;
  inline void clear_reckoningamt();
  static const int kReckoningAmtFieldNumber = 17;
  inline double reckoningamt() const;
  inline void set_reckoningamt(double value);

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.RiskRuleWarningOpenOrder)
 private:
  inline void set_has_stkid();
  inline void clear_has_stkid();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_bsflag();
  inline void clear_has_bsflag();
  inline void set_has_contractnum();
  inline void clear_has_contractnum();
  inline void set_has_acctid();
  inline void clear_has_acctid();
  inline void set_has_pricetype();
  inline void clear_has_pricetype();
  inline void set_has_accountgroupid();
  inline void clear_has_accountgroupid();
  inline void set_has_grouptype();
  inline void clear_has_grouptype();
  inline void set_has_ordertime();
  inline void clear_has_ordertime();
  inline void set_has_orderqty();
  inline void clear_has_orderqty();
  inline void set_has_orderprice();
  inline void clear_has_orderprice();
  inline void set_has_orderamount();
  inline void clear_has_orderamount();
  inline void set_has_withdrawqty();
  inline void clear_has_withdrawqty();
  inline void set_has_withdrawamt();
  inline void clear_has_withdrawamt();
  inline void set_has_knockqty();
  inline void clear_has_knockqty();
  inline void set_has_knockamt();
  inline void clear_has_knockamt();
  inline void set_has_reckoningamt();
  inline void clear_has_reckoningamt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stkid_;
  ::std::string* exchangeid_;
  ::std::string* bsflag_;
  ::std::string* contractnum_;
  ::std::string* acctid_;
  ::std::string* pricetype_;
  ::std::string* accountgroupid_;
  ::std::string* grouptype_;
  ::google::protobuf::int64 ordertime_;
  ::google::protobuf::int64 orderqty_;
  double orderprice_;
  double orderamount_;
  ::google::protobuf::int64 withdrawqty_;
  double withdrawamt_;
  ::google::protobuf::int64 knockqty_;
  double knockamt_;
  double reckoningamt_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static RiskRuleWarningOpenOrder* default_instance_;
};
// -------------------------------------------------------------------

class RiskRuleWarningQuotaModel : public ::google::protobuf::Message {
 public:
  RiskRuleWarningQuotaModel();
  virtual ~RiskRuleWarningQuotaModel();

  RiskRuleWarningQuotaModel(const RiskRuleWarningQuotaModel& from);

  inline RiskRuleWarningQuotaModel& operator=(const RiskRuleWarningQuotaModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskRuleWarningQuotaModel& default_instance();

  void Swap(RiskRuleWarningQuotaModel* other);

  // implements Message ----------------------------------------------

  RiskRuleWarningQuotaModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskRuleWarningQuotaModel& from);
  void MergeFrom(const RiskRuleWarningQuotaModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string stkId = 1;
  inline bool has_stkid() const;
  inline void clear_stkid();
  static const int kStkIdFieldNumber = 1;
  inline const ::std::string& stkid() const;
  inline void set_stkid(const ::std::string& value);
  inline void set_stkid(const char* value);
  inline void set_stkid(const char* value, size_t size);
  inline ::std::string* mutable_stkid();
  inline ::std::string* release_stkid();
  inline void set_allocated_stkid(::std::string* stkid);

  // required string exchangeId = 2;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 2;
  inline const ::std::string& exchangeid() const;
  inline void set_exchangeid(const ::std::string& value);
  inline void set_exchangeid(const char* value);
  inline void set_exchangeid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeid();
  inline ::std::string* release_exchangeid();
  inline void set_allocated_exchangeid(::std::string* exchangeid);

  // required double fLast = 3;
  inline bool has_flast() const;
  inline void clear_flast();
  static const int kFLastFieldNumber = 3;
  inline double flast() const;
  inline void set_flast(double value);

  // repeated double fAskPrice = 4 [packed = true];
  inline int faskprice_size() const;
  inline void clear_faskprice();
  static const int kFAskPriceFieldNumber = 4;
  inline double faskprice(int index) const;
  inline void set_faskprice(int index, double value);
  inline void add_faskprice(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      faskprice() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_faskprice();

  // repeated int32 iAskVol = 5 [packed = true];
  inline int iaskvol_size() const;
  inline void clear_iaskvol();
  static const int kIAskVolFieldNumber = 5;
  inline ::google::protobuf::int32 iaskvol(int index) const;
  inline void set_iaskvol(int index, ::google::protobuf::int32 value);
  inline void add_iaskvol(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      iaskvol() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_iaskvol();

  // repeated double fBidPrice = 6 [packed = true];
  inline int fbidprice_size() const;
  inline void clear_fbidprice();
  static const int kFBidPriceFieldNumber = 6;
  inline double fbidprice(int index) const;
  inline void set_fbidprice(int index, double value);
  inline void add_fbidprice(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      fbidprice() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_fbidprice();

  // repeated int32 iBidVol = 7 [packed = true];
  inline int ibidvol_size() const;
  inline void clear_ibidvol();
  static const int kIBidVolFieldNumber = 7;
  inline ::google::protobuf::int32 ibidvol(int index) const;
  inline void set_ibidvol(int index, ::google::protobuf::int32 value);
  inline void add_ibidvol(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ibidvol() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ibidvol();

  // optional int64 iTotalAskQty = 8;
  inline bool has_itotalaskqty() const;
  inline void clear_itotalaskqty();
  static const int kITotalAskQtyFieldNumber = 8;
  inline ::google::protobuf::int64 itotalaskqty() const;
  inline void set_itotalaskqty(::google::protobuf::int64 value);

  // optional int64 iTotalBidQty = 9;
  inline bool has_itotalbidqty() const;
  inline void clear_itotalbidqty();
  static const int kITotalBidQtyFieldNumber = 9;
  inline ::google::protobuf::int64 itotalbidqty() const;
  inline void set_itotalbidqty(::google::protobuf::int64 value);

  // optional double fHighLimited = 10;
  inline bool has_fhighlimited() const;
  inline void clear_fhighlimited();
  static const int kFHighLimitedFieldNumber = 10;
  inline double fhighlimited() const;
  inline void set_fhighlimited(double value);

  // optional double fLowLimited = 11;
  inline bool has_flowlimited() const;
  inline void clear_flowlimited();
  static const int kFLowLimitedFieldNumber = 11;
  inline double flowlimited() const;
  inline void set_flowlimited(double value);

  // optional int64 lVolume = 12;
  inline bool has_lvolume() const;
  inline void clear_lvolume();
  static const int kLVolumeFieldNumber = 12;
  inline ::google::protobuf::int64 lvolume() const;
  inline void set_lvolume(::google::protobuf::int64 value);

  // required int64 quotaTime = 13;
  inline bool has_quotatime() const;
  inline void clear_quotatime();
  static const int kQuotaTimeFieldNumber = 13;
  inline ::google::protobuf::int64 quotatime() const;
  inline void set_quotatime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.RiskRuleWarningQuotaModel)
 private:
  inline void set_has_stkid();
  inline void clear_has_stkid();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_flast();
  inline void clear_has_flast();
  inline void set_has_itotalaskqty();
  inline void clear_has_itotalaskqty();
  inline void set_has_itotalbidqty();
  inline void clear_has_itotalbidqty();
  inline void set_has_fhighlimited();
  inline void clear_has_fhighlimited();
  inline void set_has_flowlimited();
  inline void clear_has_flowlimited();
  inline void set_has_lvolume();
  inline void clear_has_lvolume();
  inline void set_has_quotatime();
  inline void clear_has_quotatime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stkid_;
  ::std::string* exchangeid_;
  double flast_;
  ::google::protobuf::RepeatedField< double > faskprice_;
  mutable int _faskprice_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > iaskvol_;
  mutable int _iaskvol_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > fbidprice_;
  mutable int _fbidprice_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ibidvol_;
  mutable int _ibidvol_cached_byte_size_;
  ::google::protobuf::int64 itotalaskqty_;
  ::google::protobuf::int64 itotalbidqty_;
  double fhighlimited_;
  double flowlimited_;
  ::google::protobuf::int64 lvolume_;
  ::google::protobuf::int64 quotatime_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static RiskRuleWarningQuotaModel* default_instance_;
};
// -------------------------------------------------------------------

class RiskRuleWarningTradingResult : public ::google::protobuf::Message {
 public:
  RiskRuleWarningTradingResult();
  virtual ~RiskRuleWarningTradingResult();

  RiskRuleWarningTradingResult(const RiskRuleWarningTradingResult& from);

  inline RiskRuleWarningTradingResult& operator=(const RiskRuleWarningTradingResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskRuleWarningTradingResult& default_instance();

  void Swap(RiskRuleWarningTradingResult* other);

  // implements Message ----------------------------------------------

  RiskRuleWarningTradingResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskRuleWarningTradingResult& from);
  void MergeFrom(const RiskRuleWarningTradingResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string stkId = 1;
  inline bool has_stkid() const;
  inline void clear_stkid();
  static const int kStkIdFieldNumber = 1;
  inline const ::std::string& stkid() const;
  inline void set_stkid(const ::std::string& value);
  inline void set_stkid(const char* value);
  inline void set_stkid(const char* value, size_t size);
  inline ::std::string* mutable_stkid();
  inline ::std::string* release_stkid();
  inline void set_allocated_stkid(::std::string* stkid);

  // required string exchangeId = 2;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 2;
  inline const ::std::string& exchangeid() const;
  inline void set_exchangeid(const ::std::string& value);
  inline void set_exchangeid(const char* value);
  inline void set_exchangeid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeid();
  inline ::std::string* release_exchangeid();
  inline void set_allocated_exchangeid(::std::string* exchangeid);

  // required string bsFlag = 3;
  inline bool has_bsflag() const;
  inline void clear_bsflag();
  static const int kBsFlagFieldNumber = 3;
  inline const ::std::string& bsflag() const;
  inline void set_bsflag(const ::std::string& value);
  inline void set_bsflag(const char* value);
  inline void set_bsflag(const char* value, size_t size);
  inline ::std::string* mutable_bsflag();
  inline ::std::string* release_bsflag();
  inline void set_allocated_bsflag(::std::string* bsflag);

  // required string contractNum = 4;
  inline bool has_contractnum() const;
  inline void clear_contractnum();
  static const int kContractNumFieldNumber = 4;
  inline const ::std::string& contractnum() const;
  inline void set_contractnum(const ::std::string& value);
  inline void set_contractnum(const char* value);
  inline void set_contractnum(const char* value, size_t size);
  inline ::std::string* mutable_contractnum();
  inline ::std::string* release_contractnum();
  inline void set_allocated_contractnum(::std::string* contractnum);

  // required string acctId = 5;
  inline bool has_acctid() const;
  inline void clear_acctid();
  static const int kAcctIdFieldNumber = 5;
  inline const ::std::string& acctid() const;
  inline void set_acctid(const ::std::string& value);
  inline void set_acctid(const char* value);
  inline void set_acctid(const char* value, size_t size);
  inline ::std::string* mutable_acctid();
  inline ::std::string* release_acctid();
  inline void set_allocated_acctid(::std::string* acctid);

  // required string priceType = 6;
  inline bool has_pricetype() const;
  inline void clear_pricetype();
  static const int kPriceTypeFieldNumber = 6;
  inline const ::std::string& pricetype() const;
  inline void set_pricetype(const ::std::string& value);
  inline void set_pricetype(const char* value);
  inline void set_pricetype(const char* value, size_t size);
  inline ::std::string* mutable_pricetype();
  inline ::std::string* release_pricetype();
  inline void set_allocated_pricetype(::std::string* pricetype);

  // required string accountGroupId = 7;
  inline bool has_accountgroupid() const;
  inline void clear_accountgroupid();
  static const int kAccountGroupIdFieldNumber = 7;
  inline const ::std::string& accountgroupid() const;
  inline void set_accountgroupid(const ::std::string& value);
  inline void set_accountgroupid(const char* value);
  inline void set_accountgroupid(const char* value, size_t size);
  inline ::std::string* mutable_accountgroupid();
  inline ::std::string* release_accountgroupid();
  inline void set_allocated_accountgroupid(::std::string* accountgroupid);

  // required string groupType = 8;
  inline bool has_grouptype() const;
  inline void clear_grouptype();
  static const int kGroupTypeFieldNumber = 8;
  inline const ::std::string& grouptype() const;
  inline void set_grouptype(const ::std::string& value);
  inline void set_grouptype(const char* value);
  inline void set_grouptype(const char* value, size_t size);
  inline ::std::string* mutable_grouptype();
  inline ::std::string* release_grouptype();
  inline void set_allocated_grouptype(::std::string* grouptype);

  // required string knockCode = 9;
  inline bool has_knockcode() const;
  inline void clear_knockcode();
  static const int kKnockCodeFieldNumber = 9;
  inline const ::std::string& knockcode() const;
  inline void set_knockcode(const ::std::string& value);
  inline void set_knockcode(const char* value);
  inline void set_knockcode(const char* value, size_t size);
  inline ::std::string* mutable_knockcode();
  inline ::std::string* release_knockcode();
  inline void set_allocated_knockcode(::std::string* knockcode);

  // required int64 orderQty = 10;
  inline bool has_orderqty() const;
  inline void clear_orderqty();
  static const int kOrderQtyFieldNumber = 10;
  inline ::google::protobuf::int64 orderqty() const;
  inline void set_orderqty(::google::protobuf::int64 value);

  // required double orderPrice = 11;
  inline bool has_orderprice() const;
  inline void clear_orderprice();
  static const int kOrderPriceFieldNumber = 11;
  inline double orderprice() const;
  inline void set_orderprice(double value);

  // required double orderAmount = 12;
  inline bool has_orderamount() const;
  inline void clear_orderamount();
  static const int kOrderAmountFieldNumber = 12;
  inline double orderamount() const;
  inline void set_orderamount(double value);

  // required int64 knockQty = 13;
  inline bool has_knockqty() const;
  inline void clear_knockqty();
  static const int kKnockQtyFieldNumber = 13;
  inline ::google::protobuf::int64 knockqty() const;
  inline void set_knockqty(::google::protobuf::int64 value);

  // required double knockAmt = 14;
  inline bool has_knockamt() const;
  inline void clear_knockamt();
  static const int kKnockAmtFieldNumber = 14;
  inline double knockamt() const;
  inline void set_knockamt(double value);

  // required double reckoningAmt = 15;
  inline bool has_reckoningamt() const;
  inline void clear_reckoningamt();
  static const int kReckoningAmtFieldNumber = 15;
  inline double reckoningamt() const;
  inline void set_reckoningamt(double value);

  // required double knockPrice = 16;
  inline bool has_knockprice() const;
  inline void clear_knockprice();
  static const int kKnockPriceFieldNumber = 16;
  inline double knockprice() const;
  inline void set_knockprice(double value);

  // @@protoc_insertion_point(class_scope:Protocol.Protobuf.RiskRuleWarningTradingResult)
 private:
  inline void set_has_stkid();
  inline void clear_has_stkid();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_bsflag();
  inline void clear_has_bsflag();
  inline void set_has_contractnum();
  inline void clear_has_contractnum();
  inline void set_has_acctid();
  inline void clear_has_acctid();
  inline void set_has_pricetype();
  inline void clear_has_pricetype();
  inline void set_has_accountgroupid();
  inline void clear_has_accountgroupid();
  inline void set_has_grouptype();
  inline void clear_has_grouptype();
  inline void set_has_knockcode();
  inline void clear_has_knockcode();
  inline void set_has_orderqty();
  inline void clear_has_orderqty();
  inline void set_has_orderprice();
  inline void clear_has_orderprice();
  inline void set_has_orderamount();
  inline void clear_has_orderamount();
  inline void set_has_knockqty();
  inline void clear_has_knockqty();
  inline void set_has_knockamt();
  inline void clear_has_knockamt();
  inline void set_has_reckoningamt();
  inline void clear_has_reckoningamt();
  inline void set_has_knockprice();
  inline void clear_has_knockprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stkid_;
  ::std::string* exchangeid_;
  ::std::string* bsflag_;
  ::std::string* contractnum_;
  ::std::string* acctid_;
  ::std::string* pricetype_;
  ::std::string* accountgroupid_;
  ::std::string* grouptype_;
  ::std::string* knockcode_;
  ::google::protobuf::int64 orderqty_;
  double orderprice_;
  double orderamount_;
  ::google::protobuf::int64 knockqty_;
  double knockamt_;
  double reckoningamt_;
  double knockprice_;
  friend void  protobuf_AddDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_AssignDesc_BeanFeedWarningMsg_2eproto();
  friend void protobuf_ShutdownFile_BeanFeedWarningMsg_2eproto();

  void InitAsDefaultInstance();
  static RiskRuleWarningTradingResult* default_instance_;
};
// ===================================================================


// ===================================================================

// RiskRuleWarning

// optional int64 serialNum = 1;
inline bool RiskRuleWarning::has_serialnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskRuleWarning::set_has_serialnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskRuleWarning::clear_has_serialnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskRuleWarning::clear_serialnum() {
  serialnum_ = GOOGLE_LONGLONG(0);
  clear_has_serialnum();
}
inline ::google::protobuf::int64 RiskRuleWarning::serialnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.serialNum)
  return serialnum_;
}
inline void RiskRuleWarning::set_serialnum(::google::protobuf::int64 value) {
  set_has_serialnum();
  serialnum_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.serialNum)
}

// required string riskid = 2;
inline bool RiskRuleWarning::has_riskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskRuleWarning::set_has_riskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskRuleWarning::clear_has_riskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskRuleWarning::clear_riskid() {
  if (riskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_->clear();
  }
  clear_has_riskid();
}
inline const ::std::string& RiskRuleWarning::riskid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.riskid)
  return *riskid_;
}
inline void RiskRuleWarning::set_riskid(const ::std::string& value) {
  set_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_ = new ::std::string;
  }
  riskid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.riskid)
}
inline void RiskRuleWarning::set_riskid(const char* value) {
  set_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_ = new ::std::string;
  }
  riskid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarning.riskid)
}
inline void RiskRuleWarning::set_riskid(const char* value, size_t size) {
  set_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_ = new ::std::string;
  }
  riskid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarning.riskid)
}
inline ::std::string* RiskRuleWarning::mutable_riskid() {
  set_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarning.riskid)
  return riskid_;
}
inline ::std::string* RiskRuleWarning::release_riskid() {
  clear_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = riskid_;
    riskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarning::set_allocated_riskid(::std::string* riskid) {
  if (riskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete riskid_;
  }
  if (riskid) {
    set_has_riskid();
    riskid_ = riskid;
  } else {
    clear_has_riskid();
    riskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarning.riskid)
}

// required string accountGroupId = 3;
inline bool RiskRuleWarning::has_accountgroupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskRuleWarning::set_has_accountgroupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskRuleWarning::clear_has_accountgroupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskRuleWarning::clear_accountgroupid() {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_->clear();
  }
  clear_has_accountgroupid();
}
inline const ::std::string& RiskRuleWarning::accountgroupid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.accountGroupId)
  return *accountgroupid_;
}
inline void RiskRuleWarning::set_accountgroupid(const ::std::string& value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.accountGroupId)
}
inline void RiskRuleWarning::set_accountgroupid(const char* value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarning.accountGroupId)
}
inline void RiskRuleWarning::set_accountgroupid(const char* value, size_t size) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarning.accountGroupId)
}
inline ::std::string* RiskRuleWarning::mutable_accountgroupid() {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarning.accountGroupId)
  return accountgroupid_;
}
inline ::std::string* RiskRuleWarning::release_accountgroupid() {
  clear_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountgroupid_;
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarning::set_allocated_accountgroupid(::std::string* accountgroupid) {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (accountgroupid) {
    set_has_accountgroupid();
    accountgroupid_ = accountgroupid;
  } else {
    clear_has_accountgroupid();
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarning.accountGroupId)
}

// optional string stkId = 4;
inline bool RiskRuleWarning::has_stkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiskRuleWarning::set_has_stkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiskRuleWarning::clear_has_stkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiskRuleWarning::clear_stkid() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_->clear();
  }
  clear_has_stkid();
}
inline const ::std::string& RiskRuleWarning::stkid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.stkId)
  return *stkid_;
}
inline void RiskRuleWarning::set_stkid(const ::std::string& value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.stkId)
}
inline void RiskRuleWarning::set_stkid(const char* value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarning.stkId)
}
inline void RiskRuleWarning::set_stkid(const char* value, size_t size) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarning.stkId)
}
inline ::std::string* RiskRuleWarning::mutable_stkid() {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarning.stkId)
  return stkid_;
}
inline ::std::string* RiskRuleWarning::release_stkid() {
  clear_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stkid_;
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarning::set_allocated_stkid(::std::string* stkid) {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (stkid) {
    set_has_stkid();
    stkid_ = stkid;
  } else {
    clear_has_stkid();
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarning.stkId)
}

// optional string exchId = 5;
inline bool RiskRuleWarning::has_exchid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiskRuleWarning::set_has_exchid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiskRuleWarning::clear_has_exchid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiskRuleWarning::clear_exchid() {
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_->clear();
  }
  clear_has_exchid();
}
inline const ::std::string& RiskRuleWarning::exchid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.exchId)
  return *exchid_;
}
inline void RiskRuleWarning::set_exchid(const ::std::string& value) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.exchId)
}
inline void RiskRuleWarning::set_exchid(const char* value) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarning.exchId)
}
inline void RiskRuleWarning::set_exchid(const char* value, size_t size) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarning.exchId)
}
inline ::std::string* RiskRuleWarning::mutable_exchid() {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarning.exchId)
  return exchid_;
}
inline ::std::string* RiskRuleWarning::release_exchid() {
  clear_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exchid_;
    exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarning::set_allocated_exchid(::std::string* exchid) {
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchid_;
  }
  if (exchid) {
    set_has_exchid();
    exchid_ = exchid;
  } else {
    clear_has_exchid();
    exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarning.exchId)
}

// optional string bsFlag = 6;
inline bool RiskRuleWarning::has_bsflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RiskRuleWarning::set_has_bsflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RiskRuleWarning::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RiskRuleWarning::clear_bsflag() {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_->clear();
  }
  clear_has_bsflag();
}
inline const ::std::string& RiskRuleWarning::bsflag() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.bsFlag)
  return *bsflag_;
}
inline void RiskRuleWarning::set_bsflag(const ::std::string& value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.bsFlag)
}
inline void RiskRuleWarning::set_bsflag(const char* value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarning.bsFlag)
}
inline void RiskRuleWarning::set_bsflag(const char* value, size_t size) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarning.bsFlag)
}
inline ::std::string* RiskRuleWarning::mutable_bsflag() {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarning.bsFlag)
  return bsflag_;
}
inline ::std::string* RiskRuleWarning::release_bsflag() {
  clear_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bsflag_;
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarning::set_allocated_bsflag(::std::string* bsflag) {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (bsflag) {
    set_has_bsflag();
    bsflag_ = bsflag;
  } else {
    clear_has_bsflag();
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarning.bsFlag)
}

// optional double calculateValue = 7;
inline bool RiskRuleWarning::has_calculatevalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiskRuleWarning::set_has_calculatevalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiskRuleWarning::clear_has_calculatevalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiskRuleWarning::clear_calculatevalue() {
  calculatevalue_ = 0;
  clear_has_calculatevalue();
}
inline double RiskRuleWarning::calculatevalue() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.calculateValue)
  return calculatevalue_;
}
inline void RiskRuleWarning::set_calculatevalue(double value) {
  set_has_calculatevalue();
  calculatevalue_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.calculateValue)
}

// optional double thresholdValue = 8;
inline bool RiskRuleWarning::has_thresholdvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RiskRuleWarning::set_has_thresholdvalue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RiskRuleWarning::clear_has_thresholdvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RiskRuleWarning::clear_thresholdvalue() {
  thresholdvalue_ = 0;
  clear_has_thresholdvalue();
}
inline double RiskRuleWarning::thresholdvalue() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.thresholdValue)
  return thresholdvalue_;
}
inline void RiskRuleWarning::set_thresholdvalue(double value) {
  set_has_thresholdvalue();
  thresholdvalue_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.thresholdValue)
}

// optional string riskResult = 9;
inline bool RiskRuleWarning::has_riskresult() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RiskRuleWarning::set_has_riskresult() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RiskRuleWarning::clear_has_riskresult() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RiskRuleWarning::clear_riskresult() {
  if (riskresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_->clear();
  }
  clear_has_riskresult();
}
inline const ::std::string& RiskRuleWarning::riskresult() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.riskResult)
  return *riskresult_;
}
inline void RiskRuleWarning::set_riskresult(const ::std::string& value) {
  set_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_ = new ::std::string;
  }
  riskresult_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.riskResult)
}
inline void RiskRuleWarning::set_riskresult(const char* value) {
  set_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_ = new ::std::string;
  }
  riskresult_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarning.riskResult)
}
inline void RiskRuleWarning::set_riskresult(const char* value, size_t size) {
  set_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_ = new ::std::string;
  }
  riskresult_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarning.riskResult)
}
inline ::std::string* RiskRuleWarning::mutable_riskresult() {
  set_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarning.riskResult)
  return riskresult_;
}
inline ::std::string* RiskRuleWarning::release_riskresult() {
  clear_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = riskresult_;
    riskresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarning::set_allocated_riskresult(::std::string* riskresult) {
  if (riskresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete riskresult_;
  }
  if (riskresult) {
    set_has_riskresult();
    riskresult_ = riskresult;
  } else {
    clear_has_riskresult();
    riskresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarning.riskResult)
}

// optional int64 durationStartTime = 10;
inline bool RiskRuleWarning::has_durationstarttime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RiskRuleWarning::set_has_durationstarttime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RiskRuleWarning::clear_has_durationstarttime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RiskRuleWarning::clear_durationstarttime() {
  durationstarttime_ = GOOGLE_LONGLONG(0);
  clear_has_durationstarttime();
}
inline ::google::protobuf::int64 RiskRuleWarning::durationstarttime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.durationStartTime)
  return durationstarttime_;
}
inline void RiskRuleWarning::set_durationstarttime(::google::protobuf::int64 value) {
  set_has_durationstarttime();
  durationstarttime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.durationStartTime)
}

// optional int64 durationEndTime = 11;
inline bool RiskRuleWarning::has_durationendtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RiskRuleWarning::set_has_durationendtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RiskRuleWarning::clear_has_durationendtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RiskRuleWarning::clear_durationendtime() {
  durationendtime_ = GOOGLE_LONGLONG(0);
  clear_has_durationendtime();
}
inline ::google::protobuf::int64 RiskRuleWarning::durationendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.durationEndTime)
  return durationendtime_;
}
inline void RiskRuleWarning::set_durationendtime(::google::protobuf::int64 value) {
  set_has_durationendtime();
  durationendtime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.durationEndTime)
}

// optional int64 triggerTime = 12;
inline bool RiskRuleWarning::has_triggertime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RiskRuleWarning::set_has_triggertime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RiskRuleWarning::clear_has_triggertime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RiskRuleWarning::clear_triggertime() {
  triggertime_ = GOOGLE_LONGLONG(0);
  clear_has_triggertime();
}
inline ::google::protobuf::int64 RiskRuleWarning::triggertime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.triggerTime)
  return triggertime_;
}
inline void RiskRuleWarning::set_triggertime(::google::protobuf::int64 value) {
  set_has_triggertime();
  triggertime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.triggerTime)
}

// optional int32 counts = 13;
inline bool RiskRuleWarning::has_counts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RiskRuleWarning::set_has_counts() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RiskRuleWarning::clear_has_counts() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RiskRuleWarning::clear_counts() {
  counts_ = 0;
  clear_has_counts();
}
inline ::google::protobuf::int32 RiskRuleWarning::counts() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.counts)
  return counts_;
}
inline void RiskRuleWarning::set_counts(::google::protobuf::int32 value) {
  set_has_counts();
  counts_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.counts)
}

// optional double Numerator = 14;
inline bool RiskRuleWarning::has_numerator() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RiskRuleWarning::set_has_numerator() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RiskRuleWarning::clear_has_numerator() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RiskRuleWarning::clear_numerator() {
  numerator_ = 0;
  clear_has_numerator();
}
inline double RiskRuleWarning::numerator() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.Numerator)
  return numerator_;
}
inline void RiskRuleWarning::set_numerator(double value) {
  set_has_numerator();
  numerator_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.Numerator)
}

// optional double BaseValue = 15;
inline bool RiskRuleWarning::has_basevalue() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RiskRuleWarning::set_has_basevalue() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RiskRuleWarning::clear_has_basevalue() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RiskRuleWarning::clear_basevalue() {
  basevalue_ = 0;
  clear_has_basevalue();
}
inline double RiskRuleWarning::basevalue() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.BaseValue)
  return basevalue_;
}
inline void RiskRuleWarning::set_basevalue(double value) {
  set_has_basevalue();
  basevalue_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.BaseValue)
}

// optional int64 snapshotSerialNum = 16;
inline bool RiskRuleWarning::has_snapshotserialnum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RiskRuleWarning::set_has_snapshotserialnum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RiskRuleWarning::clear_has_snapshotserialnum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RiskRuleWarning::clear_snapshotserialnum() {
  snapshotserialnum_ = GOOGLE_LONGLONG(0);
  clear_has_snapshotserialnum();
}
inline ::google::protobuf::int64 RiskRuleWarning::snapshotserialnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.snapshotSerialNum)
  return snapshotserialnum_;
}
inline void RiskRuleWarning::set_snapshotserialnum(::google::protobuf::int64 value) {
  set_has_snapshotserialnum();
  snapshotserialnum_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.snapshotSerialNum)
}

// optional bool isTriggered = 17;
inline bool RiskRuleWarning::has_istriggered() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RiskRuleWarning::set_has_istriggered() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RiskRuleWarning::clear_has_istriggered() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RiskRuleWarning::clear_istriggered() {
  istriggered_ = false;
  clear_has_istriggered();
}
inline bool RiskRuleWarning::istriggered() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarning.isTriggered)
  return istriggered_;
}
inline void RiskRuleWarning::set_istriggered(bool value) {
  set_has_istriggered();
  istriggered_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarning.isTriggered)
}

// -------------------------------------------------------------------

// RiskGroupWarning

// required int64 serialNum = 1;
inline bool RiskGroupWarning::has_serialnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskGroupWarning::set_has_serialnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskGroupWarning::clear_has_serialnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskGroupWarning::clear_serialnum() {
  serialnum_ = GOOGLE_LONGLONG(0);
  clear_has_serialnum();
}
inline ::google::protobuf::int64 RiskGroupWarning::serialnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.serialNum)
  return serialnum_;
}
inline void RiskGroupWarning::set_serialnum(::google::protobuf::int64 value) {
  set_has_serialnum();
  serialnum_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.serialNum)
}

// required string parentRiskId = 2;
inline bool RiskGroupWarning::has_parentriskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskGroupWarning::set_has_parentriskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskGroupWarning::clear_has_parentriskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskGroupWarning::clear_parentriskid() {
  if (parentriskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentriskid_->clear();
  }
  clear_has_parentriskid();
}
inline const ::std::string& RiskGroupWarning::parentriskid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.parentRiskId)
  return *parentriskid_;
}
inline void RiskGroupWarning::set_parentriskid(const ::std::string& value) {
  set_has_parentriskid();
  if (parentriskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentriskid_ = new ::std::string;
  }
  parentriskid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.parentRiskId)
}
inline void RiskGroupWarning::set_parentriskid(const char* value) {
  set_has_parentriskid();
  if (parentriskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentriskid_ = new ::std::string;
  }
  parentriskid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskGroupWarning.parentRiskId)
}
inline void RiskGroupWarning::set_parentriskid(const char* value, size_t size) {
  set_has_parentriskid();
  if (parentriskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentriskid_ = new ::std::string;
  }
  parentriskid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskGroupWarning.parentRiskId)
}
inline ::std::string* RiskGroupWarning::mutable_parentriskid() {
  set_has_parentriskid();
  if (parentriskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentriskid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskGroupWarning.parentRiskId)
  return parentriskid_;
}
inline ::std::string* RiskGroupWarning::release_parentriskid() {
  clear_has_parentriskid();
  if (parentriskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parentriskid_;
    parentriskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskGroupWarning::set_allocated_parentriskid(::std::string* parentriskid) {
  if (parentriskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentriskid_;
  }
  if (parentriskid) {
    set_has_parentriskid();
    parentriskid_ = parentriskid;
  } else {
    clear_has_parentriskid();
    parentriskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskGroupWarning.parentRiskId)
}

// required string accountGroupId = 3;
inline bool RiskGroupWarning::has_accountgroupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskGroupWarning::set_has_accountgroupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskGroupWarning::clear_has_accountgroupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskGroupWarning::clear_accountgroupid() {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_->clear();
  }
  clear_has_accountgroupid();
}
inline const ::std::string& RiskGroupWarning::accountgroupid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.accountGroupId)
  return *accountgroupid_;
}
inline void RiskGroupWarning::set_accountgroupid(const ::std::string& value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.accountGroupId)
}
inline void RiskGroupWarning::set_accountgroupid(const char* value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskGroupWarning.accountGroupId)
}
inline void RiskGroupWarning::set_accountgroupid(const char* value, size_t size) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskGroupWarning.accountGroupId)
}
inline ::std::string* RiskGroupWarning::mutable_accountgroupid() {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskGroupWarning.accountGroupId)
  return accountgroupid_;
}
inline ::std::string* RiskGroupWarning::release_accountgroupid() {
  clear_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountgroupid_;
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskGroupWarning::set_allocated_accountgroupid(::std::string* accountgroupid) {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (accountgroupid) {
    set_has_accountgroupid();
    accountgroupid_ = accountgroupid;
  } else {
    clear_has_accountgroupid();
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskGroupWarning.accountGroupId)
}

// optional string stkId = 4;
inline bool RiskGroupWarning::has_stkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiskGroupWarning::set_has_stkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiskGroupWarning::clear_has_stkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiskGroupWarning::clear_stkid() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_->clear();
  }
  clear_has_stkid();
}
inline const ::std::string& RiskGroupWarning::stkid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.stkId)
  return *stkid_;
}
inline void RiskGroupWarning::set_stkid(const ::std::string& value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.stkId)
}
inline void RiskGroupWarning::set_stkid(const char* value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskGroupWarning.stkId)
}
inline void RiskGroupWarning::set_stkid(const char* value, size_t size) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskGroupWarning.stkId)
}
inline ::std::string* RiskGroupWarning::mutable_stkid() {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskGroupWarning.stkId)
  return stkid_;
}
inline ::std::string* RiskGroupWarning::release_stkid() {
  clear_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stkid_;
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskGroupWarning::set_allocated_stkid(::std::string* stkid) {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (stkid) {
    set_has_stkid();
    stkid_ = stkid;
  } else {
    clear_has_stkid();
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskGroupWarning.stkId)
}

// optional string exchId = 5;
inline bool RiskGroupWarning::has_exchid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiskGroupWarning::set_has_exchid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiskGroupWarning::clear_has_exchid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiskGroupWarning::clear_exchid() {
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_->clear();
  }
  clear_has_exchid();
}
inline const ::std::string& RiskGroupWarning::exchid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.exchId)
  return *exchid_;
}
inline void RiskGroupWarning::set_exchid(const ::std::string& value) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.exchId)
}
inline void RiskGroupWarning::set_exchid(const char* value) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskGroupWarning.exchId)
}
inline void RiskGroupWarning::set_exchid(const char* value, size_t size) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskGroupWarning.exchId)
}
inline ::std::string* RiskGroupWarning::mutable_exchid() {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskGroupWarning.exchId)
  return exchid_;
}
inline ::std::string* RiskGroupWarning::release_exchid() {
  clear_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exchid_;
    exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskGroupWarning::set_allocated_exchid(::std::string* exchid) {
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchid_;
  }
  if (exchid) {
    set_has_exchid();
    exchid_ = exchid;
  } else {
    clear_has_exchid();
    exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskGroupWarning.exchId)
}

// optional int64 triggerTime = 6;
inline bool RiskGroupWarning::has_triggertime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RiskGroupWarning::set_has_triggertime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RiskGroupWarning::clear_has_triggertime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RiskGroupWarning::clear_triggertime() {
  triggertime_ = GOOGLE_LONGLONG(0);
  clear_has_triggertime();
}
inline ::google::protobuf::int64 RiskGroupWarning::triggertime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.triggerTime)
  return triggertime_;
}
inline void RiskGroupWarning::set_triggertime(::google::protobuf::int64 value) {
  set_has_triggertime();
  triggertime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.triggerTime)
}

// optional string riskResult = 7;
inline bool RiskGroupWarning::has_riskresult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiskGroupWarning::set_has_riskresult() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiskGroupWarning::clear_has_riskresult() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiskGroupWarning::clear_riskresult() {
  if (riskresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_->clear();
  }
  clear_has_riskresult();
}
inline const ::std::string& RiskGroupWarning::riskresult() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.riskResult)
  return *riskresult_;
}
inline void RiskGroupWarning::set_riskresult(const ::std::string& value) {
  set_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_ = new ::std::string;
  }
  riskresult_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.riskResult)
}
inline void RiskGroupWarning::set_riskresult(const char* value) {
  set_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_ = new ::std::string;
  }
  riskresult_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskGroupWarning.riskResult)
}
inline void RiskGroupWarning::set_riskresult(const char* value, size_t size) {
  set_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_ = new ::std::string;
  }
  riskresult_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskGroupWarning.riskResult)
}
inline ::std::string* RiskGroupWarning::mutable_riskresult() {
  set_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskresult_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskGroupWarning.riskResult)
  return riskresult_;
}
inline ::std::string* RiskGroupWarning::release_riskresult() {
  clear_has_riskresult();
  if (riskresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = riskresult_;
    riskresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskGroupWarning::set_allocated_riskresult(::std::string* riskresult) {
  if (riskresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete riskresult_;
  }
  if (riskresult) {
    set_has_riskresult();
    riskresult_ = riskresult;
  } else {
    clear_has_riskresult();
    riskresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskGroupWarning.riskResult)
}

// optional int64 beginTime = 8;
inline bool RiskGroupWarning::has_begintime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RiskGroupWarning::set_has_begintime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RiskGroupWarning::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RiskGroupWarning::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 RiskGroupWarning::begintime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.beginTime)
  return begintime_;
}
inline void RiskGroupWarning::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.beginTime)
}

// optional int64 endTime = 9;
inline bool RiskGroupWarning::has_endtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RiskGroupWarning::set_has_endtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RiskGroupWarning::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RiskGroupWarning::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 RiskGroupWarning::endtime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.endTime)
  return endtime_;
}
inline void RiskGroupWarning::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.endTime)
}

// repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 11;
inline int RiskGroupWarning::riskrulewarninglist_size() const {
  return riskrulewarninglist_.size();
}
inline void RiskGroupWarning::clear_riskrulewarninglist() {
  riskrulewarninglist_.Clear();
}
inline const ::Protocol::Protobuf::RiskRuleWarning& RiskGroupWarning::riskrulewarninglist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.riskRuleWarningList)
  return riskrulewarninglist_.Get(index);
}
inline ::Protocol::Protobuf::RiskRuleWarning* RiskGroupWarning::mutable_riskrulewarninglist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskGroupWarning.riskRuleWarningList)
  return riskrulewarninglist_.Mutable(index);
}
inline ::Protocol::Protobuf::RiskRuleWarning* RiskGroupWarning::add_riskrulewarninglist() {
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.RiskGroupWarning.riskRuleWarningList)
  return riskrulewarninglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning >&
RiskGroupWarning::riskrulewarninglist() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.RiskGroupWarning.riskRuleWarningList)
  return riskrulewarninglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning >*
RiskGroupWarning::mutable_riskrulewarninglist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.RiskGroupWarning.riskRuleWarningList)
  return &riskrulewarninglist_;
}

// optional string bsFlag = 12;
inline bool RiskGroupWarning::has_bsflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RiskGroupWarning::set_has_bsflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RiskGroupWarning::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RiskGroupWarning::clear_bsflag() {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_->clear();
  }
  clear_has_bsflag();
}
inline const ::std::string& RiskGroupWarning::bsflag() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskGroupWarning.bsFlag)
  return *bsflag_;
}
inline void RiskGroupWarning::set_bsflag(const ::std::string& value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskGroupWarning.bsFlag)
}
inline void RiskGroupWarning::set_bsflag(const char* value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskGroupWarning.bsFlag)
}
inline void RiskGroupWarning::set_bsflag(const char* value, size_t size) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskGroupWarning.bsFlag)
}
inline ::std::string* RiskGroupWarning::mutable_bsflag() {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskGroupWarning.bsFlag)
  return bsflag_;
}
inline ::std::string* RiskGroupWarning::release_bsflag() {
  clear_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bsflag_;
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskGroupWarning::set_allocated_bsflag(::std::string* bsflag) {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (bsflag) {
    set_has_bsflag();
    bsflag_ = bsflag;
  } else {
    clear_has_bsflag();
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskGroupWarning.bsFlag)
}

// -------------------------------------------------------------------

// FeedWarningMsgRequest

// optional string strCategory = 1;
inline bool FeedWarningMsgRequest::has_strcategory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedWarningMsgRequest::set_has_strcategory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedWarningMsgRequest::clear_has_strcategory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedWarningMsgRequest::clear_strcategory() {
  if (strcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_->clear();
  }
  clear_has_strcategory();
}
inline const ::std::string& FeedWarningMsgRequest::strcategory() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgRequest.strCategory)
  return *strcategory_;
}
inline void FeedWarningMsgRequest::set_strcategory(const ::std::string& value) {
  set_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_ = new ::std::string;
  }
  strcategory_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.FeedWarningMsgRequest.strCategory)
}
inline void FeedWarningMsgRequest::set_strcategory(const char* value) {
  set_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_ = new ::std::string;
  }
  strcategory_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.FeedWarningMsgRequest.strCategory)
}
inline void FeedWarningMsgRequest::set_strcategory(const char* value, size_t size) {
  set_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_ = new ::std::string;
  }
  strcategory_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.FeedWarningMsgRequest.strCategory)
}
inline ::std::string* FeedWarningMsgRequest::mutable_strcategory() {
  set_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgRequest.strCategory)
  return strcategory_;
}
inline ::std::string* FeedWarningMsgRequest::release_strcategory() {
  clear_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strcategory_;
    strcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeedWarningMsgRequest::set_allocated_strcategory(::std::string* strcategory) {
  if (strcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcategory_;
  }
  if (strcategory) {
    set_has_strcategory();
    strcategory_ = strcategory;
  } else {
    clear_has_strcategory();
    strcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.FeedWarningMsgRequest.strCategory)
}

// optional string strSubCategory = 2;
inline bool FeedWarningMsgRequest::has_strsubcategory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedWarningMsgRequest::set_has_strsubcategory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedWarningMsgRequest::clear_has_strsubcategory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedWarningMsgRequest::clear_strsubcategory() {
  if (strsubcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_->clear();
  }
  clear_has_strsubcategory();
}
inline const ::std::string& FeedWarningMsgRequest::strsubcategory() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgRequest.strSubCategory)
  return *strsubcategory_;
}
inline void FeedWarningMsgRequest::set_strsubcategory(const ::std::string& value) {
  set_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_ = new ::std::string;
  }
  strsubcategory_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.FeedWarningMsgRequest.strSubCategory)
}
inline void FeedWarningMsgRequest::set_strsubcategory(const char* value) {
  set_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_ = new ::std::string;
  }
  strsubcategory_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.FeedWarningMsgRequest.strSubCategory)
}
inline void FeedWarningMsgRequest::set_strsubcategory(const char* value, size_t size) {
  set_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_ = new ::std::string;
  }
  strsubcategory_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.FeedWarningMsgRequest.strSubCategory)
}
inline ::std::string* FeedWarningMsgRequest::mutable_strsubcategory() {
  set_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgRequest.strSubCategory)
  return strsubcategory_;
}
inline ::std::string* FeedWarningMsgRequest::release_strsubcategory() {
  clear_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strsubcategory_;
    strsubcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeedWarningMsgRequest::set_allocated_strsubcategory(::std::string* strsubcategory) {
  if (strsubcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strsubcategory_;
  }
  if (strsubcategory) {
    set_has_strsubcategory();
    strsubcategory_ = strsubcategory;
  } else {
    clear_has_strsubcategory();
    strsubcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.FeedWarningMsgRequest.strSubCategory)
}

// -------------------------------------------------------------------

// LogWarning

// required int64 serialNum = 1;
inline bool LogWarning::has_serialnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogWarning::set_has_serialnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogWarning::clear_has_serialnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogWarning::clear_serialnum() {
  serialnum_ = GOOGLE_LONGLONG(0);
  clear_has_serialnum();
}
inline ::google::protobuf::int64 LogWarning::serialnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.serialNum)
  return serialnum_;
}
inline void LogWarning::set_serialnum(::google::protobuf::int64 value) {
  set_has_serialnum();
  serialnum_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.serialNum)
}

// required string serviceID = 2;
inline bool LogWarning::has_serviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogWarning::set_has_serviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogWarning::clear_has_serviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogWarning::clear_serviceid() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_->clear();
  }
  clear_has_serviceid();
}
inline const ::std::string& LogWarning::serviceid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.serviceID)
  return *serviceid_;
}
inline void LogWarning::set_serviceid(const ::std::string& value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.serviceID)
}
inline void LogWarning::set_serviceid(const char* value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.LogWarning.serviceID)
}
inline void LogWarning::set_serviceid(const char* value, size_t size) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.LogWarning.serviceID)
}
inline ::std::string* LogWarning::mutable_serviceid() {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.LogWarning.serviceID)
  return serviceid_;
}
inline ::std::string* LogWarning::release_serviceid() {
  clear_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceid_;
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogWarning::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (serviceid) {
    set_has_serviceid();
    serviceid_ = serviceid;
  } else {
    clear_has_serviceid();
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.LogWarning.serviceID)
}

// optional int64 triggerTime = 3;
inline bool LogWarning::has_triggertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogWarning::set_has_triggertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogWarning::clear_has_triggertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogWarning::clear_triggertime() {
  triggertime_ = GOOGLE_LONGLONG(0);
  clear_has_triggertime();
}
inline ::google::protobuf::int64 LogWarning::triggertime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.triggerTime)
  return triggertime_;
}
inline void LogWarning::set_triggertime(::google::protobuf::int64 value) {
  set_has_triggertime();
  triggertime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.triggerTime)
}

// optional string level = 4;
inline bool LogWarning::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogWarning::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogWarning::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogWarning::clear_level() {
  if (level_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_->clear();
  }
  clear_has_level();
}
inline const ::std::string& LogWarning::level() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.level)
  return *level_;
}
inline void LogWarning::set_level(const ::std::string& value) {
  set_has_level();
  if (level_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_ = new ::std::string;
  }
  level_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.level)
}
inline void LogWarning::set_level(const char* value) {
  set_has_level();
  if (level_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_ = new ::std::string;
  }
  level_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.LogWarning.level)
}
inline void LogWarning::set_level(const char* value, size_t size) {
  set_has_level();
  if (level_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_ = new ::std::string;
  }
  level_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.LogWarning.level)
}
inline ::std::string* LogWarning::mutable_level() {
  set_has_level();
  if (level_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.LogWarning.level)
  return level_;
}
inline ::std::string* LogWarning::release_level() {
  clear_has_level();
  if (level_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = level_;
    level_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogWarning::set_allocated_level(::std::string* level) {
  if (level_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete level_;
  }
  if (level) {
    set_has_level();
    level_ = level;
  } else {
    clear_has_level();
    level_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.LogWarning.level)
}

// optional string serviceType = 5;
inline bool LogWarning::has_servicetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogWarning::set_has_servicetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogWarning::clear_has_servicetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogWarning::clear_servicetype() {
  if (servicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicetype_->clear();
  }
  clear_has_servicetype();
}
inline const ::std::string& LogWarning::servicetype() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.serviceType)
  return *servicetype_;
}
inline void LogWarning::set_servicetype(const ::std::string& value) {
  set_has_servicetype();
  if (servicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicetype_ = new ::std::string;
  }
  servicetype_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.serviceType)
}
inline void LogWarning::set_servicetype(const char* value) {
  set_has_servicetype();
  if (servicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicetype_ = new ::std::string;
  }
  servicetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.LogWarning.serviceType)
}
inline void LogWarning::set_servicetype(const char* value, size_t size) {
  set_has_servicetype();
  if (servicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicetype_ = new ::std::string;
  }
  servicetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.LogWarning.serviceType)
}
inline ::std::string* LogWarning::mutable_servicetype() {
  set_has_servicetype();
  if (servicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.LogWarning.serviceType)
  return servicetype_;
}
inline ::std::string* LogWarning::release_servicetype() {
  clear_has_servicetype();
  if (servicetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicetype_;
    servicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogWarning::set_allocated_servicetype(::std::string* servicetype) {
  if (servicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicetype_;
  }
  if (servicetype) {
    set_has_servicetype();
    servicetype_ = servicetype;
  } else {
    clear_has_servicetype();
    servicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.LogWarning.serviceType)
}

// optional string infoType = 6;
inline bool LogWarning::has_infotype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogWarning::set_has_infotype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogWarning::clear_has_infotype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogWarning::clear_infotype() {
  if (infotype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infotype_->clear();
  }
  clear_has_infotype();
}
inline const ::std::string& LogWarning::infotype() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.infoType)
  return *infotype_;
}
inline void LogWarning::set_infotype(const ::std::string& value) {
  set_has_infotype();
  if (infotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infotype_ = new ::std::string;
  }
  infotype_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.infoType)
}
inline void LogWarning::set_infotype(const char* value) {
  set_has_infotype();
  if (infotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infotype_ = new ::std::string;
  }
  infotype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.LogWarning.infoType)
}
inline void LogWarning::set_infotype(const char* value, size_t size) {
  set_has_infotype();
  if (infotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infotype_ = new ::std::string;
  }
  infotype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.LogWarning.infoType)
}
inline ::std::string* LogWarning::mutable_infotype() {
  set_has_infotype();
  if (infotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infotype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.LogWarning.infoType)
  return infotype_;
}
inline ::std::string* LogWarning::release_infotype() {
  clear_has_infotype();
  if (infotype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = infotype_;
    infotype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogWarning::set_allocated_infotype(::std::string* infotype) {
  if (infotype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infotype_;
  }
  if (infotype) {
    set_has_infotype();
    infotype_ = infotype;
  } else {
    clear_has_infotype();
    infotype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.LogWarning.infoType)
}

// optional string clientID = 7;
inline bool LogWarning::has_clientid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogWarning::set_has_clientid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogWarning::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogWarning::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& LogWarning::clientid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.clientID)
  return *clientid_;
}
inline void LogWarning::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.clientID)
}
inline void LogWarning::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.LogWarning.clientID)
}
inline void LogWarning::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.LogWarning.clientID)
}
inline ::std::string* LogWarning::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.LogWarning.clientID)
  return clientid_;
}
inline ::std::string* LogWarning::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogWarning::set_allocated_clientid(::std::string* clientid) {
  if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientid_;
  }
  if (clientid) {
    set_has_clientid();
    clientid_ = clientid;
  } else {
    clear_has_clientid();
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.LogWarning.clientID)
}

// optional string referenceNum = 8;
inline bool LogWarning::has_referencenum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogWarning::set_has_referencenum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogWarning::clear_has_referencenum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogWarning::clear_referencenum() {
  if (referencenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referencenum_->clear();
  }
  clear_has_referencenum();
}
inline const ::std::string& LogWarning::referencenum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.referenceNum)
  return *referencenum_;
}
inline void LogWarning::set_referencenum(const ::std::string& value) {
  set_has_referencenum();
  if (referencenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referencenum_ = new ::std::string;
  }
  referencenum_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.referenceNum)
}
inline void LogWarning::set_referencenum(const char* value) {
  set_has_referencenum();
  if (referencenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referencenum_ = new ::std::string;
  }
  referencenum_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.LogWarning.referenceNum)
}
inline void LogWarning::set_referencenum(const char* value, size_t size) {
  set_has_referencenum();
  if (referencenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referencenum_ = new ::std::string;
  }
  referencenum_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.LogWarning.referenceNum)
}
inline ::std::string* LogWarning::mutable_referencenum() {
  set_has_referencenum();
  if (referencenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    referencenum_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.LogWarning.referenceNum)
  return referencenum_;
}
inline ::std::string* LogWarning::release_referencenum() {
  clear_has_referencenum();
  if (referencenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = referencenum_;
    referencenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogWarning::set_allocated_referencenum(::std::string* referencenum) {
  if (referencenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete referencenum_;
  }
  if (referencenum) {
    set_has_referencenum();
    referencenum_ = referencenum;
  } else {
    clear_has_referencenum();
    referencenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.LogWarning.referenceNum)
}

// optional string rawLogEntry = 9;
inline bool LogWarning::has_rawlogentry() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogWarning::set_has_rawlogentry() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogWarning::clear_has_rawlogentry() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogWarning::clear_rawlogentry() {
  if (rawlogentry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawlogentry_->clear();
  }
  clear_has_rawlogentry();
}
inline const ::std::string& LogWarning::rawlogentry() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.rawLogEntry)
  return *rawlogentry_;
}
inline void LogWarning::set_rawlogentry(const ::std::string& value) {
  set_has_rawlogentry();
  if (rawlogentry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawlogentry_ = new ::std::string;
  }
  rawlogentry_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.rawLogEntry)
}
inline void LogWarning::set_rawlogentry(const char* value) {
  set_has_rawlogentry();
  if (rawlogentry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawlogentry_ = new ::std::string;
  }
  rawlogentry_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.LogWarning.rawLogEntry)
}
inline void LogWarning::set_rawlogentry(const char* value, size_t size) {
  set_has_rawlogentry();
  if (rawlogentry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawlogentry_ = new ::std::string;
  }
  rawlogentry_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.LogWarning.rawLogEntry)
}
inline ::std::string* LogWarning::mutable_rawlogentry() {
  set_has_rawlogentry();
  if (rawlogentry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawlogentry_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.LogWarning.rawLogEntry)
  return rawlogentry_;
}
inline ::std::string* LogWarning::release_rawlogentry() {
  clear_has_rawlogentry();
  if (rawlogentry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rawlogentry_;
    rawlogentry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogWarning::set_allocated_rawlogentry(::std::string* rawlogentry) {
  if (rawlogentry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rawlogentry_;
  }
  if (rawlogentry) {
    set_has_rawlogentry();
    rawlogentry_ = rawlogentry;
  } else {
    clear_has_rawlogentry();
    rawlogentry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.LogWarning.rawLogEntry)
}

// optional string description = 10;
inline bool LogWarning::has_description() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogWarning::set_has_description() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogWarning::clear_has_description() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogWarning::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& LogWarning::description() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.LogWarning.description)
  return *description_;
}
inline void LogWarning::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.LogWarning.description)
}
inline void LogWarning::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.LogWarning.description)
}
inline void LogWarning::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.LogWarning.description)
}
inline ::std::string* LogWarning::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.LogWarning.description)
  return description_;
}
inline ::std::string* LogWarning::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogWarning::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.LogWarning.description)
}

// -------------------------------------------------------------------

// FeedWarningMsgArray

// optional string strCategory = 1;
inline bool FeedWarningMsgArray::has_strcategory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedWarningMsgArray::set_has_strcategory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedWarningMsgArray::clear_has_strcategory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedWarningMsgArray::clear_strcategory() {
  if (strcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_->clear();
  }
  clear_has_strcategory();
}
inline const ::std::string& FeedWarningMsgArray::strcategory() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.strCategory)
  return *strcategory_;
}
inline void FeedWarningMsgArray::set_strcategory(const ::std::string& value) {
  set_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_ = new ::std::string;
  }
  strcategory_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.FeedWarningMsgArray.strCategory)
}
inline void FeedWarningMsgArray::set_strcategory(const char* value) {
  set_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_ = new ::std::string;
  }
  strcategory_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.FeedWarningMsgArray.strCategory)
}
inline void FeedWarningMsgArray::set_strcategory(const char* value, size_t size) {
  set_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_ = new ::std::string;
  }
  strcategory_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.FeedWarningMsgArray.strCategory)
}
inline ::std::string* FeedWarningMsgArray::mutable_strcategory() {
  set_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcategory_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.strCategory)
  return strcategory_;
}
inline ::std::string* FeedWarningMsgArray::release_strcategory() {
  clear_has_strcategory();
  if (strcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strcategory_;
    strcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeedWarningMsgArray::set_allocated_strcategory(::std::string* strcategory) {
  if (strcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcategory_;
  }
  if (strcategory) {
    set_has_strcategory();
    strcategory_ = strcategory;
  } else {
    clear_has_strcategory();
    strcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.FeedWarningMsgArray.strCategory)
}

// optional string strSubCategory = 2;
inline bool FeedWarningMsgArray::has_strsubcategory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedWarningMsgArray::set_has_strsubcategory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedWarningMsgArray::clear_has_strsubcategory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedWarningMsgArray::clear_strsubcategory() {
  if (strsubcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_->clear();
  }
  clear_has_strsubcategory();
}
inline const ::std::string& FeedWarningMsgArray::strsubcategory() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.strSubCategory)
  return *strsubcategory_;
}
inline void FeedWarningMsgArray::set_strsubcategory(const ::std::string& value) {
  set_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_ = new ::std::string;
  }
  strsubcategory_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.FeedWarningMsgArray.strSubCategory)
}
inline void FeedWarningMsgArray::set_strsubcategory(const char* value) {
  set_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_ = new ::std::string;
  }
  strsubcategory_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.FeedWarningMsgArray.strSubCategory)
}
inline void FeedWarningMsgArray::set_strsubcategory(const char* value, size_t size) {
  set_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_ = new ::std::string;
  }
  strsubcategory_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.FeedWarningMsgArray.strSubCategory)
}
inline ::std::string* FeedWarningMsgArray::mutable_strsubcategory() {
  set_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strsubcategory_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.strSubCategory)
  return strsubcategory_;
}
inline ::std::string* FeedWarningMsgArray::release_strsubcategory() {
  clear_has_strsubcategory();
  if (strsubcategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strsubcategory_;
    strsubcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeedWarningMsgArray::set_allocated_strsubcategory(::std::string* strsubcategory) {
  if (strsubcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strsubcategory_;
  }
  if (strsubcategory) {
    set_has_strsubcategory();
    strsubcategory_ = strsubcategory;
  } else {
    clear_has_strsubcategory();
    strsubcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.FeedWarningMsgArray.strSubCategory)
}

// optional int32 iSource = 3;
inline bool FeedWarningMsgArray::has_isource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeedWarningMsgArray::set_has_isource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeedWarningMsgArray::clear_has_isource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeedWarningMsgArray::clear_isource() {
  isource_ = 0;
  clear_has_isource();
}
inline ::google::protobuf::int32 FeedWarningMsgArray::isource() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.iSource)
  return isource_;
}
inline void FeedWarningMsgArray::set_isource(::google::protobuf::int32 value) {
  set_has_isource();
  isource_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.FeedWarningMsgArray.iSource)
}

// optional .Protocol.Protobuf.RiskRuleWarning riskRuleWarning = 5;
inline bool FeedWarningMsgArray::has_riskrulewarning() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeedWarningMsgArray::set_has_riskrulewarning() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeedWarningMsgArray::clear_has_riskrulewarning() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeedWarningMsgArray::clear_riskrulewarning() {
  if (riskrulewarning_ != NULL) riskrulewarning_->::Protocol::Protobuf::RiskRuleWarning::Clear();
  clear_has_riskrulewarning();
}
inline const ::Protocol::Protobuf::RiskRuleWarning& FeedWarningMsgArray::riskrulewarning() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarning)
  return riskrulewarning_ != NULL ? *riskrulewarning_ : *default_instance_->riskrulewarning_;
}
inline ::Protocol::Protobuf::RiskRuleWarning* FeedWarningMsgArray::mutable_riskrulewarning() {
  set_has_riskrulewarning();
  if (riskrulewarning_ == NULL) riskrulewarning_ = new ::Protocol::Protobuf::RiskRuleWarning;
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarning)
  return riskrulewarning_;
}
inline ::Protocol::Protobuf::RiskRuleWarning* FeedWarningMsgArray::release_riskrulewarning() {
  clear_has_riskrulewarning();
  ::Protocol::Protobuf::RiskRuleWarning* temp = riskrulewarning_;
  riskrulewarning_ = NULL;
  return temp;
}
inline void FeedWarningMsgArray::set_allocated_riskrulewarning(::Protocol::Protobuf::RiskRuleWarning* riskrulewarning) {
  delete riskrulewarning_;
  riskrulewarning_ = riskrulewarning;
  if (riskrulewarning) {
    set_has_riskrulewarning();
  } else {
    clear_has_riskrulewarning();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarning)
}

// repeated .Protocol.Protobuf.RiskRuleWarning riskRuleWarningList = 6;
inline int FeedWarningMsgArray::riskrulewarninglist_size() const {
  return riskrulewarninglist_.size();
}
inline void FeedWarningMsgArray::clear_riskrulewarninglist() {
  riskrulewarninglist_.Clear();
}
inline const ::Protocol::Protobuf::RiskRuleWarning& FeedWarningMsgArray::riskrulewarninglist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningList)
  return riskrulewarninglist_.Get(index);
}
inline ::Protocol::Protobuf::RiskRuleWarning* FeedWarningMsgArray::mutable_riskrulewarninglist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningList)
  return riskrulewarninglist_.Mutable(index);
}
inline ::Protocol::Protobuf::RiskRuleWarning* FeedWarningMsgArray::add_riskrulewarninglist() {
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningList)
  return riskrulewarninglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning >&
FeedWarningMsgArray::riskrulewarninglist() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningList)
  return riskrulewarninglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarning >*
FeedWarningMsgArray::mutable_riskrulewarninglist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningList)
  return &riskrulewarninglist_;
}

// optional .Protocol.Protobuf.RiskGroupWarning riskGroupWarning = 7;
inline bool FeedWarningMsgArray::has_riskgroupwarning() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FeedWarningMsgArray::set_has_riskgroupwarning() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FeedWarningMsgArray::clear_has_riskgroupwarning() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FeedWarningMsgArray::clear_riskgroupwarning() {
  if (riskgroupwarning_ != NULL) riskgroupwarning_->::Protocol::Protobuf::RiskGroupWarning::Clear();
  clear_has_riskgroupwarning();
}
inline const ::Protocol::Protobuf::RiskGroupWarning& FeedWarningMsgArray::riskgroupwarning() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.riskGroupWarning)
  return riskgroupwarning_ != NULL ? *riskgroupwarning_ : *default_instance_->riskgroupwarning_;
}
inline ::Protocol::Protobuf::RiskGroupWarning* FeedWarningMsgArray::mutable_riskgroupwarning() {
  set_has_riskgroupwarning();
  if (riskgroupwarning_ == NULL) riskgroupwarning_ = new ::Protocol::Protobuf::RiskGroupWarning;
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.riskGroupWarning)
  return riskgroupwarning_;
}
inline ::Protocol::Protobuf::RiskGroupWarning* FeedWarningMsgArray::release_riskgroupwarning() {
  clear_has_riskgroupwarning();
  ::Protocol::Protobuf::RiskGroupWarning* temp = riskgroupwarning_;
  riskgroupwarning_ = NULL;
  return temp;
}
inline void FeedWarningMsgArray::set_allocated_riskgroupwarning(::Protocol::Protobuf::RiskGroupWarning* riskgroupwarning) {
  delete riskgroupwarning_;
  riskgroupwarning_ = riskgroupwarning;
  if (riskgroupwarning) {
    set_has_riskgroupwarning();
  } else {
    clear_has_riskgroupwarning();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.FeedWarningMsgArray.riskGroupWarning)
}

// repeated .Protocol.Protobuf.RiskGroupWarning riskGroupWarningList = 8;
inline int FeedWarningMsgArray::riskgroupwarninglist_size() const {
  return riskgroupwarninglist_.size();
}
inline void FeedWarningMsgArray::clear_riskgroupwarninglist() {
  riskgroupwarninglist_.Clear();
}
inline const ::Protocol::Protobuf::RiskGroupWarning& FeedWarningMsgArray::riskgroupwarninglist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.riskGroupWarningList)
  return riskgroupwarninglist_.Get(index);
}
inline ::Protocol::Protobuf::RiskGroupWarning* FeedWarningMsgArray::mutable_riskgroupwarninglist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.riskGroupWarningList)
  return riskgroupwarninglist_.Mutable(index);
}
inline ::Protocol::Protobuf::RiskGroupWarning* FeedWarningMsgArray::add_riskgroupwarninglist() {
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.FeedWarningMsgArray.riskGroupWarningList)
  return riskgroupwarninglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskGroupWarning >&
FeedWarningMsgArray::riskgroupwarninglist() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.FeedWarningMsgArray.riskGroupWarningList)
  return riskgroupwarninglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskGroupWarning >*
FeedWarningMsgArray::mutable_riskgroupwarninglist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.FeedWarningMsgArray.riskGroupWarningList)
  return &riskgroupwarninglist_;
}

// optional .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshot = 9;
inline bool FeedWarningMsgArray::has_riskrulewarningsnapshot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FeedWarningMsgArray::set_has_riskrulewarningsnapshot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FeedWarningMsgArray::clear_has_riskrulewarningsnapshot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FeedWarningMsgArray::clear_riskrulewarningsnapshot() {
  if (riskrulewarningsnapshot_ != NULL) riskrulewarningsnapshot_->::Protocol::Protobuf::RiskRuleWarningSnapshot::Clear();
  clear_has_riskrulewarningsnapshot();
}
inline const ::Protocol::Protobuf::RiskRuleWarningSnapshot& FeedWarningMsgArray::riskrulewarningsnapshot() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningSnapshot)
  return riskrulewarningsnapshot_ != NULL ? *riskrulewarningsnapshot_ : *default_instance_->riskrulewarningsnapshot_;
}
inline ::Protocol::Protobuf::RiskRuleWarningSnapshot* FeedWarningMsgArray::mutable_riskrulewarningsnapshot() {
  set_has_riskrulewarningsnapshot();
  if (riskrulewarningsnapshot_ == NULL) riskrulewarningsnapshot_ = new ::Protocol::Protobuf::RiskRuleWarningSnapshot;
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningSnapshot)
  return riskrulewarningsnapshot_;
}
inline ::Protocol::Protobuf::RiskRuleWarningSnapshot* FeedWarningMsgArray::release_riskrulewarningsnapshot() {
  clear_has_riskrulewarningsnapshot();
  ::Protocol::Protobuf::RiskRuleWarningSnapshot* temp = riskrulewarningsnapshot_;
  riskrulewarningsnapshot_ = NULL;
  return temp;
}
inline void FeedWarningMsgArray::set_allocated_riskrulewarningsnapshot(::Protocol::Protobuf::RiskRuleWarningSnapshot* riskrulewarningsnapshot) {
  delete riskrulewarningsnapshot_;
  riskrulewarningsnapshot_ = riskrulewarningsnapshot;
  if (riskrulewarningsnapshot) {
    set_has_riskrulewarningsnapshot();
  } else {
    clear_has_riskrulewarningsnapshot();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningSnapshot)
}

// repeated .Protocol.Protobuf.RiskRuleWarningSnapshot riskRuleWarningSnapshotList = 10;
inline int FeedWarningMsgArray::riskrulewarningsnapshotlist_size() const {
  return riskrulewarningsnapshotlist_.size();
}
inline void FeedWarningMsgArray::clear_riskrulewarningsnapshotlist() {
  riskrulewarningsnapshotlist_.Clear();
}
inline const ::Protocol::Protobuf::RiskRuleWarningSnapshot& FeedWarningMsgArray::riskrulewarningsnapshotlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningSnapshotList)
  return riskrulewarningsnapshotlist_.Get(index);
}
inline ::Protocol::Protobuf::RiskRuleWarningSnapshot* FeedWarningMsgArray::mutable_riskrulewarningsnapshotlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningSnapshotList)
  return riskrulewarningsnapshotlist_.Mutable(index);
}
inline ::Protocol::Protobuf::RiskRuleWarningSnapshot* FeedWarningMsgArray::add_riskrulewarningsnapshotlist() {
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningSnapshotList)
  return riskrulewarningsnapshotlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningSnapshot >&
FeedWarningMsgArray::riskrulewarningsnapshotlist() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningSnapshotList)
  return riskrulewarningsnapshotlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningSnapshot >*
FeedWarningMsgArray::mutable_riskrulewarningsnapshotlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.FeedWarningMsgArray.riskRuleWarningSnapshotList)
  return &riskrulewarningsnapshotlist_;
}

// optional .Protocol.Protobuf.LogWarning logWarning = 100;
inline bool FeedWarningMsgArray::has_logwarning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FeedWarningMsgArray::set_has_logwarning() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FeedWarningMsgArray::clear_has_logwarning() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FeedWarningMsgArray::clear_logwarning() {
  if (logwarning_ != NULL) logwarning_->::Protocol::Protobuf::LogWarning::Clear();
  clear_has_logwarning();
}
inline const ::Protocol::Protobuf::LogWarning& FeedWarningMsgArray::logwarning() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.logWarning)
  return logwarning_ != NULL ? *logwarning_ : *default_instance_->logwarning_;
}
inline ::Protocol::Protobuf::LogWarning* FeedWarningMsgArray::mutable_logwarning() {
  set_has_logwarning();
  if (logwarning_ == NULL) logwarning_ = new ::Protocol::Protobuf::LogWarning;
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.logWarning)
  return logwarning_;
}
inline ::Protocol::Protobuf::LogWarning* FeedWarningMsgArray::release_logwarning() {
  clear_has_logwarning();
  ::Protocol::Protobuf::LogWarning* temp = logwarning_;
  logwarning_ = NULL;
  return temp;
}
inline void FeedWarningMsgArray::set_allocated_logwarning(::Protocol::Protobuf::LogWarning* logwarning) {
  delete logwarning_;
  logwarning_ = logwarning;
  if (logwarning) {
    set_has_logwarning();
  } else {
    clear_has_logwarning();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.FeedWarningMsgArray.logWarning)
}

// repeated .Protocol.Protobuf.LogWarning logWarningList = 101;
inline int FeedWarningMsgArray::logwarninglist_size() const {
  return logwarninglist_.size();
}
inline void FeedWarningMsgArray::clear_logwarninglist() {
  logwarninglist_.Clear();
}
inline const ::Protocol::Protobuf::LogWarning& FeedWarningMsgArray::logwarninglist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.FeedWarningMsgArray.logWarningList)
  return logwarninglist_.Get(index);
}
inline ::Protocol::Protobuf::LogWarning* FeedWarningMsgArray::mutable_logwarninglist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.FeedWarningMsgArray.logWarningList)
  return logwarninglist_.Mutable(index);
}
inline ::Protocol::Protobuf::LogWarning* FeedWarningMsgArray::add_logwarninglist() {
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.FeedWarningMsgArray.logWarningList)
  return logwarninglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::LogWarning >&
FeedWarningMsgArray::logwarninglist() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.FeedWarningMsgArray.logWarningList)
  return logwarninglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::LogWarning >*
FeedWarningMsgArray::mutable_logwarninglist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.FeedWarningMsgArray.logWarningList)
  return &logwarninglist_;
}

// -------------------------------------------------------------------

// RiskRuleWarningSnapshot

// required int64 snapshotSerialNum = 1;
inline bool RiskRuleWarningSnapshot::has_snapshotserialnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskRuleWarningSnapshot::set_has_snapshotserialnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskRuleWarningSnapshot::clear_has_snapshotserialnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskRuleWarningSnapshot::clear_snapshotserialnum() {
  snapshotserialnum_ = GOOGLE_LONGLONG(0);
  clear_has_snapshotserialnum();
}
inline ::google::protobuf::int64 RiskRuleWarningSnapshot::snapshotserialnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.snapshotSerialNum)
  return snapshotserialnum_;
}
inline void RiskRuleWarningSnapshot::set_snapshotserialnum(::google::protobuf::int64 value) {
  set_has_snapshotserialnum();
  snapshotserialnum_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningSnapshot.snapshotSerialNum)
}

// required string riskid = 2;
inline bool RiskRuleWarningSnapshot::has_riskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskRuleWarningSnapshot::set_has_riskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskRuleWarningSnapshot::clear_has_riskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskRuleWarningSnapshot::clear_riskid() {
  if (riskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_->clear();
  }
  clear_has_riskid();
}
inline const ::std::string& RiskRuleWarningSnapshot::riskid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.riskid)
  return *riskid_;
}
inline void RiskRuleWarningSnapshot::set_riskid(const ::std::string& value) {
  set_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_ = new ::std::string;
  }
  riskid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningSnapshot.riskid)
}
inline void RiskRuleWarningSnapshot::set_riskid(const char* value) {
  set_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_ = new ::std::string;
  }
  riskid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningSnapshot.riskid)
}
inline void RiskRuleWarningSnapshot::set_riskid(const char* value, size_t size) {
  set_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_ = new ::std::string;
  }
  riskid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningSnapshot.riskid)
}
inline ::std::string* RiskRuleWarningSnapshot::mutable_riskid() {
  set_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    riskid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.riskid)
  return riskid_;
}
inline ::std::string* RiskRuleWarningSnapshot::release_riskid() {
  clear_has_riskid();
  if (riskid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = riskid_;
    riskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningSnapshot::set_allocated_riskid(::std::string* riskid) {
  if (riskid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete riskid_;
  }
  if (riskid) {
    set_has_riskid();
    riskid_ = riskid;
  } else {
    clear_has_riskid();
    riskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningSnapshot.riskid)
}

// required string accountGroupId = 3;
inline bool RiskRuleWarningSnapshot::has_accountgroupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskRuleWarningSnapshot::set_has_accountgroupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskRuleWarningSnapshot::clear_has_accountgroupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskRuleWarningSnapshot::clear_accountgroupid() {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_->clear();
  }
  clear_has_accountgroupid();
}
inline const ::std::string& RiskRuleWarningSnapshot::accountgroupid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.accountGroupId)
  return *accountgroupid_;
}
inline void RiskRuleWarningSnapshot::set_accountgroupid(const ::std::string& value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningSnapshot.accountGroupId)
}
inline void RiskRuleWarningSnapshot::set_accountgroupid(const char* value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningSnapshot.accountGroupId)
}
inline void RiskRuleWarningSnapshot::set_accountgroupid(const char* value, size_t size) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningSnapshot.accountGroupId)
}
inline ::std::string* RiskRuleWarningSnapshot::mutable_accountgroupid() {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.accountGroupId)
  return accountgroupid_;
}
inline ::std::string* RiskRuleWarningSnapshot::release_accountgroupid() {
  clear_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountgroupid_;
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningSnapshot::set_allocated_accountgroupid(::std::string* accountgroupid) {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (accountgroupid) {
    set_has_accountgroupid();
    accountgroupid_ = accountgroupid;
  } else {
    clear_has_accountgroupid();
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningSnapshot.accountGroupId)
}

// required string stkId = 4;
inline bool RiskRuleWarningSnapshot::has_stkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiskRuleWarningSnapshot::set_has_stkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiskRuleWarningSnapshot::clear_has_stkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiskRuleWarningSnapshot::clear_stkid() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_->clear();
  }
  clear_has_stkid();
}
inline const ::std::string& RiskRuleWarningSnapshot::stkid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.stkId)
  return *stkid_;
}
inline void RiskRuleWarningSnapshot::set_stkid(const ::std::string& value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningSnapshot.stkId)
}
inline void RiskRuleWarningSnapshot::set_stkid(const char* value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningSnapshot.stkId)
}
inline void RiskRuleWarningSnapshot::set_stkid(const char* value, size_t size) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningSnapshot.stkId)
}
inline ::std::string* RiskRuleWarningSnapshot::mutable_stkid() {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.stkId)
  return stkid_;
}
inline ::std::string* RiskRuleWarningSnapshot::release_stkid() {
  clear_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stkid_;
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningSnapshot::set_allocated_stkid(::std::string* stkid) {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (stkid) {
    set_has_stkid();
    stkid_ = stkid;
  } else {
    clear_has_stkid();
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningSnapshot.stkId)
}

// required string exchId = 5;
inline bool RiskRuleWarningSnapshot::has_exchid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiskRuleWarningSnapshot::set_has_exchid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiskRuleWarningSnapshot::clear_has_exchid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiskRuleWarningSnapshot::clear_exchid() {
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_->clear();
  }
  clear_has_exchid();
}
inline const ::std::string& RiskRuleWarningSnapshot::exchid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.exchId)
  return *exchid_;
}
inline void RiskRuleWarningSnapshot::set_exchid(const ::std::string& value) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningSnapshot.exchId)
}
inline void RiskRuleWarningSnapshot::set_exchid(const char* value) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningSnapshot.exchId)
}
inline void RiskRuleWarningSnapshot::set_exchid(const char* value, size_t size) {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  exchid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningSnapshot.exchId)
}
inline ::std::string* RiskRuleWarningSnapshot::mutable_exchid() {
  set_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.exchId)
  return exchid_;
}
inline ::std::string* RiskRuleWarningSnapshot::release_exchid() {
  clear_has_exchid();
  if (exchid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exchid_;
    exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningSnapshot::set_allocated_exchid(::std::string* exchid) {
  if (exchid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchid_;
  }
  if (exchid) {
    set_has_exchid();
    exchid_ = exchid;
  } else {
    clear_has_exchid();
    exchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningSnapshot.exchId)
}

// required string bsFlag = 6;
inline bool RiskRuleWarningSnapshot::has_bsflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RiskRuleWarningSnapshot::set_has_bsflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RiskRuleWarningSnapshot::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RiskRuleWarningSnapshot::clear_bsflag() {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_->clear();
  }
  clear_has_bsflag();
}
inline const ::std::string& RiskRuleWarningSnapshot::bsflag() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.bsFlag)
  return *bsflag_;
}
inline void RiskRuleWarningSnapshot::set_bsflag(const ::std::string& value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningSnapshot.bsFlag)
}
inline void RiskRuleWarningSnapshot::set_bsflag(const char* value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningSnapshot.bsFlag)
}
inline void RiskRuleWarningSnapshot::set_bsflag(const char* value, size_t size) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningSnapshot.bsFlag)
}
inline ::std::string* RiskRuleWarningSnapshot::mutable_bsflag() {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.bsFlag)
  return bsflag_;
}
inline ::std::string* RiskRuleWarningSnapshot::release_bsflag() {
  clear_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bsflag_;
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningSnapshot::set_allocated_bsflag(::std::string* bsflag) {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (bsflag) {
    set_has_bsflag();
    bsflag_ = bsflag;
  } else {
    clear_has_bsflag();
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningSnapshot.bsFlag)
}

// optional .Protocol.Protobuf.RiskRuleWarningOrderInfo riskRuleWarningOrderInfo = 7;
inline bool RiskRuleWarningSnapshot::has_riskrulewarningorderinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiskRuleWarningSnapshot::set_has_riskrulewarningorderinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiskRuleWarningSnapshot::clear_has_riskrulewarningorderinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiskRuleWarningSnapshot::clear_riskrulewarningorderinfo() {
  if (riskrulewarningorderinfo_ != NULL) riskrulewarningorderinfo_->::Protocol::Protobuf::RiskRuleWarningOrderInfo::Clear();
  clear_has_riskrulewarningorderinfo();
}
inline const ::Protocol::Protobuf::RiskRuleWarningOrderInfo& RiskRuleWarningSnapshot::riskrulewarningorderinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningOrderInfo)
  return riskrulewarningorderinfo_ != NULL ? *riskrulewarningorderinfo_ : *default_instance_->riskrulewarningorderinfo_;
}
inline ::Protocol::Protobuf::RiskRuleWarningOrderInfo* RiskRuleWarningSnapshot::mutable_riskrulewarningorderinfo() {
  set_has_riskrulewarningorderinfo();
  if (riskrulewarningorderinfo_ == NULL) riskrulewarningorderinfo_ = new ::Protocol::Protobuf::RiskRuleWarningOrderInfo;
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningOrderInfo)
  return riskrulewarningorderinfo_;
}
inline ::Protocol::Protobuf::RiskRuleWarningOrderInfo* RiskRuleWarningSnapshot::release_riskrulewarningorderinfo() {
  clear_has_riskrulewarningorderinfo();
  ::Protocol::Protobuf::RiskRuleWarningOrderInfo* temp = riskrulewarningorderinfo_;
  riskrulewarningorderinfo_ = NULL;
  return temp;
}
inline void RiskRuleWarningSnapshot::set_allocated_riskrulewarningorderinfo(::Protocol::Protobuf::RiskRuleWarningOrderInfo* riskrulewarningorderinfo) {
  delete riskrulewarningorderinfo_;
  riskrulewarningorderinfo_ = riskrulewarningorderinfo;
  if (riskrulewarningorderinfo) {
    set_has_riskrulewarningorderinfo();
  } else {
    clear_has_riskrulewarningorderinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningOrderInfo)
}

// repeated .Protocol.Protobuf.RiskRuleWarningOpenOrder riskRuleWarningOpenOrder = 8;
inline int RiskRuleWarningSnapshot::riskrulewarningopenorder_size() const {
  return riskrulewarningopenorder_.size();
}
inline void RiskRuleWarningSnapshot::clear_riskrulewarningopenorder() {
  riskrulewarningopenorder_.Clear();
}
inline const ::Protocol::Protobuf::RiskRuleWarningOpenOrder& RiskRuleWarningSnapshot::riskrulewarningopenorder(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningOpenOrder)
  return riskrulewarningopenorder_.Get(index);
}
inline ::Protocol::Protobuf::RiskRuleWarningOpenOrder* RiskRuleWarningSnapshot::mutable_riskrulewarningopenorder(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningOpenOrder)
  return riskrulewarningopenorder_.Mutable(index);
}
inline ::Protocol::Protobuf::RiskRuleWarningOpenOrder* RiskRuleWarningSnapshot::add_riskrulewarningopenorder() {
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningOpenOrder)
  return riskrulewarningopenorder_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningOpenOrder >&
RiskRuleWarningSnapshot::riskrulewarningopenorder() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningOpenOrder)
  return riskrulewarningopenorder_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningOpenOrder >*
RiskRuleWarningSnapshot::mutable_riskrulewarningopenorder() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningOpenOrder)
  return &riskrulewarningopenorder_;
}

// repeated .Protocol.Protobuf.RiskRuleWarningQuotaModel riskRuleWarningQuotaModel = 9;
inline int RiskRuleWarningSnapshot::riskrulewarningquotamodel_size() const {
  return riskrulewarningquotamodel_.size();
}
inline void RiskRuleWarningSnapshot::clear_riskrulewarningquotamodel() {
  riskrulewarningquotamodel_.Clear();
}
inline const ::Protocol::Protobuf::RiskRuleWarningQuotaModel& RiskRuleWarningSnapshot::riskrulewarningquotamodel(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningQuotaModel)
  return riskrulewarningquotamodel_.Get(index);
}
inline ::Protocol::Protobuf::RiskRuleWarningQuotaModel* RiskRuleWarningSnapshot::mutable_riskrulewarningquotamodel(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningQuotaModel)
  return riskrulewarningquotamodel_.Mutable(index);
}
inline ::Protocol::Protobuf::RiskRuleWarningQuotaModel* RiskRuleWarningSnapshot::add_riskrulewarningquotamodel() {
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningQuotaModel)
  return riskrulewarningquotamodel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningQuotaModel >&
RiskRuleWarningSnapshot::riskrulewarningquotamodel() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningQuotaModel)
  return riskrulewarningquotamodel_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningQuotaModel >*
RiskRuleWarningSnapshot::mutable_riskrulewarningquotamodel() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningQuotaModel)
  return &riskrulewarningquotamodel_;
}

// repeated .Protocol.Protobuf.RiskRuleWarningTradingResult riskRuleWarningTradingResult = 10;
inline int RiskRuleWarningSnapshot::riskrulewarningtradingresult_size() const {
  return riskrulewarningtradingresult_.size();
}
inline void RiskRuleWarningSnapshot::clear_riskrulewarningtradingresult() {
  riskrulewarningtradingresult_.Clear();
}
inline const ::Protocol::Protobuf::RiskRuleWarningTradingResult& RiskRuleWarningSnapshot::riskrulewarningtradingresult(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningTradingResult)
  return riskrulewarningtradingresult_.Get(index);
}
inline ::Protocol::Protobuf::RiskRuleWarningTradingResult* RiskRuleWarningSnapshot::mutable_riskrulewarningtradingresult(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningTradingResult)
  return riskrulewarningtradingresult_.Mutable(index);
}
inline ::Protocol::Protobuf::RiskRuleWarningTradingResult* RiskRuleWarningSnapshot::add_riskrulewarningtradingresult() {
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningTradingResult)
  return riskrulewarningtradingresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningTradingResult >&
RiskRuleWarningSnapshot::riskrulewarningtradingresult() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningTradingResult)
  return riskrulewarningtradingresult_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::Protobuf::RiskRuleWarningTradingResult >*
RiskRuleWarningSnapshot::mutable_riskrulewarningtradingresult() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.RiskRuleWarningSnapshot.riskRuleWarningTradingResult)
  return &riskrulewarningtradingresult_;
}

// -------------------------------------------------------------------

// RiskRuleWarningOrderInfo

// required string stkId = 1;
inline bool RiskRuleWarningOrderInfo::has_stkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_stkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskRuleWarningOrderInfo::clear_has_stkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskRuleWarningOrderInfo::clear_stkid() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_->clear();
  }
  clear_has_stkid();
}
inline const ::std::string& RiskRuleWarningOrderInfo::stkid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.stkId)
  return *stkid_;
}
inline void RiskRuleWarningOrderInfo::set_stkid(const ::std::string& value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.stkId)
}
inline void RiskRuleWarningOrderInfo::set_stkid(const char* value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOrderInfo.stkId)
}
inline void RiskRuleWarningOrderInfo::set_stkid(const char* value, size_t size) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOrderInfo.stkId)
}
inline ::std::string* RiskRuleWarningOrderInfo::mutable_stkid() {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOrderInfo.stkId)
  return stkid_;
}
inline ::std::string* RiskRuleWarningOrderInfo::release_stkid() {
  clear_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stkid_;
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOrderInfo::set_allocated_stkid(::std::string* stkid) {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (stkid) {
    set_has_stkid();
    stkid_ = stkid;
  } else {
    clear_has_stkid();
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOrderInfo.stkId)
}

// required string exchangeId = 2;
inline bool RiskRuleWarningOrderInfo::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskRuleWarningOrderInfo::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskRuleWarningOrderInfo::clear_exchangeid() {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_->clear();
  }
  clear_has_exchangeid();
}
inline const ::std::string& RiskRuleWarningOrderInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.exchangeId)
  return *exchangeid_;
}
inline void RiskRuleWarningOrderInfo::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.exchangeId)
}
inline void RiskRuleWarningOrderInfo::set_exchangeid(const char* value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOrderInfo.exchangeId)
}
inline void RiskRuleWarningOrderInfo::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOrderInfo.exchangeId)
}
inline ::std::string* RiskRuleWarningOrderInfo::mutable_exchangeid() {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOrderInfo.exchangeId)
  return exchangeid_;
}
inline ::std::string* RiskRuleWarningOrderInfo::release_exchangeid() {
  clear_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exchangeid_;
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOrderInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (exchangeid) {
    set_has_exchangeid();
    exchangeid_ = exchangeid;
  } else {
    clear_has_exchangeid();
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOrderInfo.exchangeId)
}

// required string bsFlag = 3;
inline bool RiskRuleWarningOrderInfo::has_bsflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_bsflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskRuleWarningOrderInfo::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskRuleWarningOrderInfo::clear_bsflag() {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_->clear();
  }
  clear_has_bsflag();
}
inline const ::std::string& RiskRuleWarningOrderInfo::bsflag() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.bsFlag)
  return *bsflag_;
}
inline void RiskRuleWarningOrderInfo::set_bsflag(const ::std::string& value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.bsFlag)
}
inline void RiskRuleWarningOrderInfo::set_bsflag(const char* value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOrderInfo.bsFlag)
}
inline void RiskRuleWarningOrderInfo::set_bsflag(const char* value, size_t size) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOrderInfo.bsFlag)
}
inline ::std::string* RiskRuleWarningOrderInfo::mutable_bsflag() {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOrderInfo.bsFlag)
  return bsflag_;
}
inline ::std::string* RiskRuleWarningOrderInfo::release_bsflag() {
  clear_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bsflag_;
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOrderInfo::set_allocated_bsflag(::std::string* bsflag) {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (bsflag) {
    set_has_bsflag();
    bsflag_ = bsflag;
  } else {
    clear_has_bsflag();
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOrderInfo.bsFlag)
}

// required string contractNum = 4;
inline bool RiskRuleWarningOrderInfo::has_contractnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_contractnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiskRuleWarningOrderInfo::clear_has_contractnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiskRuleWarningOrderInfo::clear_contractnum() {
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_->clear();
  }
  clear_has_contractnum();
}
inline const ::std::string& RiskRuleWarningOrderInfo::contractnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.contractNum)
  return *contractnum_;
}
inline void RiskRuleWarningOrderInfo::set_contractnum(const ::std::string& value) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.contractNum)
}
inline void RiskRuleWarningOrderInfo::set_contractnum(const char* value) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOrderInfo.contractNum)
}
inline void RiskRuleWarningOrderInfo::set_contractnum(const char* value, size_t size) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOrderInfo.contractNum)
}
inline ::std::string* RiskRuleWarningOrderInfo::mutable_contractnum() {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOrderInfo.contractNum)
  return contractnum_;
}
inline ::std::string* RiskRuleWarningOrderInfo::release_contractnum() {
  clear_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractnum_;
    contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOrderInfo::set_allocated_contractnum(::std::string* contractnum) {
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnum_;
  }
  if (contractnum) {
    set_has_contractnum();
    contractnum_ = contractnum;
  } else {
    clear_has_contractnum();
    contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOrderInfo.contractNum)
}

// required string acctId = 5;
inline bool RiskRuleWarningOrderInfo::has_acctid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_acctid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiskRuleWarningOrderInfo::clear_has_acctid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiskRuleWarningOrderInfo::clear_acctid() {
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_->clear();
  }
  clear_has_acctid();
}
inline const ::std::string& RiskRuleWarningOrderInfo::acctid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.acctId)
  return *acctid_;
}
inline void RiskRuleWarningOrderInfo::set_acctid(const ::std::string& value) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.acctId)
}
inline void RiskRuleWarningOrderInfo::set_acctid(const char* value) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOrderInfo.acctId)
}
inline void RiskRuleWarningOrderInfo::set_acctid(const char* value, size_t size) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOrderInfo.acctId)
}
inline ::std::string* RiskRuleWarningOrderInfo::mutable_acctid() {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOrderInfo.acctId)
  return acctid_;
}
inline ::std::string* RiskRuleWarningOrderInfo::release_acctid() {
  clear_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = acctid_;
    acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOrderInfo::set_allocated_acctid(::std::string* acctid) {
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acctid_;
  }
  if (acctid) {
    set_has_acctid();
    acctid_ = acctid;
  } else {
    clear_has_acctid();
    acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOrderInfo.acctId)
}

// required string priceType = 6;
inline bool RiskRuleWarningOrderInfo::has_pricetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_pricetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RiskRuleWarningOrderInfo::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RiskRuleWarningOrderInfo::clear_pricetype() {
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_->clear();
  }
  clear_has_pricetype();
}
inline const ::std::string& RiskRuleWarningOrderInfo::pricetype() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.priceType)
  return *pricetype_;
}
inline void RiskRuleWarningOrderInfo::set_pricetype(const ::std::string& value) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.priceType)
}
inline void RiskRuleWarningOrderInfo::set_pricetype(const char* value) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOrderInfo.priceType)
}
inline void RiskRuleWarningOrderInfo::set_pricetype(const char* value, size_t size) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOrderInfo.priceType)
}
inline ::std::string* RiskRuleWarningOrderInfo::mutable_pricetype() {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOrderInfo.priceType)
  return pricetype_;
}
inline ::std::string* RiskRuleWarningOrderInfo::release_pricetype() {
  clear_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pricetype_;
    pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOrderInfo::set_allocated_pricetype(::std::string* pricetype) {
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricetype_;
  }
  if (pricetype) {
    set_has_pricetype();
    pricetype_ = pricetype;
  } else {
    clear_has_pricetype();
    pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOrderInfo.priceType)
}

// required string accountGroupId = 7;
inline bool RiskRuleWarningOrderInfo::has_accountgroupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_accountgroupid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiskRuleWarningOrderInfo::clear_has_accountgroupid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiskRuleWarningOrderInfo::clear_accountgroupid() {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_->clear();
  }
  clear_has_accountgroupid();
}
inline const ::std::string& RiskRuleWarningOrderInfo::accountgroupid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.accountGroupId)
  return *accountgroupid_;
}
inline void RiskRuleWarningOrderInfo::set_accountgroupid(const ::std::string& value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.accountGroupId)
}
inline void RiskRuleWarningOrderInfo::set_accountgroupid(const char* value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOrderInfo.accountGroupId)
}
inline void RiskRuleWarningOrderInfo::set_accountgroupid(const char* value, size_t size) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOrderInfo.accountGroupId)
}
inline ::std::string* RiskRuleWarningOrderInfo::mutable_accountgroupid() {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOrderInfo.accountGroupId)
  return accountgroupid_;
}
inline ::std::string* RiskRuleWarningOrderInfo::release_accountgroupid() {
  clear_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountgroupid_;
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOrderInfo::set_allocated_accountgroupid(::std::string* accountgroupid) {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (accountgroupid) {
    set_has_accountgroupid();
    accountgroupid_ = accountgroupid;
  } else {
    clear_has_accountgroupid();
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOrderInfo.accountGroupId)
}

// required string groupType = 8;
inline bool RiskRuleWarningOrderInfo::has_grouptype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_grouptype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RiskRuleWarningOrderInfo::clear_has_grouptype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RiskRuleWarningOrderInfo::clear_grouptype() {
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_->clear();
  }
  clear_has_grouptype();
}
inline const ::std::string& RiskRuleWarningOrderInfo::grouptype() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.groupType)
  return *grouptype_;
}
inline void RiskRuleWarningOrderInfo::set_grouptype(const ::std::string& value) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.groupType)
}
inline void RiskRuleWarningOrderInfo::set_grouptype(const char* value) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOrderInfo.groupType)
}
inline void RiskRuleWarningOrderInfo::set_grouptype(const char* value, size_t size) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOrderInfo.groupType)
}
inline ::std::string* RiskRuleWarningOrderInfo::mutable_grouptype() {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOrderInfo.groupType)
  return grouptype_;
}
inline ::std::string* RiskRuleWarningOrderInfo::release_grouptype() {
  clear_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = grouptype_;
    grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOrderInfo::set_allocated_grouptype(::std::string* grouptype) {
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grouptype_;
  }
  if (grouptype) {
    set_has_grouptype();
    grouptype_ = grouptype;
  } else {
    clear_has_grouptype();
    grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOrderInfo.groupType)
}

// required int64 orderTime = 9;
inline bool RiskRuleWarningOrderInfo::has_ordertime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_ordertime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RiskRuleWarningOrderInfo::clear_has_ordertime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RiskRuleWarningOrderInfo::clear_ordertime() {
  ordertime_ = GOOGLE_LONGLONG(0);
  clear_has_ordertime();
}
inline ::google::protobuf::int64 RiskRuleWarningOrderInfo::ordertime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.orderTime)
  return ordertime_;
}
inline void RiskRuleWarningOrderInfo::set_ordertime(::google::protobuf::int64 value) {
  set_has_ordertime();
  ordertime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.orderTime)
}

// required int32 orderQty = 10;
inline bool RiskRuleWarningOrderInfo::has_orderqty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_orderqty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RiskRuleWarningOrderInfo::clear_has_orderqty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RiskRuleWarningOrderInfo::clear_orderqty() {
  orderqty_ = 0;
  clear_has_orderqty();
}
inline ::google::protobuf::int32 RiskRuleWarningOrderInfo::orderqty() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.orderQty)
  return orderqty_;
}
inline void RiskRuleWarningOrderInfo::set_orderqty(::google::protobuf::int32 value) {
  set_has_orderqty();
  orderqty_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.orderQty)
}

// required double orderPrice = 11;
inline bool RiskRuleWarningOrderInfo::has_orderprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_orderprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RiskRuleWarningOrderInfo::clear_has_orderprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RiskRuleWarningOrderInfo::clear_orderprice() {
  orderprice_ = 0;
  clear_has_orderprice();
}
inline double RiskRuleWarningOrderInfo::orderprice() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.orderPrice)
  return orderprice_;
}
inline void RiskRuleWarningOrderInfo::set_orderprice(double value) {
  set_has_orderprice();
  orderprice_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.orderPrice)
}

// required double orderAmount = 12;
inline bool RiskRuleWarningOrderInfo::has_orderamount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RiskRuleWarningOrderInfo::set_has_orderamount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RiskRuleWarningOrderInfo::clear_has_orderamount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RiskRuleWarningOrderInfo::clear_orderamount() {
  orderamount_ = 0;
  clear_has_orderamount();
}
inline double RiskRuleWarningOrderInfo::orderamount() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOrderInfo.orderAmount)
  return orderamount_;
}
inline void RiskRuleWarningOrderInfo::set_orderamount(double value) {
  set_has_orderamount();
  orderamount_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOrderInfo.orderAmount)
}

// -------------------------------------------------------------------

// RiskRuleWarningOpenOrder

// required string stkId = 1;
inline bool RiskRuleWarningOpenOrder::has_stkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_stkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskRuleWarningOpenOrder::clear_has_stkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskRuleWarningOpenOrder::clear_stkid() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_->clear();
  }
  clear_has_stkid();
}
inline const ::std::string& RiskRuleWarningOpenOrder::stkid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.stkId)
  return *stkid_;
}
inline void RiskRuleWarningOpenOrder::set_stkid(const ::std::string& value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.stkId)
}
inline void RiskRuleWarningOpenOrder::set_stkid(const char* value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOpenOrder.stkId)
}
inline void RiskRuleWarningOpenOrder::set_stkid(const char* value, size_t size) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOpenOrder.stkId)
}
inline ::std::string* RiskRuleWarningOpenOrder::mutable_stkid() {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOpenOrder.stkId)
  return stkid_;
}
inline ::std::string* RiskRuleWarningOpenOrder::release_stkid() {
  clear_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stkid_;
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOpenOrder::set_allocated_stkid(::std::string* stkid) {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (stkid) {
    set_has_stkid();
    stkid_ = stkid;
  } else {
    clear_has_stkid();
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOpenOrder.stkId)
}

// required string exchangeId = 2;
inline bool RiskRuleWarningOpenOrder::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskRuleWarningOpenOrder::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskRuleWarningOpenOrder::clear_exchangeid() {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_->clear();
  }
  clear_has_exchangeid();
}
inline const ::std::string& RiskRuleWarningOpenOrder::exchangeid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.exchangeId)
  return *exchangeid_;
}
inline void RiskRuleWarningOpenOrder::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.exchangeId)
}
inline void RiskRuleWarningOpenOrder::set_exchangeid(const char* value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOpenOrder.exchangeId)
}
inline void RiskRuleWarningOpenOrder::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOpenOrder.exchangeId)
}
inline ::std::string* RiskRuleWarningOpenOrder::mutable_exchangeid() {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOpenOrder.exchangeId)
  return exchangeid_;
}
inline ::std::string* RiskRuleWarningOpenOrder::release_exchangeid() {
  clear_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exchangeid_;
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOpenOrder::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (exchangeid) {
    set_has_exchangeid();
    exchangeid_ = exchangeid;
  } else {
    clear_has_exchangeid();
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOpenOrder.exchangeId)
}

// required string bsFlag = 3;
inline bool RiskRuleWarningOpenOrder::has_bsflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_bsflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskRuleWarningOpenOrder::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskRuleWarningOpenOrder::clear_bsflag() {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_->clear();
  }
  clear_has_bsflag();
}
inline const ::std::string& RiskRuleWarningOpenOrder::bsflag() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.bsFlag)
  return *bsflag_;
}
inline void RiskRuleWarningOpenOrder::set_bsflag(const ::std::string& value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.bsFlag)
}
inline void RiskRuleWarningOpenOrder::set_bsflag(const char* value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOpenOrder.bsFlag)
}
inline void RiskRuleWarningOpenOrder::set_bsflag(const char* value, size_t size) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOpenOrder.bsFlag)
}
inline ::std::string* RiskRuleWarningOpenOrder::mutable_bsflag() {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOpenOrder.bsFlag)
  return bsflag_;
}
inline ::std::string* RiskRuleWarningOpenOrder::release_bsflag() {
  clear_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bsflag_;
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOpenOrder::set_allocated_bsflag(::std::string* bsflag) {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (bsflag) {
    set_has_bsflag();
    bsflag_ = bsflag;
  } else {
    clear_has_bsflag();
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOpenOrder.bsFlag)
}

// required string contractNum = 4;
inline bool RiskRuleWarningOpenOrder::has_contractnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_contractnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiskRuleWarningOpenOrder::clear_has_contractnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiskRuleWarningOpenOrder::clear_contractnum() {
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_->clear();
  }
  clear_has_contractnum();
}
inline const ::std::string& RiskRuleWarningOpenOrder::contractnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.contractNum)
  return *contractnum_;
}
inline void RiskRuleWarningOpenOrder::set_contractnum(const ::std::string& value) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.contractNum)
}
inline void RiskRuleWarningOpenOrder::set_contractnum(const char* value) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOpenOrder.contractNum)
}
inline void RiskRuleWarningOpenOrder::set_contractnum(const char* value, size_t size) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOpenOrder.contractNum)
}
inline ::std::string* RiskRuleWarningOpenOrder::mutable_contractnum() {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOpenOrder.contractNum)
  return contractnum_;
}
inline ::std::string* RiskRuleWarningOpenOrder::release_contractnum() {
  clear_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractnum_;
    contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOpenOrder::set_allocated_contractnum(::std::string* contractnum) {
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnum_;
  }
  if (contractnum) {
    set_has_contractnum();
    contractnum_ = contractnum;
  } else {
    clear_has_contractnum();
    contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOpenOrder.contractNum)
}

// required string acctId = 5;
inline bool RiskRuleWarningOpenOrder::has_acctid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_acctid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiskRuleWarningOpenOrder::clear_has_acctid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiskRuleWarningOpenOrder::clear_acctid() {
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_->clear();
  }
  clear_has_acctid();
}
inline const ::std::string& RiskRuleWarningOpenOrder::acctid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.acctId)
  return *acctid_;
}
inline void RiskRuleWarningOpenOrder::set_acctid(const ::std::string& value) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.acctId)
}
inline void RiskRuleWarningOpenOrder::set_acctid(const char* value) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOpenOrder.acctId)
}
inline void RiskRuleWarningOpenOrder::set_acctid(const char* value, size_t size) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOpenOrder.acctId)
}
inline ::std::string* RiskRuleWarningOpenOrder::mutable_acctid() {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOpenOrder.acctId)
  return acctid_;
}
inline ::std::string* RiskRuleWarningOpenOrder::release_acctid() {
  clear_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = acctid_;
    acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOpenOrder::set_allocated_acctid(::std::string* acctid) {
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acctid_;
  }
  if (acctid) {
    set_has_acctid();
    acctid_ = acctid;
  } else {
    clear_has_acctid();
    acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOpenOrder.acctId)
}

// required string priceType = 6;
inline bool RiskRuleWarningOpenOrder::has_pricetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_pricetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RiskRuleWarningOpenOrder::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RiskRuleWarningOpenOrder::clear_pricetype() {
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_->clear();
  }
  clear_has_pricetype();
}
inline const ::std::string& RiskRuleWarningOpenOrder::pricetype() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.priceType)
  return *pricetype_;
}
inline void RiskRuleWarningOpenOrder::set_pricetype(const ::std::string& value) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.priceType)
}
inline void RiskRuleWarningOpenOrder::set_pricetype(const char* value) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOpenOrder.priceType)
}
inline void RiskRuleWarningOpenOrder::set_pricetype(const char* value, size_t size) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOpenOrder.priceType)
}
inline ::std::string* RiskRuleWarningOpenOrder::mutable_pricetype() {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOpenOrder.priceType)
  return pricetype_;
}
inline ::std::string* RiskRuleWarningOpenOrder::release_pricetype() {
  clear_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pricetype_;
    pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOpenOrder::set_allocated_pricetype(::std::string* pricetype) {
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricetype_;
  }
  if (pricetype) {
    set_has_pricetype();
    pricetype_ = pricetype;
  } else {
    clear_has_pricetype();
    pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOpenOrder.priceType)
}

// required string accountGroupId = 7;
inline bool RiskRuleWarningOpenOrder::has_accountgroupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_accountgroupid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiskRuleWarningOpenOrder::clear_has_accountgroupid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiskRuleWarningOpenOrder::clear_accountgroupid() {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_->clear();
  }
  clear_has_accountgroupid();
}
inline const ::std::string& RiskRuleWarningOpenOrder::accountgroupid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.accountGroupId)
  return *accountgroupid_;
}
inline void RiskRuleWarningOpenOrder::set_accountgroupid(const ::std::string& value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.accountGroupId)
}
inline void RiskRuleWarningOpenOrder::set_accountgroupid(const char* value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOpenOrder.accountGroupId)
}
inline void RiskRuleWarningOpenOrder::set_accountgroupid(const char* value, size_t size) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOpenOrder.accountGroupId)
}
inline ::std::string* RiskRuleWarningOpenOrder::mutable_accountgroupid() {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOpenOrder.accountGroupId)
  return accountgroupid_;
}
inline ::std::string* RiskRuleWarningOpenOrder::release_accountgroupid() {
  clear_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountgroupid_;
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOpenOrder::set_allocated_accountgroupid(::std::string* accountgroupid) {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (accountgroupid) {
    set_has_accountgroupid();
    accountgroupid_ = accountgroupid;
  } else {
    clear_has_accountgroupid();
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOpenOrder.accountGroupId)
}

// required string groupType = 8;
inline bool RiskRuleWarningOpenOrder::has_grouptype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_grouptype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RiskRuleWarningOpenOrder::clear_has_grouptype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RiskRuleWarningOpenOrder::clear_grouptype() {
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_->clear();
  }
  clear_has_grouptype();
}
inline const ::std::string& RiskRuleWarningOpenOrder::grouptype() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.groupType)
  return *grouptype_;
}
inline void RiskRuleWarningOpenOrder::set_grouptype(const ::std::string& value) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.groupType)
}
inline void RiskRuleWarningOpenOrder::set_grouptype(const char* value) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningOpenOrder.groupType)
}
inline void RiskRuleWarningOpenOrder::set_grouptype(const char* value, size_t size) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningOpenOrder.groupType)
}
inline ::std::string* RiskRuleWarningOpenOrder::mutable_grouptype() {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningOpenOrder.groupType)
  return grouptype_;
}
inline ::std::string* RiskRuleWarningOpenOrder::release_grouptype() {
  clear_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = grouptype_;
    grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningOpenOrder::set_allocated_grouptype(::std::string* grouptype) {
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grouptype_;
  }
  if (grouptype) {
    set_has_grouptype();
    grouptype_ = grouptype;
  } else {
    clear_has_grouptype();
    grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningOpenOrder.groupType)
}

// required int64 orderTime = 9;
inline bool RiskRuleWarningOpenOrder::has_ordertime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_ordertime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RiskRuleWarningOpenOrder::clear_has_ordertime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RiskRuleWarningOpenOrder::clear_ordertime() {
  ordertime_ = GOOGLE_LONGLONG(0);
  clear_has_ordertime();
}
inline ::google::protobuf::int64 RiskRuleWarningOpenOrder::ordertime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.orderTime)
  return ordertime_;
}
inline void RiskRuleWarningOpenOrder::set_ordertime(::google::protobuf::int64 value) {
  set_has_ordertime();
  ordertime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.orderTime)
}

// required int64 orderQty = 10;
inline bool RiskRuleWarningOpenOrder::has_orderqty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_orderqty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RiskRuleWarningOpenOrder::clear_has_orderqty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RiskRuleWarningOpenOrder::clear_orderqty() {
  orderqty_ = GOOGLE_LONGLONG(0);
  clear_has_orderqty();
}
inline ::google::protobuf::int64 RiskRuleWarningOpenOrder::orderqty() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.orderQty)
  return orderqty_;
}
inline void RiskRuleWarningOpenOrder::set_orderqty(::google::protobuf::int64 value) {
  set_has_orderqty();
  orderqty_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.orderQty)
}

// required double orderPrice = 11;
inline bool RiskRuleWarningOpenOrder::has_orderprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_orderprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RiskRuleWarningOpenOrder::clear_has_orderprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RiskRuleWarningOpenOrder::clear_orderprice() {
  orderprice_ = 0;
  clear_has_orderprice();
}
inline double RiskRuleWarningOpenOrder::orderprice() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.orderPrice)
  return orderprice_;
}
inline void RiskRuleWarningOpenOrder::set_orderprice(double value) {
  set_has_orderprice();
  orderprice_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.orderPrice)
}

// required double orderAmount = 12;
inline bool RiskRuleWarningOpenOrder::has_orderamount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_orderamount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RiskRuleWarningOpenOrder::clear_has_orderamount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RiskRuleWarningOpenOrder::clear_orderamount() {
  orderamount_ = 0;
  clear_has_orderamount();
}
inline double RiskRuleWarningOpenOrder::orderamount() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.orderAmount)
  return orderamount_;
}
inline void RiskRuleWarningOpenOrder::set_orderamount(double value) {
  set_has_orderamount();
  orderamount_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.orderAmount)
}

// required int64 withdrawQty = 13;
inline bool RiskRuleWarningOpenOrder::has_withdrawqty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_withdrawqty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RiskRuleWarningOpenOrder::clear_has_withdrawqty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RiskRuleWarningOpenOrder::clear_withdrawqty() {
  withdrawqty_ = GOOGLE_LONGLONG(0);
  clear_has_withdrawqty();
}
inline ::google::protobuf::int64 RiskRuleWarningOpenOrder::withdrawqty() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.withdrawQty)
  return withdrawqty_;
}
inline void RiskRuleWarningOpenOrder::set_withdrawqty(::google::protobuf::int64 value) {
  set_has_withdrawqty();
  withdrawqty_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.withdrawQty)
}

// required double withdrawAmt = 14;
inline bool RiskRuleWarningOpenOrder::has_withdrawamt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_withdrawamt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RiskRuleWarningOpenOrder::clear_has_withdrawamt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RiskRuleWarningOpenOrder::clear_withdrawamt() {
  withdrawamt_ = 0;
  clear_has_withdrawamt();
}
inline double RiskRuleWarningOpenOrder::withdrawamt() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.withdrawAmt)
  return withdrawamt_;
}
inline void RiskRuleWarningOpenOrder::set_withdrawamt(double value) {
  set_has_withdrawamt();
  withdrawamt_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.withdrawAmt)
}

// required int64 knockQty = 15;
inline bool RiskRuleWarningOpenOrder::has_knockqty() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_knockqty() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RiskRuleWarningOpenOrder::clear_has_knockqty() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RiskRuleWarningOpenOrder::clear_knockqty() {
  knockqty_ = GOOGLE_LONGLONG(0);
  clear_has_knockqty();
}
inline ::google::protobuf::int64 RiskRuleWarningOpenOrder::knockqty() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.knockQty)
  return knockqty_;
}
inline void RiskRuleWarningOpenOrder::set_knockqty(::google::protobuf::int64 value) {
  set_has_knockqty();
  knockqty_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.knockQty)
}

// required double knockAmt = 16;
inline bool RiskRuleWarningOpenOrder::has_knockamt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_knockamt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RiskRuleWarningOpenOrder::clear_has_knockamt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RiskRuleWarningOpenOrder::clear_knockamt() {
  knockamt_ = 0;
  clear_has_knockamt();
}
inline double RiskRuleWarningOpenOrder::knockamt() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.knockAmt)
  return knockamt_;
}
inline void RiskRuleWarningOpenOrder::set_knockamt(double value) {
  set_has_knockamt();
  knockamt_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.knockAmt)
}

// required double reckoningAmt = 17;
inline bool RiskRuleWarningOpenOrder::has_reckoningamt() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RiskRuleWarningOpenOrder::set_has_reckoningamt() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RiskRuleWarningOpenOrder::clear_has_reckoningamt() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RiskRuleWarningOpenOrder::clear_reckoningamt() {
  reckoningamt_ = 0;
  clear_has_reckoningamt();
}
inline double RiskRuleWarningOpenOrder::reckoningamt() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningOpenOrder.reckoningAmt)
  return reckoningamt_;
}
inline void RiskRuleWarningOpenOrder::set_reckoningamt(double value) {
  set_has_reckoningamt();
  reckoningamt_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningOpenOrder.reckoningAmt)
}

// -------------------------------------------------------------------

// RiskRuleWarningQuotaModel

// required string stkId = 1;
inline bool RiskRuleWarningQuotaModel::has_stkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_stkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskRuleWarningQuotaModel::clear_has_stkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskRuleWarningQuotaModel::clear_stkid() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_->clear();
  }
  clear_has_stkid();
}
inline const ::std::string& RiskRuleWarningQuotaModel::stkid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.stkId)
  return *stkid_;
}
inline void RiskRuleWarningQuotaModel::set_stkid(const ::std::string& value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.stkId)
}
inline void RiskRuleWarningQuotaModel::set_stkid(const char* value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningQuotaModel.stkId)
}
inline void RiskRuleWarningQuotaModel::set_stkid(const char* value, size_t size) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningQuotaModel.stkId)
}
inline ::std::string* RiskRuleWarningQuotaModel::mutable_stkid() {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningQuotaModel.stkId)
  return stkid_;
}
inline ::std::string* RiskRuleWarningQuotaModel::release_stkid() {
  clear_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stkid_;
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningQuotaModel::set_allocated_stkid(::std::string* stkid) {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (stkid) {
    set_has_stkid();
    stkid_ = stkid;
  } else {
    clear_has_stkid();
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningQuotaModel.stkId)
}

// required string exchangeId = 2;
inline bool RiskRuleWarningQuotaModel::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskRuleWarningQuotaModel::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskRuleWarningQuotaModel::clear_exchangeid() {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_->clear();
  }
  clear_has_exchangeid();
}
inline const ::std::string& RiskRuleWarningQuotaModel::exchangeid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.exchangeId)
  return *exchangeid_;
}
inline void RiskRuleWarningQuotaModel::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.exchangeId)
}
inline void RiskRuleWarningQuotaModel::set_exchangeid(const char* value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningQuotaModel.exchangeId)
}
inline void RiskRuleWarningQuotaModel::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningQuotaModel.exchangeId)
}
inline ::std::string* RiskRuleWarningQuotaModel::mutable_exchangeid() {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningQuotaModel.exchangeId)
  return exchangeid_;
}
inline ::std::string* RiskRuleWarningQuotaModel::release_exchangeid() {
  clear_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exchangeid_;
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningQuotaModel::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (exchangeid) {
    set_has_exchangeid();
    exchangeid_ = exchangeid;
  } else {
    clear_has_exchangeid();
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningQuotaModel.exchangeId)
}

// required double fLast = 3;
inline bool RiskRuleWarningQuotaModel::has_flast() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_flast() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskRuleWarningQuotaModel::clear_has_flast() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskRuleWarningQuotaModel::clear_flast() {
  flast_ = 0;
  clear_has_flast();
}
inline double RiskRuleWarningQuotaModel::flast() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.fLast)
  return flast_;
}
inline void RiskRuleWarningQuotaModel::set_flast(double value) {
  set_has_flast();
  flast_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.fLast)
}

// repeated double fAskPrice = 4 [packed = true];
inline int RiskRuleWarningQuotaModel::faskprice_size() const {
  return faskprice_.size();
}
inline void RiskRuleWarningQuotaModel::clear_faskprice() {
  faskprice_.Clear();
}
inline double RiskRuleWarningQuotaModel::faskprice(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.fAskPrice)
  return faskprice_.Get(index);
}
inline void RiskRuleWarningQuotaModel::set_faskprice(int index, double value) {
  faskprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.fAskPrice)
}
inline void RiskRuleWarningQuotaModel::add_faskprice(double value) {
  faskprice_.Add(value);
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.RiskRuleWarningQuotaModel.fAskPrice)
}
inline const ::google::protobuf::RepeatedField< double >&
RiskRuleWarningQuotaModel::faskprice() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.RiskRuleWarningQuotaModel.fAskPrice)
  return faskprice_;
}
inline ::google::protobuf::RepeatedField< double >*
RiskRuleWarningQuotaModel::mutable_faskprice() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.RiskRuleWarningQuotaModel.fAskPrice)
  return &faskprice_;
}

// repeated int32 iAskVol = 5 [packed = true];
inline int RiskRuleWarningQuotaModel::iaskvol_size() const {
  return iaskvol_.size();
}
inline void RiskRuleWarningQuotaModel::clear_iaskvol() {
  iaskvol_.Clear();
}
inline ::google::protobuf::int32 RiskRuleWarningQuotaModel::iaskvol(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.iAskVol)
  return iaskvol_.Get(index);
}
inline void RiskRuleWarningQuotaModel::set_iaskvol(int index, ::google::protobuf::int32 value) {
  iaskvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.iAskVol)
}
inline void RiskRuleWarningQuotaModel::add_iaskvol(::google::protobuf::int32 value) {
  iaskvol_.Add(value);
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.RiskRuleWarningQuotaModel.iAskVol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RiskRuleWarningQuotaModel::iaskvol() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.RiskRuleWarningQuotaModel.iAskVol)
  return iaskvol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RiskRuleWarningQuotaModel::mutable_iaskvol() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.RiskRuleWarningQuotaModel.iAskVol)
  return &iaskvol_;
}

// repeated double fBidPrice = 6 [packed = true];
inline int RiskRuleWarningQuotaModel::fbidprice_size() const {
  return fbidprice_.size();
}
inline void RiskRuleWarningQuotaModel::clear_fbidprice() {
  fbidprice_.Clear();
}
inline double RiskRuleWarningQuotaModel::fbidprice(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.fBidPrice)
  return fbidprice_.Get(index);
}
inline void RiskRuleWarningQuotaModel::set_fbidprice(int index, double value) {
  fbidprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.fBidPrice)
}
inline void RiskRuleWarningQuotaModel::add_fbidprice(double value) {
  fbidprice_.Add(value);
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.RiskRuleWarningQuotaModel.fBidPrice)
}
inline const ::google::protobuf::RepeatedField< double >&
RiskRuleWarningQuotaModel::fbidprice() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.RiskRuleWarningQuotaModel.fBidPrice)
  return fbidprice_;
}
inline ::google::protobuf::RepeatedField< double >*
RiskRuleWarningQuotaModel::mutable_fbidprice() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.RiskRuleWarningQuotaModel.fBidPrice)
  return &fbidprice_;
}

// repeated int32 iBidVol = 7 [packed = true];
inline int RiskRuleWarningQuotaModel::ibidvol_size() const {
  return ibidvol_.size();
}
inline void RiskRuleWarningQuotaModel::clear_ibidvol() {
  ibidvol_.Clear();
}
inline ::google::protobuf::int32 RiskRuleWarningQuotaModel::ibidvol(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.iBidVol)
  return ibidvol_.Get(index);
}
inline void RiskRuleWarningQuotaModel::set_ibidvol(int index, ::google::protobuf::int32 value) {
  ibidvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.iBidVol)
}
inline void RiskRuleWarningQuotaModel::add_ibidvol(::google::protobuf::int32 value) {
  ibidvol_.Add(value);
  // @@protoc_insertion_point(field_add:Protocol.Protobuf.RiskRuleWarningQuotaModel.iBidVol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RiskRuleWarningQuotaModel::ibidvol() const {
  // @@protoc_insertion_point(field_list:Protocol.Protobuf.RiskRuleWarningQuotaModel.iBidVol)
  return ibidvol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RiskRuleWarningQuotaModel::mutable_ibidvol() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Protobuf.RiskRuleWarningQuotaModel.iBidVol)
  return &ibidvol_;
}

// optional int64 iTotalAskQty = 8;
inline bool RiskRuleWarningQuotaModel::has_itotalaskqty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_itotalaskqty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RiskRuleWarningQuotaModel::clear_has_itotalaskqty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RiskRuleWarningQuotaModel::clear_itotalaskqty() {
  itotalaskqty_ = GOOGLE_LONGLONG(0);
  clear_has_itotalaskqty();
}
inline ::google::protobuf::int64 RiskRuleWarningQuotaModel::itotalaskqty() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.iTotalAskQty)
  return itotalaskqty_;
}
inline void RiskRuleWarningQuotaModel::set_itotalaskqty(::google::protobuf::int64 value) {
  set_has_itotalaskqty();
  itotalaskqty_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.iTotalAskQty)
}

// optional int64 iTotalBidQty = 9;
inline bool RiskRuleWarningQuotaModel::has_itotalbidqty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_itotalbidqty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RiskRuleWarningQuotaModel::clear_has_itotalbidqty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RiskRuleWarningQuotaModel::clear_itotalbidqty() {
  itotalbidqty_ = GOOGLE_LONGLONG(0);
  clear_has_itotalbidqty();
}
inline ::google::protobuf::int64 RiskRuleWarningQuotaModel::itotalbidqty() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.iTotalBidQty)
  return itotalbidqty_;
}
inline void RiskRuleWarningQuotaModel::set_itotalbidqty(::google::protobuf::int64 value) {
  set_has_itotalbidqty();
  itotalbidqty_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.iTotalBidQty)
}

// optional double fHighLimited = 10;
inline bool RiskRuleWarningQuotaModel::has_fhighlimited() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_fhighlimited() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RiskRuleWarningQuotaModel::clear_has_fhighlimited() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RiskRuleWarningQuotaModel::clear_fhighlimited() {
  fhighlimited_ = 0;
  clear_has_fhighlimited();
}
inline double RiskRuleWarningQuotaModel::fhighlimited() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.fHighLimited)
  return fhighlimited_;
}
inline void RiskRuleWarningQuotaModel::set_fhighlimited(double value) {
  set_has_fhighlimited();
  fhighlimited_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.fHighLimited)
}

// optional double fLowLimited = 11;
inline bool RiskRuleWarningQuotaModel::has_flowlimited() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_flowlimited() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RiskRuleWarningQuotaModel::clear_has_flowlimited() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RiskRuleWarningQuotaModel::clear_flowlimited() {
  flowlimited_ = 0;
  clear_has_flowlimited();
}
inline double RiskRuleWarningQuotaModel::flowlimited() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.fLowLimited)
  return flowlimited_;
}
inline void RiskRuleWarningQuotaModel::set_flowlimited(double value) {
  set_has_flowlimited();
  flowlimited_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.fLowLimited)
}

// optional int64 lVolume = 12;
inline bool RiskRuleWarningQuotaModel::has_lvolume() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_lvolume() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RiskRuleWarningQuotaModel::clear_has_lvolume() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RiskRuleWarningQuotaModel::clear_lvolume() {
  lvolume_ = GOOGLE_LONGLONG(0);
  clear_has_lvolume();
}
inline ::google::protobuf::int64 RiskRuleWarningQuotaModel::lvolume() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.lVolume)
  return lvolume_;
}
inline void RiskRuleWarningQuotaModel::set_lvolume(::google::protobuf::int64 value) {
  set_has_lvolume();
  lvolume_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.lVolume)
}

// required int64 quotaTime = 13;
inline bool RiskRuleWarningQuotaModel::has_quotatime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RiskRuleWarningQuotaModel::set_has_quotatime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RiskRuleWarningQuotaModel::clear_has_quotatime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RiskRuleWarningQuotaModel::clear_quotatime() {
  quotatime_ = GOOGLE_LONGLONG(0);
  clear_has_quotatime();
}
inline ::google::protobuf::int64 RiskRuleWarningQuotaModel::quotatime() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningQuotaModel.quotaTime)
  return quotatime_;
}
inline void RiskRuleWarningQuotaModel::set_quotatime(::google::protobuf::int64 value) {
  set_has_quotatime();
  quotatime_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningQuotaModel.quotaTime)
}

// -------------------------------------------------------------------

// RiskRuleWarningTradingResult

// required string stkId = 1;
inline bool RiskRuleWarningTradingResult::has_stkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_stkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskRuleWarningTradingResult::clear_has_stkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskRuleWarningTradingResult::clear_stkid() {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_->clear();
  }
  clear_has_stkid();
}
inline const ::std::string& RiskRuleWarningTradingResult::stkid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.stkId)
  return *stkid_;
}
inline void RiskRuleWarningTradingResult::set_stkid(const ::std::string& value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.stkId)
}
inline void RiskRuleWarningTradingResult::set_stkid(const char* value) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.stkId)
}
inline void RiskRuleWarningTradingResult::set_stkid(const char* value, size_t size) {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  stkid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.stkId)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_stkid() {
  set_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stkid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.stkId)
  return stkid_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_stkid() {
  clear_has_stkid();
  if (stkid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stkid_;
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_stkid(::std::string* stkid) {
  if (stkid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stkid_;
  }
  if (stkid) {
    set_has_stkid();
    stkid_ = stkid;
  } else {
    clear_has_stkid();
    stkid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.stkId)
}

// required string exchangeId = 2;
inline bool RiskRuleWarningTradingResult::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskRuleWarningTradingResult::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskRuleWarningTradingResult::clear_exchangeid() {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_->clear();
  }
  clear_has_exchangeid();
}
inline const ::std::string& RiskRuleWarningTradingResult::exchangeid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.exchangeId)
  return *exchangeid_;
}
inline void RiskRuleWarningTradingResult::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.exchangeId)
}
inline void RiskRuleWarningTradingResult::set_exchangeid(const char* value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.exchangeId)
}
inline void RiskRuleWarningTradingResult::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.exchangeId)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_exchangeid() {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.exchangeId)
  return exchangeid_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_exchangeid() {
  clear_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exchangeid_;
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (exchangeid) {
    set_has_exchangeid();
    exchangeid_ = exchangeid;
  } else {
    clear_has_exchangeid();
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.exchangeId)
}

// required string bsFlag = 3;
inline bool RiskRuleWarningTradingResult::has_bsflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_bsflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskRuleWarningTradingResult::clear_has_bsflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskRuleWarningTradingResult::clear_bsflag() {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_->clear();
  }
  clear_has_bsflag();
}
inline const ::std::string& RiskRuleWarningTradingResult::bsflag() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.bsFlag)
  return *bsflag_;
}
inline void RiskRuleWarningTradingResult::set_bsflag(const ::std::string& value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.bsFlag)
}
inline void RiskRuleWarningTradingResult::set_bsflag(const char* value) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.bsFlag)
}
inline void RiskRuleWarningTradingResult::set_bsflag(const char* value, size_t size) {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  bsflag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.bsFlag)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_bsflag() {
  set_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bsflag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.bsFlag)
  return bsflag_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_bsflag() {
  clear_has_bsflag();
  if (bsflag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bsflag_;
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_bsflag(::std::string* bsflag) {
  if (bsflag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bsflag_;
  }
  if (bsflag) {
    set_has_bsflag();
    bsflag_ = bsflag;
  } else {
    clear_has_bsflag();
    bsflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.bsFlag)
}

// required string contractNum = 4;
inline bool RiskRuleWarningTradingResult::has_contractnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_contractnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiskRuleWarningTradingResult::clear_has_contractnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiskRuleWarningTradingResult::clear_contractnum() {
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_->clear();
  }
  clear_has_contractnum();
}
inline const ::std::string& RiskRuleWarningTradingResult::contractnum() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.contractNum)
  return *contractnum_;
}
inline void RiskRuleWarningTradingResult::set_contractnum(const ::std::string& value) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.contractNum)
}
inline void RiskRuleWarningTradingResult::set_contractnum(const char* value) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.contractNum)
}
inline void RiskRuleWarningTradingResult::set_contractnum(const char* value, size_t size) {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  contractnum_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.contractNum)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_contractnum() {
  set_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnum_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.contractNum)
  return contractnum_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_contractnum() {
  clear_has_contractnum();
  if (contractnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractnum_;
    contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_contractnum(::std::string* contractnum) {
  if (contractnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnum_;
  }
  if (contractnum) {
    set_has_contractnum();
    contractnum_ = contractnum;
  } else {
    clear_has_contractnum();
    contractnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.contractNum)
}

// required string acctId = 5;
inline bool RiskRuleWarningTradingResult::has_acctid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_acctid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiskRuleWarningTradingResult::clear_has_acctid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiskRuleWarningTradingResult::clear_acctid() {
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_->clear();
  }
  clear_has_acctid();
}
inline const ::std::string& RiskRuleWarningTradingResult::acctid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.acctId)
  return *acctid_;
}
inline void RiskRuleWarningTradingResult::set_acctid(const ::std::string& value) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.acctId)
}
inline void RiskRuleWarningTradingResult::set_acctid(const char* value) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.acctId)
}
inline void RiskRuleWarningTradingResult::set_acctid(const char* value, size_t size) {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  acctid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.acctId)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_acctid() {
  set_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acctid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.acctId)
  return acctid_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_acctid() {
  clear_has_acctid();
  if (acctid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = acctid_;
    acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_acctid(::std::string* acctid) {
  if (acctid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acctid_;
  }
  if (acctid) {
    set_has_acctid();
    acctid_ = acctid;
  } else {
    clear_has_acctid();
    acctid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.acctId)
}

// required string priceType = 6;
inline bool RiskRuleWarningTradingResult::has_pricetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_pricetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RiskRuleWarningTradingResult::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RiskRuleWarningTradingResult::clear_pricetype() {
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_->clear();
  }
  clear_has_pricetype();
}
inline const ::std::string& RiskRuleWarningTradingResult::pricetype() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.priceType)
  return *pricetype_;
}
inline void RiskRuleWarningTradingResult::set_pricetype(const ::std::string& value) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.priceType)
}
inline void RiskRuleWarningTradingResult::set_pricetype(const char* value) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.priceType)
}
inline void RiskRuleWarningTradingResult::set_pricetype(const char* value, size_t size) {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  pricetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.priceType)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_pricetype() {
  set_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.priceType)
  return pricetype_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_pricetype() {
  clear_has_pricetype();
  if (pricetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pricetype_;
    pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_pricetype(::std::string* pricetype) {
  if (pricetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricetype_;
  }
  if (pricetype) {
    set_has_pricetype();
    pricetype_ = pricetype;
  } else {
    clear_has_pricetype();
    pricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.priceType)
}

// required string accountGroupId = 7;
inline bool RiskRuleWarningTradingResult::has_accountgroupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_accountgroupid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiskRuleWarningTradingResult::clear_has_accountgroupid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiskRuleWarningTradingResult::clear_accountgroupid() {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_->clear();
  }
  clear_has_accountgroupid();
}
inline const ::std::string& RiskRuleWarningTradingResult::accountgroupid() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.accountGroupId)
  return *accountgroupid_;
}
inline void RiskRuleWarningTradingResult::set_accountgroupid(const ::std::string& value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.accountGroupId)
}
inline void RiskRuleWarningTradingResult::set_accountgroupid(const char* value) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.accountGroupId)
}
inline void RiskRuleWarningTradingResult::set_accountgroupid(const char* value, size_t size) {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  accountgroupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.accountGroupId)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_accountgroupid() {
  set_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountgroupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.accountGroupId)
  return accountgroupid_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_accountgroupid() {
  clear_has_accountgroupid();
  if (accountgroupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountgroupid_;
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_accountgroupid(::std::string* accountgroupid) {
  if (accountgroupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountgroupid_;
  }
  if (accountgroupid) {
    set_has_accountgroupid();
    accountgroupid_ = accountgroupid;
  } else {
    clear_has_accountgroupid();
    accountgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.accountGroupId)
}

// required string groupType = 8;
inline bool RiskRuleWarningTradingResult::has_grouptype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_grouptype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RiskRuleWarningTradingResult::clear_has_grouptype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RiskRuleWarningTradingResult::clear_grouptype() {
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_->clear();
  }
  clear_has_grouptype();
}
inline const ::std::string& RiskRuleWarningTradingResult::grouptype() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.groupType)
  return *grouptype_;
}
inline void RiskRuleWarningTradingResult::set_grouptype(const ::std::string& value) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.groupType)
}
inline void RiskRuleWarningTradingResult::set_grouptype(const char* value) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.groupType)
}
inline void RiskRuleWarningTradingResult::set_grouptype(const char* value, size_t size) {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  grouptype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.groupType)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_grouptype() {
  set_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grouptype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.groupType)
  return grouptype_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_grouptype() {
  clear_has_grouptype();
  if (grouptype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = grouptype_;
    grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_grouptype(::std::string* grouptype) {
  if (grouptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grouptype_;
  }
  if (grouptype) {
    set_has_grouptype();
    grouptype_ = grouptype;
  } else {
    clear_has_grouptype();
    grouptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.groupType)
}

// required string knockCode = 9;
inline bool RiskRuleWarningTradingResult::has_knockcode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_knockcode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RiskRuleWarningTradingResult::clear_has_knockcode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RiskRuleWarningTradingResult::clear_knockcode() {
  if (knockcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    knockcode_->clear();
  }
  clear_has_knockcode();
}
inline const ::std::string& RiskRuleWarningTradingResult::knockcode() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.knockCode)
  return *knockcode_;
}
inline void RiskRuleWarningTradingResult::set_knockcode(const ::std::string& value) {
  set_has_knockcode();
  if (knockcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    knockcode_ = new ::std::string;
  }
  knockcode_->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.knockCode)
}
inline void RiskRuleWarningTradingResult::set_knockcode(const char* value) {
  set_has_knockcode();
  if (knockcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    knockcode_ = new ::std::string;
  }
  knockcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Protobuf.RiskRuleWarningTradingResult.knockCode)
}
inline void RiskRuleWarningTradingResult::set_knockcode(const char* value, size_t size) {
  set_has_knockcode();
  if (knockcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    knockcode_ = new ::std::string;
  }
  knockcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Protobuf.RiskRuleWarningTradingResult.knockCode)
}
inline ::std::string* RiskRuleWarningTradingResult::mutable_knockcode() {
  set_has_knockcode();
  if (knockcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    knockcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Protobuf.RiskRuleWarningTradingResult.knockCode)
  return knockcode_;
}
inline ::std::string* RiskRuleWarningTradingResult::release_knockcode() {
  clear_has_knockcode();
  if (knockcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = knockcode_;
    knockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RiskRuleWarningTradingResult::set_allocated_knockcode(::std::string* knockcode) {
  if (knockcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete knockcode_;
  }
  if (knockcode) {
    set_has_knockcode();
    knockcode_ = knockcode;
  } else {
    clear_has_knockcode();
    knockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protobuf.RiskRuleWarningTradingResult.knockCode)
}

// required int64 orderQty = 10;
inline bool RiskRuleWarningTradingResult::has_orderqty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_orderqty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RiskRuleWarningTradingResult::clear_has_orderqty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RiskRuleWarningTradingResult::clear_orderqty() {
  orderqty_ = GOOGLE_LONGLONG(0);
  clear_has_orderqty();
}
inline ::google::protobuf::int64 RiskRuleWarningTradingResult::orderqty() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.orderQty)
  return orderqty_;
}
inline void RiskRuleWarningTradingResult::set_orderqty(::google::protobuf::int64 value) {
  set_has_orderqty();
  orderqty_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.orderQty)
}

// required double orderPrice = 11;
inline bool RiskRuleWarningTradingResult::has_orderprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_orderprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RiskRuleWarningTradingResult::clear_has_orderprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RiskRuleWarningTradingResult::clear_orderprice() {
  orderprice_ = 0;
  clear_has_orderprice();
}
inline double RiskRuleWarningTradingResult::orderprice() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.orderPrice)
  return orderprice_;
}
inline void RiskRuleWarningTradingResult::set_orderprice(double value) {
  set_has_orderprice();
  orderprice_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.orderPrice)
}

// required double orderAmount = 12;
inline bool RiskRuleWarningTradingResult::has_orderamount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_orderamount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RiskRuleWarningTradingResult::clear_has_orderamount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RiskRuleWarningTradingResult::clear_orderamount() {
  orderamount_ = 0;
  clear_has_orderamount();
}
inline double RiskRuleWarningTradingResult::orderamount() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.orderAmount)
  return orderamount_;
}
inline void RiskRuleWarningTradingResult::set_orderamount(double value) {
  set_has_orderamount();
  orderamount_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.orderAmount)
}

// required int64 knockQty = 13;
inline bool RiskRuleWarningTradingResult::has_knockqty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_knockqty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RiskRuleWarningTradingResult::clear_has_knockqty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RiskRuleWarningTradingResult::clear_knockqty() {
  knockqty_ = GOOGLE_LONGLONG(0);
  clear_has_knockqty();
}
inline ::google::protobuf::int64 RiskRuleWarningTradingResult::knockqty() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.knockQty)
  return knockqty_;
}
inline void RiskRuleWarningTradingResult::set_knockqty(::google::protobuf::int64 value) {
  set_has_knockqty();
  knockqty_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.knockQty)
}

// required double knockAmt = 14;
inline bool RiskRuleWarningTradingResult::has_knockamt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_knockamt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RiskRuleWarningTradingResult::clear_has_knockamt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RiskRuleWarningTradingResult::clear_knockamt() {
  knockamt_ = 0;
  clear_has_knockamt();
}
inline double RiskRuleWarningTradingResult::knockamt() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.knockAmt)
  return knockamt_;
}
inline void RiskRuleWarningTradingResult::set_knockamt(double value) {
  set_has_knockamt();
  knockamt_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.knockAmt)
}

// required double reckoningAmt = 15;
inline bool RiskRuleWarningTradingResult::has_reckoningamt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_reckoningamt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RiskRuleWarningTradingResult::clear_has_reckoningamt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RiskRuleWarningTradingResult::clear_reckoningamt() {
  reckoningamt_ = 0;
  clear_has_reckoningamt();
}
inline double RiskRuleWarningTradingResult::reckoningamt() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.reckoningAmt)
  return reckoningamt_;
}
inline void RiskRuleWarningTradingResult::set_reckoningamt(double value) {
  set_has_reckoningamt();
  reckoningamt_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.reckoningAmt)
}

// required double knockPrice = 16;
inline bool RiskRuleWarningTradingResult::has_knockprice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RiskRuleWarningTradingResult::set_has_knockprice() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RiskRuleWarningTradingResult::clear_has_knockprice() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RiskRuleWarningTradingResult::clear_knockprice() {
  knockprice_ = 0;
  clear_has_knockprice();
}
inline double RiskRuleWarningTradingResult::knockprice() const {
  // @@protoc_insertion_point(field_get:Protocol.Protobuf.RiskRuleWarningTradingResult.knockPrice)
  return knockprice_;
}
inline void RiskRuleWarningTradingResult::set_knockprice(double value) {
  set_has_knockprice();
  knockprice_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Protobuf.RiskRuleWarningTradingResult.knockPrice)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BeanFeedWarningMsg_2eproto__INCLUDED
