#include "Thread.h"

CThread::CThread(Runnable* target):m_pTarget(target),m_hThread(NULL),m_bRunning(false),m_bDetached(false)
{
}
CThread:: ~CThread()
{
    if(m_hThread)
        CloseHandle(m_hThread);
    if(m_pTarget)
        delete m_pTarget;
}
bool  CThread::Start(const char* pszFileName/* = __FILE__*/, const int nLine /*= __LINE__*/)
{
	if (m_hThread)
	{
		//TO DO Output Log;
		return false;
	}
	m_hThread = reinterpret_cast<HANDLE>(_beginthreadex(0, 0, ThreadProc, this, 0, &m_uThreadID));
	if (INVALID_HANDLE_VALUE == m_hThread)
	{
		//TO DO Output Log;
		return false;
	}
	return true;
}
void  CThread::Join(int _nTimeout)
{
    if(m_hThread)
	{ 
		if( _nTimeout <= 0 )
			_nTimeout = INFINITE;

	   WaitForSingleObject(m_hThread,_nTimeout);
	}

}

bool CThread::Resume()
{
	if(NULL == m_hThread)
		return false;

	::ResumeThread(m_hThread);

	return true;
}

bool CThread::Suspend()
{
	if(NULL == m_hThread)
		return false;

	::SuspendThread(m_hThread);

	return true;
}

bool CThread::Detach()
{
	if (!m_bDetached)
	{
		CloseHandle(m_hThread);
		m_hThread = NULL;
	}
	m_bDetached = true;
}

unsigned _stdcall CThread::ThreadProc(void * param)
{
    CThread* pThread = static_cast<CThread*>(param);
    if(pThread->m_pTarget)
        pThread->m_pTarget->Run();
    else
        pThread->Run();
    return 0;
}
