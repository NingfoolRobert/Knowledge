#include <python3.6m//Python.h> 

#include <iostream>
#include <stdio.h>
#include <stdlib.h>

#include <unistd.h>



int main ()
{
	Py_Initialize();
	
	if(!Py_IsInitialized())
	{
		return -1;
	}
	
	
	PyRun_SimpleString("import sys");
	PyRun_SimpleString("sys.path.append('./')");
	
	PyObject* pName, *pModule, *pDict, *pFunc, *pArgs;

//	pName = PyString_FromString("Xtest");

	pModule = PyImport_ImportModule("Xtest");

	if(!pModule)
	{
		std::cout << "Module  faile" << std::endl;
		return -1;
	}
//	pDict = PyModule_GetDict(pModule);
//	if(!pDict)
//	{
//		return -1;
//	}
	pFunc = PyObject_GetItemString(pDict, "add");
	if(!pFunc)
	{
		std::cout <<"fun find fail" << std::endl;
		return -1;
	}
	pArgs = PyTuple_New(2);
	PyTuple_SetItem(pArgs, 0,Py_BuildValue("i",1));
	
	PyTuple_SetItem(pArgs, 1,Py_BuildValue("i",3));

///	pDict = PyObject_CallObject(pFunc, pArgs);
	
//	std::cout << PyLong_AsLong(pDict);

//	pName = PyString_Fromstring("testfunc");
//	pModule = PyImport_Import(pName);

//	if(!pModule)
//	{
//		printf("can't find testfunc.py");
//		getchar();
//		return -1;
//	}
//	pDict = PyModule_GetDict(pModule);
//	if(!pDict)
//	{
//		return -1;
//	}

//	pFunc = PyDict_GetItemString(pDict, "add");
//	if(!pFunc || !PyCallbale_Check(pFunc))
//	{
//		printf("can't find function [add]");
//		getchar();
//		return -1;
//	}
//	pArgs = PyTuple_New(2);


//	PyTuple_SetItem(pArgs, 0, Py_BuildValue("l",3)); 
//	PyTuple_SetItem(pArgs, 1, Py_BuildValue("l",4));

//	PyObject_CallObject(pFunc, pArgs);


//	PyObject_CallObject(pFunc, pArgs);
	
		



		Py_DECREF(pName);
		Py_DECREF(pArgs);
		Py_DECREF(pModule);




	Py_Finalize();





	return 0;
}
