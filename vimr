"通用设置

syntax on
set nu
set ruler
set nocompatible
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
Plugin 'vim-scripts/a.vim'
Bundle 'Valloric/YouCompleteMe'
"Plugin 'git://git.wincent.com/command-t.git'
"Plugin 'vim-airline/vim-airline'
Plugin 'gmarik/Vundle.vim'
call vundle#end()

filetype plugin indent on
map <C-n> :NERDTree<CR>

execute pathogen#infect()
Plugin 'tomasr/molokai'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
set laststatus =2

set t_Co=256 "在windows中用xshell打开vim可以显示色"


let g:airline_theme='luna'

" 使用powerline打过补丁的字体
let g:airline_powerline_fonts = 1
 " 开启tabline
 let g:airline#extensions#tabline#enabled = 1
 " tabline中当前buffer两端的分隔字符
 let g:airline#extensions#tabline#left_sep = ' '
 " tabline中未激活buffer两端的分隔字符
 let g:airline#extensions#tabline#left_alt_sep = ' '
 " tabline中buffer显示编号
 let g:airline#extensions#tabline#buffer_nr_show = 1
 " 映射切换buffer的键位
 nnoremap [b :bp<CR>
 nnoremap ]b :bn<CR>
 " 映射<leader>num到num buffer
 map <leader>1 :b 1<CR>
 map <leader>2 :b 2<CR>
 map <leader>3 :b 3<CR>
 map <leader>4 :b 4<CR>
 map <leader>5 :b 5<CR>
 map <leader>6 :b 6<CR>
 map <leader>7 :b 7<CR>
 map <leader>8 :b 8<CR>
 map <leader>9 :b 9<CR>
 

Plugin  'vim-scripts/taglist.vim'
Plugin 'junegunn/limelight.vim'

let g:miniBufExplMaxSize = 2

let Tlist_Show_One_File=1    " 只展示一个文件的taglist
let Tlist_Exit_OnlyWindow=1  " 当taglist是最后以个窗口时自动退出
let Tlist_Use_Right_Window=1 " 在右边显示taglist窗口
let Tlist_Sort_Type="name"   " tag按名字排序

set tags+=~/.vim/tags/cpp_src/tags

set runtimepath+=~/.vim/bundle/YouCompleteMe
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口"
let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM基于标签引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全
let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全
let g:ycm_complete_in_comments = 1
let g:ycm_confirm_extra_conf = 0                            " 关闭加载.ycm_extra_conf.py提示
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  " 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"             " 回车即选中当前项
nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>     " 跳转到定义处
let g:ycm_min_num_of_chars_for_completion=2                 " 从第2个键入字符就开始罗列匹配项

let g:ycm_min_num_of_chars_for_completion = 2
"设置触发标识符补全的最小字符数，设置为99或更大的数字，则等效于关闭标识符补全功能，但保留语义补全功能

let g:ycm_min_num_identifier_candidate_chars = 0
"设置要在标示符补全列表中显示的候选项的最小字符数，0表示没有限制，对语义补全无影响

let g:ycm_max_num_candidates = 50
"设置语义补全的最大候选项数量，0表示没有限制

let g:ycm_max_num_identifier_candidates = 10
"设置标识符补全的最大候选项数量，0表示没有限制

let g:ycm_auto_trigger=1
"0表示关闭ycm语义补全和标识符补全触发器，但仍可以用ctrl+space 打开语义补全，1表示打开

let g:ycm_filetype_whitelist = { '*': 1  }
"文件类型白名单，vim打开这些类型文件时会开启YCM。*表示所有文件类型

let g:ycm_filetype_blacklist = {'tagbar' : 1, 'qf' : 1,'notes' : 1, 'markdown' : 1, 'unite' : 1, 'text' : 1, 'vimwiki' : 1, 'pandoc' : 1, 'infolog' : 1, 'mail' : 1}
"文件类型黑名单，vim打开这些类型文件时会关闭YCM

let g:ycm_filetype_specific_completion_to_disable={'gitcommit': 1}
"语义补全黑名单，vim打开这些类型文件时会关闭YCM语义补全，但标识符补全仍可用

let g:ycm_filepath_blacklist = {'html' : 1, 'jsx' : 1,'xml' : 1,}

"对特定文件类型禁用文件路径补全

let g:ycm_show_diagnostics_ui = 1
"开启YCM的显示诊断信息的功能，0表示关闭

let g:ycm_error_symbol = '>>'
"设置错误标志为>>

let g:ycm_warning_symbol = '>>'
"设置警告标志为>>

let g:ycm_enable_diagnostic_signs = 1
"在代码中高亮显示YCM诊断对应的内容，如果关闭，则会关闭错误和警告高亮功能，0表示关闭

let g:ycm_enable_diagnostic_highlighting = 1
"高亮显示代码中与诊断信息有关的文本或代码，0表示关闭

let g:ycm_echo_current_diagnostic = 1
"当光标移到所在行时显示诊断信息

let g:ycm_filter_diagnostics={}
"诊断信息过滤器，此选项控制YCM将呈现哪些诊断，针对特定文件类型，用正则表达式控制要显示的内容，用level控制消息的级别，{}表示显示所有诊断信息

let g:ycm_always_populate_location_list = 0
"每次获取新诊断数据时自动填充位置列表，1表示打开，默认关闭以免干扰可能已放置在位置列表中的其他数据。在vim中用:help location-list命令查看位置列表的具体解释

let g:ycm_open_loclist_on_ycm_diags = 1
"在强制编译后自动打位置列表并用诊断信息填充，所谓位置列表就是标出各错误或警告对应在哪些行的小窗口，可以实现直接跳转到错误行"

let g:ycm_semantic_triggers = {'c' : ['->', '.'],'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s','re!\[.*\]\s'],'ocaml' : ['.', '#'],'cpp,objcpp' : ['->', '.', '::'],'perl' : ['->'],'php' : ['->', '::'],'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],'ruby' : ['.', '::'],'lua' : ['.', ':'],'erlang' : [':'],}
"设置YCM的语义触发器的关键字




"filetype plugin indent on
set completeopt=longest,menu
"let OmniCpp_NamespaceSearch = 2     " search namespaces in the current buffer   and in included files
"let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
"let OmniCpp_MayCompleteScope = 1    " 输入 :: 后自动补全
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
"
let g:airline#extensions#tabline#enabled = 1


set completeopt -=preview
filetype plugin on
set confirm

set autoindent

set cindent

set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set smarttab
set history=1000

set nobackup
set noswapfile

set ignorecase

set hlsearch
set incsearch

set gdefault
set enc=utf-8
set backspace=2
set wildmenu
set whichwrap+=<,>,h,l
set mouse=a
set selection=exclusive
set selectmode=mouse,key
set report=0

set showmatch
set matchtime=1

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
"
" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'
"
" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1
"
"" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   "   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'
"
"   " Highlighting priority (default: 10)
   "   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1
" "
" "


